
----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\app\api\uploadthing\core.ts -----

import { createUploadthing, type FileRouter } from "uploadthing/next";
import { UploadThingError } from "uploadthing/server";

const f = createUploadthing();

export const ourFileRouter = {
  imageUploader: f({ image: { maxFileSize: "4MB", maxFileCount: 1 } })
    .middleware(async ({ req }) => {
      // This code runs on your server before upload
      // You can add authentication checks here if needed
      return { userId: "admin" };
    })
    .onUploadComplete(async ({ metadata, file }) => {
      // This code RUNS ON YOUR SERVER after upload
      console.log("Upload complete for userId:", metadata.userId);
      console.log("file url", file.url);
      return { uploadedBy: metadata.userId };
    }),
} satisfies FileRouter;

export type OurFileRouter = typeof ourFileRouter;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\app\api\uploadthing\route.ts -----

import { createRouteHandler } from "uploadthing/next";
import { ourFileRouter } from "./core";

export const { GET, POST } = createRouteHandler({
  router: ourFileRouter,
});

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\accordion.tsx -----

import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDown } from "lucide-react";

import { cn } from "@/lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
));

AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\alert-dialog.tsx -----

import * as React from "react";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />
);
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold", className)} {...props} />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: "outline" }), "mt-2 sm:mt-0", className)}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\alert.tsx -----

import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div ref={ref} role="alert" className={cn(alertVariants({ variant }), className)} {...props} />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h5 ref={ref} className={cn("mb-1 font-medium leading-none tracking-tight", className)} {...props} />
  ),
);
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("text-sm [&_p]:leading-relaxed", className)} {...props} />
  ),
);
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\aspect-ratio.tsx -----

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio";

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\avatar.tsx -----

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image ref={ref} className={cn("aspect-square h-full w-full", className)} {...props} />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\badge.tsx -----

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\breadcrumb.tsx -----

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/lib/utils";

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode;
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = "Breadcrumb";

const BreadcrumbList = React.forwardRef<HTMLOListElement, React.ComponentPropsWithoutRef<"ol">>(
  ({ className, ...props }, ref) => (
    <ol
      ref={ref}
      className={cn(
        "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
        className,
      )}
      {...props}
    />
  ),
);
BreadcrumbList.displayName = "BreadcrumbList";

const BreadcrumbItem = React.forwardRef<HTMLLIElement, React.ComponentPropsWithoutRef<"li">>(
  ({ className, ...props }, ref) => (
    <li ref={ref} className={cn("inline-flex items-center gap-1.5", className)} {...props} />
  ),
);
BreadcrumbItem.displayName = "BreadcrumbItem";

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean;
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return <Comp ref={ref} className={cn("transition-colors hover:text-foreground", className)} {...props} />;
});
BreadcrumbLink.displayName = "BreadcrumbLink";

const BreadcrumbPage = React.forwardRef<HTMLSpanElement, React.ComponentPropsWithoutRef<"span">>(
  ({ className, ...props }, ref) => (
    <span
      ref={ref}
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn("font-normal text-foreground", className)}
      {...props}
    />
  ),
);
BreadcrumbPage.displayName = "BreadcrumbPage";

const BreadcrumbSeparator = ({ children, className, ...props }: React.ComponentProps<"li">) => (
  <li role="presentation" aria-hidden="true" className={cn("[&>svg]:size-3.5", className)} {...props}>
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

const BreadcrumbEllipsis = ({ className, ...props }: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis";

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\button-variants.ts -----

import { cva, type VariantProps } from "class-variance-authority";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-full text-sm font-medium transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow-mystic hover:bg-primary/90 hover:shadow-glow",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border-2 border-primary/20 bg-transparent backdrop-blur-sm hover:bg-primary/10 hover:border-primary/40 hover:shadow-mystic",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent/20 hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        mystic: "bg-gradient-mystic text-white shadow-mystic hover:shadow-glow hover:scale-105",
        gold: "bg-gradient-gold text-foreground shadow-gold hover:shadow-glow hover:scale-105 font-semibold",
        glass: "glass-effect text-foreground hover:bg-white/20 hover:shadow-glow backdrop-blur-md",
        rose: "bg-gradient-rose text-white shadow-rose hover:shadow-glow hover:scale-105",
        lilac: "bg-gradient-lilac text-white shadow-lilac hover:shadow-glow hover:scale-105",
        mint: "bg-gradient-mint text-white shadow-mint hover:shadow-glow hover:scale-105",
        peach: "bg-gradient-peach text-white shadow-peach hover:shadow-glow hover:scale-105",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-full px-3",
        lg: "h-11 rounded-full px-8",
        icon: "h-10 w-10 rounded-full",
        xl: "h-12 rounded-full px-10 text-base",
        xxl: "h-14 rounded-full px-12 text-lg",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export { buttonVariants };
export type { VariantProps };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\button.tsx -----

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { buttonVariants, type VariantProps } from "./button-variants";
import { cn } from "@/lib/utils";


export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;
  },
);
Button.displayName = "Button";

export { Button };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\calendar.tsx -----

import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(buttonVariants({ variant: "ghost" }), "h-9 w-9 p-0 font-normal aria-selected:opacity-100"),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\card.tsx -----

import * as React from "react"
import { cn } from "@/lib/utils"


const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\carousel.tsx -----

import * as React from "react";
import useEmblaCarousel, { type UseEmblaCarouselType } from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: "horizontal" | "vertical";
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & CarouselProps>(
  ({ orientation = "horizontal", opts, setApi, plugins, className, children, ...props }, ref) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins,
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext],
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation: orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  },
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const { carouselRef, orientation } = useCarousel();

    return (
      <div ref={carouselRef} className="overflow-hidden">
        <div
          ref={ref}
          className={cn("flex", orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col", className)}
          {...props}
        />
      </div>
    );
  },
);
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const { orientation } = useCarousel();

    return (
      <div
        ref={ref}
        role="group"
        aria-roledescription="slide"
        className={cn("min-w-0 shrink-0 grow-0 basis-full", orientation === "horizontal" ? "pl-4" : "pt-4", className)}
        {...props}
      />
    );
  },
);
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollPrev, canScrollPrev } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-left-12 top-1/2 -translate-y-1/2"
            : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
          className,
        )}
        disabled={!canScrollPrev}
        onClick={scrollPrev}
        {...props}
      >
        <ArrowLeft className="h-4 w-4" />
        <span className="sr-only">Previous slide</span>
      </Button>
    );
  },
);
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollNext, canScrollNext } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-right-12 top-1/2 -translate-y-1/2"
            : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
          className,
        )}
        disabled={!canScrollNext}
        onClick={scrollNext}
        {...props}
      >
        <ArrowRight className="h-4 w-4" />
        <span className="sr-only">Next slide</span>
      </Button>
    );
  },
);
CarouselNext.displayName = "CarouselNext";

export { type CarouselApi, Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\cart.tsx -----

import React from 'react';
import { X, Plus, Minus, ShoppingBag, Lock } from 'lucide-react';
import { useCart } from '@/hooks/useCart';
import { useAuth } from '@/hooks/useAuth';
import { Button } from '@/components/ui/button';
import { useNavigate } from 'react-router-dom';
import { cn } from '@/lib/utils';

export function Cart() {
  const { state, removeItem, updateQuantity, clearCart, toggleCart } = useCart();
  const { items, totalItems, totalAmount, isOpen } = state;
  const { isAuthenticated } = useAuth();
  const navigate = useNavigate();

  return (
    <div
      className={cn(
        'fixed inset-y-0 right-0 z-[60] w-full max-w-sm bg-background shadow-xl transition-transform duration-300 ease-in-out',
        isOpen ? 'translate-x-0' : 'translate-x-full'
      )}
    >
      <div className="flex h-full flex-col">
        {/* Cart Header */}
        <div className="flex items-center justify-between border-b px-4 py-3">
          <h2 className="text-lg font-medium">Shopping Cart ({totalItems})</h2>
          <Button variant="ghost" size="icon" onClick={toggleCart} className="rounded-full">
            <X className="h-5 w-5" />
          </Button>
        </div>

        {/* Cart Items */}
        <div className="flex-1 overflow-y-auto py-2">
          {items.length === 0 ? (
            <div className="flex h-full flex-col items-center justify-center text-center">
              <ShoppingBag className="h-16 w-16 text-muted-foreground mb-4" />
              <h3 className="text-lg font-medium">Your cart is empty</h3>
              <p className="text-sm text-muted-foreground mt-1">Add items to your cart to see them here</p>
              <Button onClick={toggleCart} className="mt-6 font-arial">
                Continue Shopping
              </Button>
            </div>
          ) : (
            <ul className="divide-y">
              {items.map((item) => (
                <li key={item.id} className="flex py-4 px-4">
                  <div className="h-20 w-20 flex-shrink-0 overflow-hidden rounded-md border">
                    <img
                      src={item.image}
                      alt={item.name}
                      className="h-full w-full object-cover object-center"
                    />
                  </div>

                  <div className="ml-4 flex flex-1 flex-col">
                    <div className="flex justify-between">
                      <h3 className="text-sm font-medium">{item.name}</h3>
                      <p className="text-sm font-medium">â‚¹{item.price.toFixed(2)}</p>
                    </div>
                    
                    <div className="flex flex-1 items-end justify-between">
                      <div className="flex items-center border rounded-md">
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-8 w-8 rounded-none"
                          onClick={() => updateQuantity(item.id, item.quantity - 1)}
                          disabled={item.quantity <= 1}
                        >
                          <Minus className="h-3 w-3" />
                        </Button>
                        <span className="px-2 text-sm">{item.quantity}</span>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-8 w-8 rounded-none"
                          onClick={() => updateQuantity(item.id, item.quantity + 1)}
                        >
                          <Plus className="h-3 w-3" />
                        </Button>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => removeItem(item.id)}
                        className="text-sm text-muted-foreground hover:text-destructive"
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>

        {/* Cart Footer */}
        {items.length > 0 && (
          <div className="border-t px-4 py-4 sm:px-6">
            <div className="flex justify-between text-base font-medium">
              <p>Subtotal</p>
              <p>â‚¹{totalAmount.toFixed(2)}</p>
            </div>
            <p className="mt-0.5 text-sm text-muted-foreground">Shipping and taxes calculated at checkout.</p>
            <div className="mt-4 space-y-2">
              {isAuthenticated ? (
                <Button 
                  className="w-full font-arial"
                  onClick={() => {
                    toggleCart();
                    navigate('/checkout');
                  }}
                >
                  Checkout
                </Button>
              ) : (
                <div className="space-y-2">
                  <div className="flex items-center justify-center gap-2 p-3 bg-amber-50 border border-amber-200 rounded-lg">
                    <Lock className="h-4 w-4 text-amber-600" />
                    <span className="text-sm text-amber-800">Login required to checkout</span>
                  </div>
                  <Button 
                    className="w-full font-arial"
                    onClick={() => {
                      toggleCart();
                      navigate('/signin', { state: { from: { pathname: '/checkout' } } });
                    }}
                  >
                    Login to Checkout
                  </Button>
                </div>
              )}
              <Button
                variant="outline"
                className="w-full font-arial"
                onClick={toggleCart}
              >
                Continue Shopping
              </Button>
              <Button
                variant="ghost"
                className="w-full text-sm font-arial"
                onClick={clearCart}
              >
                Clear Cart
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export function CartOverlay() {
  const { state, toggleCart } = useCart();
  
  if (!state.isOpen) return null;
  
  return (
    <div 
      className="fixed inset-0 bg-background/80 backdrop-blur-sm z-40"
      onClick={toggleCart}
    />
  );
}

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\chart.tsx -----

import * as React from "react";
import * as RechartsPrimitive from "recharts";

import { cn } from "@/lib/utils";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> });
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig;
    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>["children"];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className,
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = "Chart";

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color);

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join("\n")}
}
`,
          )
          .join("\n"),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: "line" | "dot" | "dashed";
      nameKey?: string;
      labelKey?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref,
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return <div className={cn("font-medium", labelClassName)}>{labelFormatter(value, payload)}</div>;
      }

      if (!value) {
        return null;
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== "dot";

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className,
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center",
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn("shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]", {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent": indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                          })}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center",
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">{itemConfig?.label || item.name}</span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  },
);
ChartTooltipContent.displayName = "ChartTooltip";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(({ className, hideIcon = false, payload, verticalAlign = "bottom", nameKey }, ref) => {
  const { config } = useChart();

  if (!payload?.length) {
    return null;
  }

  return (
    <div
      ref={ref}
      className={cn("flex items-center justify-center gap-4", verticalAlign === "top" ? "pb-3" : "pt-3", className)}
    >
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`;
        const itemConfig = getPayloadConfigFromPayload(config, item, key);

        return (
          <div
            key={item.value}
            className={cn("flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground")}
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        );
      })}
    </div>
  );
});
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }

  const payloadPayload =
    "payload" in payload && typeof payload.payload === "object" && payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (key in payload && typeof payload[key as keyof typeof payload] === "string") {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;
  }

  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];
}

export { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\checkbox.tsx -----

import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";

import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\collapsible.tsx -----

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\command.tsx -----

import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { Command as CommandPrimitive } from "cmdk";
import { Search } from "lucide-react";

import { cn } from "@/lib/utils";
import { Dialog, DialogContent } from "@/components/ui/dialog";

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

type CommandDialogProps = DialogProps;

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />);

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className,
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />;
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\context-menu.tsx -----

import * as React from "react";
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const ContextMenu = ContextMenuPrimitive.Root;

const ContextMenuTrigger = ContextMenuPrimitive.Trigger;

const ContextMenuGroup = ContextMenuPrimitive.Group;

const ContextMenuPortal = ContextMenuPrimitive.Portal;

const ContextMenuSub = ContextMenuPrimitive.Sub;

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
));
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
));
ContextMenuCheckboxItem.displayName = ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
));
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold text-foreground", inset && "pl-8", className)}
    {...props}
  />
));
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-border", className)} {...props} />
));
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />;
};
ContextMenuShortcut.displayName = "ContextMenuShortcut";

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\dialog.tsx -----

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";

import { cn } from "@/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity data-[state=open]:bg-accent data-[state=open]:text-muted-foreground hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)} {...props} />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\drawer.tsx -----

import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "@/lib/utils";

const Drawer = ({ shouldScaleBackground = true, ...props }: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay ref={ref} className={cn("fixed inset-0 z-50 bg-black/80", className)} {...props} />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className,
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)} {...props} />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\dropdown-menu.tsx -----

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent focus:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest opacity-60", className)} {...props} />;
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\form.tsx -----

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import { Controller, ControllerProps, FieldPath, FieldValues, FormProvider, useFormContext } from "react-hook-form";

import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);

const FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const id = React.useId();

    return (
      <FormItemContext.Provider value={{ id }}>
        <div ref={ref} className={cn("space-y-2", className)} {...props} />
      </FormItemContext.Provider>
    );
  },
);
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return <Label ref={ref} className={cn(error && "text-destructive", className)} htmlFor={formItemId} {...props} />;
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<React.ElementRef<typeof Slot>, React.ComponentPropsWithoutRef<typeof Slot>>(
  ({ ...props }, ref) => {
    const { error, formItemId, formDescriptionId, formMessageId } = useFormField();

    return (
      <Slot
        ref={ref}
        id={formItemId}
        aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}
        aria-invalid={!!error}
        {...props}
      />
    );
  },
);
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => {
    const { formDescriptionId } = useFormField();

    return <p ref={ref} id={formDescriptionId} className={cn("text-sm text-muted-foreground", className)} {...props} />;
  },
);
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, children, ...props }, ref) => {
    const { error, formMessageId } = useFormField();
    const body = error ? String(error?.message) : children;

    if (!body) {
      return null;
    }

    return (
      <p ref={ref} id={formMessageId} className={cn("text-sm font-medium text-destructive", className)} {...props}>
        {body}
      </p>
    );
  },
);
FormMessage.displayName = "FormMessage";

export { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\hover-card.tsx -----

import * as React from "react";
import * as HoverCardPrimitive from "@radix-ui/react-hover-card";

import { cn } from "@/lib/utils";

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\input-otp.tsx -----

import * as React from "react";
import { OTPInput, OTPInputContext } from "input-otp";
import { Dot } from "lucide-react";

import { cn } from "@/lib/utils";

const InputOTP = React.forwardRef<React.ElementRef<typeof OTPInput>, React.ComponentPropsWithoutRef<typeof OTPInput>>(
  ({ className, containerClassName, ...props }, ref) => (
    <OTPInput
      ref={ref}
      containerClassName={cn("flex items-center gap-2 has-[:disabled]:opacity-50", containerClassName)}
      className={cn("disabled:cursor-not-allowed", className)}
      {...props}
    />
  ),
);
InputOTP.displayName = "InputOTP";

const InputOTPGroup = React.forwardRef<React.ElementRef<"div">, React.ComponentPropsWithoutRef<"div">>(
  ({ className, ...props }, ref) => <div ref={ref} className={cn("flex items-center", className)} {...props} />,
);
InputOTPGroup.displayName = "InputOTPGroup";

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className,
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink h-4 w-px bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = "InputOTPSlot";

const InputOTPSeparator = React.forwardRef<React.ElementRef<"div">, React.ComponentPropsWithoutRef<"div">>(
  ({ ...props }, ref) => (
    <div ref={ref} role="separator" {...props}>
      <Dot />
    </div>
  ),
);
InputOTPSeparator.displayName = "InputOTPSeparator";

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\input.tsx -----

import * as React from "react";

import { cn } from "@/lib/utils";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\label.tsx -----

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  HTMLLabelElement,
  React.LabelHTMLAttributes<HTMLLabelElement> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <label
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = "Label"

export { Label }

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\menubar.tsx -----

import * as React from "react";
import * as MenubarPrimitive from "@radix-ui/react-menubar";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn("flex h-10 items-center space-x-1 rounded-md border bg-background p-1", className)}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(({ className, align = "start", alignOffset = -4, sideOffset = 8, ...props }, ref) => (
  <MenubarPrimitive.Portal>
    <MenubarPrimitive.Content
      ref={ref}
      align={align}
      alignOffset={alignOffset}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </MenubarPrimitive.Portal>
));
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />;
};
MenubarShortcut.displayname = "MenubarShortcut";

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\navigation-menu.tsx -----

import * as React from "react";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";
import { ChevronDown } from "lucide-react";

import { cn } from "@/lib/utils";

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn("relative z-10 flex max-w-max flex-1 items-center justify-center", className)}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn("group flex flex-1 list-none items-center justify-center space-x-1", className)}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50",
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto",
      className,
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className,
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className,
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\pagination.tsx -----

import * as React from "react";
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/lib/utils";
import { ButtonProps, buttonVariants } from "@/components/ui/button";

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(
  ({ className, ...props }, ref) => (
    <ul ref={ref} className={cn("flex flex-row items-center gap-1", className)} {...props} />
  ),
);
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;

const PaginationLink = ({ className, isActive, size = "icon", ...props }: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className,
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink aria-label="Go to previous page" size="default" className={cn("gap-1 pl-2.5", className)} {...props}>
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink aria-label="Go to next page" size="default" className={cn("gap-1 pr-2.5", className)} {...props}>
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({ className, ...props }: React.ComponentProps<"span">) => (
  <span aria-hidden className={cn("flex h-9 w-9 items-center justify-center", className)} {...props}>
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\popover.tsx -----

import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@/lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\progress.tsx -----

import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";

import { cn } from "@/lib/utils";

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\radio-group.tsx -----

import * as React from "react";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return <RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />;
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\resizable.tsx -----

import { GripVertical } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";

const ResizablePanelGroup = ({ className, ...props }: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn("flex h-full w-full data-[panel-group-direction=vertical]:flex-col", className)}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\scroll-area.tsx -----

import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root ref={ref} className={cn("relative overflow-hidden", className)} {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">{children}</ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\select.tsx -----

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown, ChevronUp } from "lucide-react";

import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label ref={ref} className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)} {...props} />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\separator.tsx -----

import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(({ className, orientation = "horizontal", decorative = true, ...props }, ref) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn("shrink-0 bg-border", orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]", className)}
    {...props}
  />
));
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\sheet.tsx -----

import * as SheetPrimitive from "@radix-ui/react-dialog";
import { cva, type VariantProps } from "class-variance-authority";
import { X } from "lucide-react";
import * as React from "react";

import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<React.ElementRef<typeof SheetPrimitive.Content>, SheetContentProps>(
  ({ side = "right", className, children, ...props }, ref) => (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
        {children}
        <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity data-[state=open]:bg-secondary hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none">
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  ),
);
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title ref={ref} className={cn("text-lg font-semibold text-foreground", className)} {...props} />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetClose,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetOverlay,
  SheetPortal,
  SheetTitle,
  SheetTrigger,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\sidebar.tsx -----

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { VariantProps, cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react";

import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Sheet, SheetContent } from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

const SIDEBAR_COOKIE_NAME = "sidebar:state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

type SidebarContext = {
  state: "expanded" | "collapsed";
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContext | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.");
  }

  return context;
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean;
    open?: boolean;
    onOpenChange?: (open: boolean) => void;
  }
>(({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }, ref) => {
  const isMobile = useIsMobile();
  const [openMobile, setOpenMobile] = React.useState(false);

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen);
  const open = openProp ?? _open;
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === "function" ? value(open) : value;
      if (setOpenProp) {
        setOpenProp(openState);
      } else {
        _setOpen(openState);
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
    },
    [setOpenProp, open],
  );

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile]);

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
        event.preventDefault();
        toggleSidebar();
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [toggleSidebar]);

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed";

  const contextValue = React.useMemo<SidebarContext>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],
  );

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn("group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar", className)}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
});
SidebarProvider.displayName = "SidebarProvider";

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right";
    variant?: "sidebar" | "floating" | "inset";
    collapsible?: "offcanvas" | "icon" | "none";
  }
>(({ side = "left", variant = "sidebar", collapsible = "offcanvas", className, children, ...props }, ref) => {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

  if (collapsible === "none") {
    return (
      <div
        className={cn("flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground", className)}
        ref={ref}
        {...props}
      >
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-mobile="true"
          className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div
      ref={ref}
      className="group peer hidden text-sidebar-foreground md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        className={cn(
          "relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]",
        )}
      />
      <div
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className,
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
        >
          {children}
        </div>
      </div>
    </div>
  );
});
Sidebar.displayName = "Sidebar";

const SidebarTrigger = React.forwardRef<React.ElementRef<typeof Button>, React.ComponentProps<typeof Button>>(
  ({ className, onClick, ...props }, ref) => {
    const { toggleSidebar } = useSidebar();

    return (
      <Button
        ref={ref}
        data-sidebar="trigger"
        variant="ghost"
        size="icon"
        className={cn("h-7 w-7", className)}
        onClick={(event) => {
          onClick?.(event);
          toggleSidebar();
        }}
        {...props}
      >
        <PanelLeft />
        <span className="sr-only">Toggle Sidebar</span>
      </Button>
    );
  },
);
SidebarTrigger.displayName = "SidebarTrigger";

const SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<"button">>(
  ({ className, ...props }, ref) => {
    const { toggleSidebar } = useSidebar();

    return (
      <button
        ref={ref}
        data-sidebar="rail"
        aria-label="Toggle Sidebar"
        tabIndex={-1}
        onClick={toggleSidebar}
        title="Toggle Sidebar"
        className={cn(
          "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 hover:after:bg-sidebar-border sm:flex",
          "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
          "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
          "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
          "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
          "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarRail.displayName = "SidebarRail";

const SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<"main">>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className,
      )}
      {...props}
    />
  );
});
SidebarInset.displayName = "SidebarInset";

const SidebarInput = React.forwardRef<React.ElementRef<typeof Input>, React.ComponentProps<typeof Input>>(
  ({ className, ...props }, ref) => {
    return (
      <Input
        ref={ref}
        data-sidebar="input"
        className={cn(
          "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarInput.displayName = "SidebarInput";

const SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="header" className={cn("flex flex-col gap-2 p-2", className)} {...props} />;
});
SidebarHeader.displayName = "SidebarHeader";

const SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="footer" className={cn("flex flex-col gap-2 p-2", className)} {...props} />;
});
SidebarFooter.displayName = "SidebarFooter";

const SidebarSeparator = React.forwardRef<React.ElementRef<typeof Separator>, React.ComponentProps<typeof Separator>>(
  ({ className, ...props }, ref) => {
    return (
      <Separator
        ref={ref}
        data-sidebar="separator"
        className={cn("mx-2 w-auto bg-sidebar-border", className)}
        {...props}
      />
    );
  },
);
SidebarSeparator.displayName = "SidebarSeparator";

const SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarContent.displayName = "SidebarContent";

const SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  );
});
SidebarGroup.displayName = "SidebarGroup";

const SidebarGroupLabel = React.forwardRef<HTMLDivElement, React.ComponentProps<"div"> & { asChild?: boolean }>(
  ({ className, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "div";

    return (
      <Comp
        ref={ref}
        data-sidebar="group-label"
        className={cn(
          "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
          "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarGroupLabel.displayName = "SidebarGroupLabel";

const SidebarGroupAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<"button"> & { asChild?: boolean }>(
  ({ className, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";

    return (
      <Comp
        ref={ref}
        data-sidebar="group-action"
        className={cn(
          "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
          // Increases the hit area of the button on mobile.
          "after:absolute after:-inset-2 after:md:hidden",
          "group-data-[collapsible=icon]:hidden",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarGroupAction.displayName = "SidebarGroupAction";

const SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(
  ({ className, ...props }, ref) => (
    <div ref={ref} data-sidebar="group-content" className={cn("w-full text-sm", className)} {...props} />
  ),
);
SidebarGroupContent.displayName = "SidebarGroupContent";

const SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(({ className, ...props }, ref) => (
  <ul ref={ref} data-sidebar="menu" className={cn("flex w-full min-w-0 flex-col gap-1", className)} {...props} />
));
SidebarMenu.displayName = "SidebarMenu";

const SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ className, ...props }, ref) => (
  <li ref={ref} data-sidebar="menu-item" className={cn("group/menu-item relative", className)} {...props} />
));
SidebarMenuItem.displayName = "SidebarMenuItem";

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    isActive?: boolean;
    tooltip?: string | React.ComponentProps<typeof TooltipContent>;
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(({ asChild = false, isActive = false, variant = "default", size = "default", tooltip, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";
  const { isMobile, state } = useSidebar();

  const button = (
    <Comp
      ref={ref}
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  );

  if (!tooltip) {
    return button;
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    };
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent side="right" align="center" hidden={state !== "collapsed" || isMobile} {...tooltip} />
    </Tooltip>
  );
});
SidebarMenuButton.displayName = "SidebarMenuButton";

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    showOnHover?: boolean;
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform peer-hover/menu-button:text-sidebar-accent-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuAction.displayName = "SidebarMenuAction";

const SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-sidebar="menu-badge"
      className={cn(
        "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
        "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  ),
);
SidebarMenuBadge.displayName = "SidebarMenuBadge";

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean;
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  );
});
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";

const SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(
  ({ className, ...props }, ref) => (
    <ul
      ref={ref}
      data-sidebar="menu-sub"
      className={cn(
        "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  ),
);
SidebarMenuSub.displayName = "SidebarMenuSub";

const SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ ...props }, ref) => (
  <li ref={ref} {...props} />
));
SidebarMenuSubItem.displayName = "SidebarMenuSubItem";

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean;
    size?: "sm" | "md";
    isActive?: boolean;
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring aria-disabled:pointer-events-none aria-disabled:opacity-50 hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuSubButton.displayName = "SidebarMenuSubButton";

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\skeleton.tsx -----

import { cn } from "@/lib/utils";

function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn("animate-pulse rounded-md bg-muted", className)} {...props} />;
}

export { Skeleton };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\slider.tsx -----

import * as React from "react";
import * as SliderPrimitive from "@radix-ui/react-slider";

import { cn } from "@/lib/utils";

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn("relative flex w-full touch-none select-none items-center", className)}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\sonner.tsx -----

import React from 'react';
import { Toaster as Sonner, toast } from "sonner";

type ToasterProps = React.ComponentProps<typeof Sonner>;

const Toaster = ({ ...props }: ToasterProps) => {
  const [theme, setTheme] = React.useState<'light' | 'dark' | 'system'>('system');

  React.useEffect(() => {
    const isDarkMode = document.documentElement.classList.contains('dark');
    setTheme(isDarkMode ? 'dark' : 'light');

    // Optional: Listen for theme changes if you have a theme toggler
    const observer = new MutationObserver(() => {
      const isDarkMode = document.documentElement.classList.contains('dark');
      setTheme(isDarkMode ? 'dark' : 'light');
    });

    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });

    return () => observer.disconnect();
  }, []);

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton: "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton: "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  );
};

export { Toaster, toast };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\switch.tsx -----

import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "@/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\table.tsx -----

import * as React from "react";

import { cn } from "@/lib/utils";

const Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(
  ({ className, ...props }, ref) => (
    <div className="relative w-full overflow-auto">
      <table ref={ref} className={cn("w-full caption-bottom text-sm", className)} {...props} />
    </div>
  ),
);
Table.displayName = "Table";

const TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />,
);
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => (
    <tbody ref={ref} className={cn("[&_tr:last-child]:border-0", className)} {...props} />
  ),
);
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => (
    <tfoot ref={ref} className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)} {...props} />
  ),
);
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(
  ({ className, ...props }, ref) => (
    <tr
      ref={ref}
      className={cn("border-b transition-colors data-[state=selected]:bg-muted hover:bg-muted/50", className)}
      {...props}
    />
  ),
);
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(
  ({ className, ...props }, ref) => (
    <th
      ref={ref}
      className={cn(
        "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
        className,
      )}
      {...props}
    />
  ),
);
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(
  ({ className, ...props }, ref) => (
    <td ref={ref} className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)} {...props} />
  ),
);
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(
  ({ className, ...props }, ref) => (
    <caption ref={ref} className={cn("mt-4 text-sm text-muted-foreground", className)} {...props} />
  ),
);
TableCaption.displayName = "TableCaption";

export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\tabs.tsx -----

import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\textarea.tsx -----

import * as React from "react";

import { cn } from "@/lib/utils";

export type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>;

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  );
});
Textarea.displayName = "Textarea";

export { Textarea };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\toggle-group.tsx -----

import * as React from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import { type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";
import { toggleVariants } from "@/components/ui/toggle";

const ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({
  size: "default",
  variant: "default",
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> & VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root ref={ref} className={cn("flex items-center justify-center gap-1", className)} {...props}>
    <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> & VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className,
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\toggle.tsx -----

import * as React from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline: "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root ref={ref} className={cn(toggleVariants({ variant, size, className }))} {...props} />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ui\tooltip.tsx -----

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\AboutPreview.tsx -----

import { Button } from '@/components/ui/button';
import { Heart, Leaf, Users, Award } from 'lucide-react';

const AboutPreview = () => {
  const stats = [
    {
      icon: Heart,
      number: '15+',
      label: 'Years of Experience',
      description: 'Dedicated to crystal healing and spiritual wellness'
    },
    {
      icon: Leaf,
      number: '100%',
      label: 'Ethically Sourced',
      description: 'All crystals sourced from responsible suppliers'
    },
    {
      icon: Users,
      number: '50K+',
      label: 'Happy Customers',
      description: 'Trusted by crystal lovers worldwide'
    },
    {
      icon: Award,
      number: '500+',
      label: 'Crystal Varieties',
      description: 'Extensive collection of healing stones'
    }
  ];

  return (
    <section className="py-20 bg-white">
      <div className="container mx-auto px-6">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-16 items-center">
          <div>
            <h2 className="text-4xl md:text-5xl font-cormorant-light mb-6 bg-gradient-to-r from-[#8a6b8d] via-[#a085a3] to-[#8a6b8d] bg-clip-text text-transparent">
              Our Story
            </h2>
            <p className="text-lg text-gray-600 mb-6 leading-relaxed font-lato-light">
              Founded in 2009, Adhyatma began as a small family business with a simple mission: 
              to bring the healing power of crystals to people's lives. What started as a passion 
              for spiritual wellness has grown into a trusted source for ethically sourced, 
              high-quality crystals.
            </p>
            <p className="text-lg text-gray-600 mb-8 leading-relaxed font-lato-light">
              We believe that every crystal has a story and the power to transform lives. 
              That's why we carefully select each stone, ensuring it meets our high standards 
              for quality, authenticity, and ethical sourcing.
            </p>
            <Button
              variant="outline" 
              className="border-gray-300 text-gray-700 hover:bg-gray-100 px-8 py-3 rounded-none font-madefor-medium tracking-wide"
              onClick={() => window.location.href = '/our-story'}
            >
              Learn More About Us
            </Button>
          </div>
          
          <div className="grid grid-cols-2 gap-8">
            {stats.map((stat, index) => (
              <div key={index} className="text-center p-6 bg-gray-50 rounded-lg">
                <div className="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                  <stat.icon className="w-8 h-8 text-gray-600" />
                </div>
                <div className="text-3xl font-cormorant-light text-gray-800 mb-2">
                  {stat.number}
                </div>
                <div className="text-sm font-madefor-medium text-gray-800 mb-1">
                  {stat.label}
                </div>
                <div className="text-xs text-gray-600">
                  {stat.description}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

export default AboutPreview;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\AlertMessage.tsx -----

import React from 'react';

interface AlertMessageProps {
  type: 'success' | 'error' | 'warning' | 'info';
  title: string;
  message: string;
  suggestions?: string[];
  onClose?: () => void;
}

const AlertMessage: React.FC<AlertMessageProps> = ({ 
  type, 
  title, 
  message, 
  suggestions = [], 
  onClose 
}) => {
  const getIcon = () => {
    switch (type) {
      case 'success':
        return (
          <svg className="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
          </svg>
        );
      case 'error':
        return (
          <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
          </svg>
        );
      case 'warning':
        return (
          <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
          </svg>
        );
      case 'info':
        return (
          <svg className="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
          </svg>
        );
    }
  };

  const getStyles = () => {
    switch (type) {
      case 'success':
        return 'bg-green-50 border-l-4 border-green-400';
      case 'error':
        return 'bg-red-50 border-l-4 border-red-400';
      case 'warning':
        return 'bg-yellow-50 border-l-4 border-yellow-400';
      case 'info':
        return 'bg-blue-50 border-l-4 border-blue-400';
    }
  };

  const getTextColor = () => {
    switch (type) {
      case 'success':
        return 'text-green-800';
      case 'error':
        return 'text-red-800';
      case 'warning':
        return 'text-yellow-800';
      case 'info':
        return 'text-blue-800';
    }
  };

  const getSuggestionColor = () => {
    switch (type) {
      case 'success':
        return 'text-green-600';
      case 'error':
        return 'text-red-600';
      case 'warning':
        return 'text-yellow-600';
      case 'info':
        return 'text-blue-600';
    }
  };

  return (
    <div className={`mb-6 p-4 rounded-lg ${getStyles()} animate-in slide-in-from-top-2 duration-300`}>
      <div className="flex">
        <div className="flex-shrink-0">
          {getIcon()}
        </div>
        <div className="ml-3 flex-1">
          <h3 className={`text-sm font-medium ${getTextColor()}`}>
            {title}
          </h3>
          <div className="mt-2 text-sm">
            <p className={getTextColor()}>{message}</p>
          </div>
          {suggestions.length > 0 && (
            <div className="mt-3">
              <div className={`text-xs ${getSuggestionColor()}`}>
                <p className="font-medium">Suggestions:</p>
                <ul className="mt-1 list-disc list-inside space-y-1">
                  {suggestions.map((suggestion, index) => (
                    <li key={index}>{suggestion}</li>
                  ))}
                </ul>
              </div>
            </div>
          )}
          {type === 'error' && (
            <div className="mt-2 text-xs text-gray-500">
              <p>This error will remain until you try again or dismiss it.</p>
            </div>
          )}
        </div>
        {onClose && (
          <div className="ml-auto pl-3">
            <div className="-mx-1.5 -my-1.5">
              <button
                type="button"
                onClick={onClose}
                className={`inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2 ${
                  type === 'success' ? 'text-green-500 hover:bg-green-100 focus:ring-green-600' :
                  type === 'error' ? 'text-red-500 hover:bg-red-100 focus:ring-red-600' :
                  type === 'warning' ? 'text-yellow-500 hover:bg-yellow-100 focus:ring-yellow-600' :
                  'text-blue-500 hover:bg-blue-100 focus:ring-blue-600'
                }`}
                title="Dismiss this message"
              >
                <span className="sr-only">Dismiss</span>
                <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                </svg>
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AlertMessage;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\AnimatedCrystalLogo.tsx -----

import logoPng from '@/assets/logo.png';

const AnimatedCrystalLogo = () => {
  return (
    <div className="relative w-80 h-80 md:w-96 md:h-96 flex items-center justify-center mx-auto">
      {/* Multi-layered background glow effects */}
      <div className="absolute inset-0 bg-gradient-to-r from-[#d1bccd]/40 to-[#d1bccd]/40 rounded-full blur-3xl animate-pulse" />
      <div className="absolute inset-0 bg-gradient-to-r from-[#d1bccd]/30 to-[#b094b2]/30 rounded-full blur-2xl animate-float" style={{ animationDelay: '2s' }} />
      <div className="absolute inset-0 bg-gradient-to-r from-[#b094b2]/30 to-[#d1bccd]/30 rounded-full blur-xl animate-float" style={{ animationDelay: '4s' }} />
      <div className="absolute inset-0 bg-gradient-to-r from-amber-200/20 to-orange-200/20 rounded-full blur-lg animate-float" style={{ animationDelay: '6s' }} />
      
      
      {/* Logo Container with enhanced animations */}
      <div className="relative z-10 w-full h-full animate-crystal-pulse">
        <img
          src={logoPng}
          alt="Adhyatma Crystal Logo"
          className="w-full h-full object-contain drop-shadow-2xl animate-logo-glow"
          style={{
            filter: 'drop-shadow(0 0 20px rgba(176, 148, 178, 0.3))',
          }}
        />
      </div>
      
      
      {/* Energy waves around the crystal */}
      <div className="absolute inset-0 pointer-events-none">
        {[...Array(3)].map((_, i) => (
          <div
            key={`wave-${i}`}
            className="absolute inset-0 border border-[#b094b2]/20 rounded-full animate-pulse-glow"
            style={{
              animationDelay: `${i * 2}s`,
              animationDuration: '6s',
              transform: `scale(${0.8 + i * 0.2})`,
            }}
          />
        ))}
      </div>
      
    </div>
  );
};

export default AnimatedCrystalLogo;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\AnimatedCrystalSVG.tsx -----

import logoPng from '@/assets/logo.png';

const AnimatedCrystalLogo = () => {
  return (
    <div className="relative w-64 h-64 md:w-80 md:h-80 flex items-center justify-center mx-auto">
      {/* Background glow effect */}
      <div className="absolute inset-0 bg-gradient-to-r from-[#b094b2]/40 to-[#d1bccd]/40 rounded-full blur-3xl animate-pulse" />
      
      {/* Additional floating glow effects */}
      <div className="absolute inset-0 bg-gradient-to-r from-[#d1bccd]/30 to-[#b094b2]/30 rounded-full blur-2xl animate-float" style={{ animationDelay: '2s' }} />
      <div className="absolute inset-0 bg-gradient-to-r from-[#b094b2]/30 to-[#d1bccd]/30 rounded-full blur-xl animate-float" style={{ animationDelay: '4s' }} />
      
      {/* Logo Container */}
      <div className="relative z-10 w-full h-full animate-crystal-pulse">
        <img
          src={logoPng}
          alt="Adhyatma Crystal Logo"
          className="w-full h-full object-contain drop-shadow-2xl"
          style={{
            filter: 'drop-shadow(0 0 20px rgba(147, 51, 234, 0.3))',
          }}
        />
      </div>
      
      {/* Floating particles around the crystal */}
      <div className="absolute inset-0 pointer-events-none">
        {[...Array(8)].map((_, i) => (
          <div
            key={i}
            className={`absolute w-1.5 h-1.5 rounded-full animate-particle-float ${
              i % 3 === 0 ? 'bg-[#b094b2]/60' : 
              i % 3 === 1 ? 'bg-[#d1bccd]/60' : 
              'bg-indigo-400/60'
            }`}
            style={{
              left: `${20 + (i * 8)}%`,
              top: `${30 + (i * 5)}%`,
              animationDelay: `${i * 0.4}s`,
              animationDuration: '5s',
            }}
          />
        ))}
      </div>
      
      {/* Energy waves around the crystal */}
      <div className="absolute inset-0 pointer-events-none">
        {[...Array(2)].map((_, i) => (
          <div
            key={`wave-${i}`}
            className="absolute inset-0 border border-[#b094b2]/20 rounded-full animate-ping"
            style={{
              animationDelay: `${i * 3}s`,
              animationDuration: '8s',
            }}
          />
        ))}
      </div>
    </div>
  );
};

export default AnimatedCrystalLogo;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\BlogSection.tsx -----

import { Button } from '@/components/ui/button';

const BlogSection = () => {
  return (
    <section className="py-20 bg-white">
      <div className="container mx-auto px-6">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-cormorant-light mb-6 bg-gradient-to-r from-[#8a6b8d] via-[#a085a3] to-[#8a6b8d] bg-clip-text text-transparent">
            Blog
          </h2>
          <p className="text-lg text-gray-600 font-madefor-medium">
            Check back soon
          </p>
          <p className="text-sm text-gray-500 mt-2 font-madefor-medium">
            Once posts are published, you'll see them here.
          </p>
          <Button 
            variant="outline" 
            className="mt-6 border-gray-300 text-gray-700 hover:bg-gray-100 px-6 py-2 rounded-none font-arial tracking-wide"
            // onClick={() => window.location.href = '/blog'}
          >
            Read all
          </Button>
        </div>
      </div>
    </section>
  );
};

export default BlogSection;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\CallToAction.tsx -----

import { Button } from '@/components/ui/button';
import { ArrowRight, Sparkles } from 'lucide-react';

interface CallToActionProps {
  title: string;
  subtitle: string;
  buttonText: string;
  buttonLink?: string;
  variant?: 'primary' | 'secondary';
  showIcon?: boolean;
}

const CallToAction = ({ 
  title, 
  subtitle, 
  buttonText, 
  buttonLink = '#shop',
  variant = 'primary',
  showIcon = true
}: CallToActionProps) => {
  const isPrimary = variant === 'primary';
  
  return (
    <section className={`py-16 sm:py-20 md:py-24 relative overflow-hidden ${isPrimary ? 'bg-gradient-to-br from-gray-800 via-mystic to-gray-800' : 'bg-gradient-ethereal'}`}>
      {/* Background Elements */}
      <div className="absolute inset-0" aria-hidden="true">
        <div className={`absolute top-1/4 left-1/4 w-64 h-64 sm:w-80 sm:h-80 md:w-96 md:h-96 rounded-full blur-3xl opacity-15 ${
          isPrimary ? 'bg-lilac' : 'bg-mystic'
        }`} />
        <div className={`absolute bottom-1/4 right-1/4 w-48 h-48 sm:w-64 sm:h-64 md:w-80 md:h-80 rounded-full blur-3xl opacity-15 ${
          isPrimary ? 'bg-rose' : 'bg-lilac'
        }`} />
      </div>
      
      <div className="container mx-auto px-4 sm:px-6 relative z-10">
        <div className="text-center max-w-4xl mx-auto">
          <h2 className={`text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-cormorant-light mb-4 sm:mb-6 md:mb-8 leading-tight ${
            isPrimary ? 'text-white' : 'bg-gradient-mystic bg-clip-text text-transparent'
          }`}>
            {title}
          </h2>
          <div className={`w-16 sm:w-20 md:w-24 h-1 mx-auto rounded-full mb-6 sm:mb-8 ${
            isPrimary ? 'bg-gradient-lilac' : 'bg-gradient-mystic'
          }`}></div>
          <p className={`text-sm sm:text-base md:text-lg lg:text-xl mb-6 sm:mb-8 md:mb-12 leading-relaxed font-madefor-medium px-2 sm:px-4 ${
            isPrimary ? 'text-gray-300' : 'text-gray-600'
          }`}>
            {subtitle}
          </p>
          
          <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center items-center">
            <Button 
              className={`w-full sm:w-auto px-6 sm:px-8 md:px-12 py-3 sm:py-4 md:py-5 lg:py-6 text-sm sm:text-base md:text-lg lg:text-xl rounded-full font-arial tracking-wide transition-all duration-500 hover:scale-105 transform shadow-lg hover:shadow-xl ${
                isPrimary 
                  ? 'bg-gradient-to-r from-white to-gray-100 text-gray-900 hover:from-gray-100 hover:to-gray-200' 
                  : 'bg-gradient-mystic hover:bg-gradient-lilac text-white'
              }`}
              onClick={() => {
                const targetElement = document.querySelector(buttonLink);
                if (targetElement) {
                  targetElement.scrollIntoView({ behavior: 'smooth' });
                }
              }}
            >
              {buttonText}
              {showIcon && <ArrowRight className="w-6 h-6 ml-3" />}
            </Button>
            
            {isPrimary && (
              <Button 
                variant="outline" 
                className="w-full sm:w-auto px-6 sm:px-8 md:px-12 py-3 sm:py-4 md:py-5 lg:py-6 text-sm sm:text-base md:text-lg lg:text-xl border-2 border-white/30 text-white hover:bg-white/10 hover:border-white/50 rounded-full font-arial tracking-wide backdrop-blur-sm shadow-lg hover:shadow-xl"
                onClick={() => window.location.href = '/our-story'}
              >
                Learn More
              </Button>
            )}
          </div>
          
          {isPrimary && (
            <div className="mt-6 sm:mt-8 md:mt-12 flex flex-col sm:flex-row items-center justify-center space-y-2 sm:space-y-0 sm:space-x-3 text-gray-300 px-4">
              <Sparkles className="w-4 h-4 sm:w-5 sm:h-5 md:w-6 md:h-6 text-lilac" />
              <span className="text-xs sm:text-sm md:text-base lg:text-lg font-madefor-medium text-center sm:text-left">Trusted by 10,000+ crystal lovers worldwide</span>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};

export default CallToAction;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ContactInfo.tsx -----

import { Phone, Mail, MapPin, Clock } from 'lucide-react';

const ContactInfo = () => {
  const contactDetails = [
    {
      icon: Phone,
      title: 'Phone',
      details: '+91 9395913538',
      description: 'Mon-Fri 9AM-6PM'
    },
    {
      icon: Mail,
      title: 'Email',
      details: 'Info@mysite.com',
      description: 'We respond within 24 hours'
    },
    {
      icon: MapPin,
      title: 'Address',
      details: '123 Crystal Street, Melbourne VIC 3000',
      description: 'Visit our showroom'
    },
    {
      icon: Clock,
      title: 'Business Hours',
      details: 'Mon-Fri: 9AM-6PM',
      description: 'Sat: 10AM-4PM, Sun: Closed'
    }
  ];

  return (
    <section className="py-20 bg-gray-50">
      <div className="container mx-auto px-6">
        <div className="text-center mb-16">
          <h2 className="text-3xl sm:text-4xl md:text-5xl font-cormorant-light mb-4 bg-gradient-to-r from-[#8a6b8d] via-[#a085a3] to-[#8a6b8d] bg-clip-text text-transparent">
            Contact Us
          </h2>
          <p className="text-base sm:text-lg text-gray-600 font-madefor-medium px-4">
            We're here to help you on your crystal journey
          </p>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 md:gap-8">
          {contactDetails.map((contact, index) => (
            <div key={index} className="text-center p-4 md:p-6 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300">
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <contact.icon className="w-8 h-8 text-gray-600" />
              </div>
              <h3 className="text-base md:text-lg font-cormorant-light text-gray-800 mb-2">
                {contact.title}
              </h3>
              <p className="text-sm md:text-base text-gray-700 font-madefor-medium mb-1">
                {contact.details}
              </p>
              <p className="text-xs md:text-sm text-gray-600">
                {contact.description}
              </p>
            </div>
          ))}
        </div>

        <div className="mt-12 md:mt-16 text-center">
          <div className="bg-white p-6 md:p-8 rounded-lg shadow-sm max-w-2xl mx-auto border border-gray-200">
            <h3 className="text-xl md:text-2xl font-cormorant-light text-gray-800 mb-4">
              Have a Question?
            </h3>
            <p className="text-sm md:text-base text-gray-600 mb-6 px-4">
              Our crystal experts are here to help you find the perfect stones for your needs. 
              Whether you're new to crystals or a seasoned collector, we're happy to guide you.
            </p>
            <div className="flex flex-col sm:flex-row gap-3 md:gap-4 justify-center">
              {/* <a  */}
                {/* href="tel:+919395913538"  */}
                {/* className="inline-flex items-center justify-center px-6 py-3 bg-gray-800 text-white hover:bg-gray-700 transition-colors duration-300 rounded-none font-arial" */}
              {/* > */}
                {/* <Phone className="w-4 h-4 mr-2" //> */}
                {/* Call Now */}
              {/* </a> */}
              <a 
                href="mailto:Info@mysite.com" 
                className="inline-flex items-center justify-center px-4 md:px-6 py-2 md:py-3 border border-gray-300 text-gray-700 hover:bg-gray-100 transition-colors duration-300 rounded-none font-arial text-sm md:text-base"
              >
                <Mail className="w-4 h-4 mr-2" />
                Send Email
              </a>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ContactInfo;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\CoreValues.tsx -----

import { Heart, Sparkles, Zap, Leaf, Network } from 'lucide-react';

const CoreValues = () => {
  const values = [
    {
      icon: Heart,
      title: 'Intentional Living',
      description: 'Living with purpose and mindfulness',
    },
    {
      icon: Sparkles,
      title: 'Spiritual Integrity',
      description: 'Authentic connection to higher consciousness',
    },
    {
      icon: Zap,
      title: 'Empowerment',
      description: 'Awakening your inner strength',
    },
    {
      icon: Leaf,
      title: 'Sustainability',
      description: 'Honoring Earth and ethical sourcing',
    },
    {
      icon: Network,
      title: 'Connection',
      description: 'Building a conscious community',
    },
  ];

  return (
    <section className="py-24 bg-gradient-to-br from-white via-[#d1bccd] to-[#d1bccd]">
      <div className="container mx-auto px-6">
        <div className="text-center mb-20">
          <h2 className="text-5xl md:text-6xl font-cormorant-light mb-8 bg-gradient-to-r from-[#8a6b8d] via-[#a085a3] to-[#8a6b8d] bg-clip-text text-transparent">
            Core Values
          </h2>
          <div className="w-24 h-1 bg-gradient-to-r from-[#b094b2] to-[#d1bccd] mx-auto rounded-full mb-8"></div>
          <p className="text-xl text-gray-600 max-w-5xl mx-auto leading-relaxed font-madefor-medium">
            Adhyatma is a crystal store born from a deep reverence for energy, intention, 
            and the quiet power of nature. We offer thoughtfully chosen stones that inspire 
            clarity, balance, and inner transformation. Guided by a mindful approach, Adhyatma 
            blends ancient wisdom with modern rituals â€” creating a space where every crystal 
            becomes a tool for connection, healing, and soulful living.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8">
          {values.map((value, index) => (
            <div
              key={value.title}
              className="text-center group bg-white/60 backdrop-blur-sm rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-500 border border-white/20 hover:border-lilac"
            >
              <div className="relative mb-8 mx-auto w-20 h-20">
                <div className="absolute inset-0 bg-gradient-mystic rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                <div className="relative w-full h-full bg-gradient-mystic/20 rounded-full flex items-center justify-center group-hover:scale-110 transition-all duration-500 shadow-lg">
                  <value.icon className="w-10 h-10 text-mystic group-hover:text-mystic/80 transition-colors duration-300" />
                </div>
              </div>
              
              <h3 className="text-xl font-cormorant-light mb-4 text-gray-800 group-hover:text-mystic transition-colors duration-300">
                {value.title}
              </h3>
              <p className="text-gray-600 leading-relaxed">
                {value.description}
              </p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default CoreValues;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\CrystalLogo.tsx -----

import { cn } from '@/lib/utils';

interface CrystalLogoProps {
  className?: string;
}

const CrystalLogo = ({ className }: CrystalLogoProps) => {
  return (
    <svg
      viewBox="0 0 100 100"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("", className)}
    >
      {/* Crystal Shape */}
      <path
        d="M50 10 L70 35 L65 75 L50 90 L35 75 L30 35 Z"
        fill="url(#crystal-gradient)"
        stroke="url(#crystal-stroke)"
        strokeWidth="2"
      />
      <path
        d="M50 10 L50 90 M30 35 L70 35 M35 75 L65 75"
        stroke="url(#crystal-lines)"
        strokeWidth="1"
        opacity="0.6"
      />
      
      {/* Lotus Petals */}
      <g transform="translate(50, 65)">
        <path
          d="M0,-10 Q-8,-8 -10,0 Q-8,8 0,10 Q8,8 10,0 Q8,-8 0,-10"
          fill="url(#lotus-gradient)"
          opacity="0.9"
        />
        <path
          d="M-12,-5 Q-15,0 -12,5 Q-8,3 -5,0 Q-8,-3 -12,-5"
          fill="url(#lotus-gradient)"
          opacity="0.8"
        />
        <path
          d="M12,-5 Q15,0 12,5 Q8,3 5,0 Q8,-3 12,-5"
          fill="url(#lotus-gradient)"
          opacity="0.8"
        />
      </g>
      
      {/* Golden Circle */}
      <circle
        cx="50"
        cy="50"
        r="38"
        fill="none"
        stroke="url(#golden-circle)"
        strokeWidth="1"
        strokeDasharray="4 6"
        opacity="0.6"
      />
      
      {/* Gradient Definitions */}
      <defs>
        <linearGradient id="crystal-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor="#9333ea" stopOpacity="0.9" />
          <stop offset="100%" stopColor="#c084fc" stopOpacity="0.8" />
        </linearGradient>
        <linearGradient id="crystal-stroke" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor="#fbbf24" />
          <stop offset="100%" stopColor="#fde68a" />
        </linearGradient>
        <linearGradient id="crystal-lines" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor="#fbbf24" stopOpacity="0.8" />
          <stop offset="100%" stopColor="#fde68a" stopOpacity="0.6" />
        </linearGradient>
        <linearGradient id="lotus-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor="#7c3aed" />
          <stop offset="100%" stopColor="#a78bfa" />
        </linearGradient>
        <radialGradient id="golden-circle">
          <stop offset="0%" stopColor="#fbbf24" />
          <stop offset="100%" stopColor="#fde68a" />
        </radialGradient>
      </defs>
    </svg>
  );
};

export default CrystalLogo;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ErrorBoundary.tsx -----

import React, { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
}

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error, errorInfo: null };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
    this.setState({
      error,
      errorInfo
    });
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-red-50 flex items-center justify-center p-4">
          <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-6">
            <div className="flex items-center mb-4">
              <div className="flex-shrink-0">
                <svg className="h-8 w-8 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <div className="ml-3">
                <h3 className="text-lg font-medium text-red-800">
                  Application Error
                </h3>
              </div>
            </div>
            
            <div className="mt-2">
              <p className="text-sm text-red-700 mb-4">
                Something went wrong while loading the application. This is usually due to a configuration issue.
              </p>
              
              <div className="bg-red-100 border border-red-200 rounded-md p-3 mb-4">
                <h4 className="text-sm font-medium text-red-800 mb-2">Error Details:</h4>
                <p className="text-xs text-red-700 font-mono break-all">
                  {this.state.error?.message || 'Unknown error'}
                </p>
              </div>

              <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4">
                <h4 className="text-sm font-medium text-yellow-800 mb-2">Common Solutions:</h4>
                <ul className="text-xs text-yellow-700 space-y-1">
                  <li>â€¢ Check if your .env file exists and has correct Supabase credentials</li>
                  <li>â€¢ Make sure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set</li>
                  <li>â€¢ Restart the development server after adding .env file</li>
                  <li>â€¢ Check the browser console for more details</li>
                </ul>
              </div>

              <div className="flex space-x-3">
                <button
                  onClick={() => window.location.reload()}
                  className="bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-red-700"
                >
                  Reload Page
                </button>
                <button
                  onClick={() => this.setState({ hasError: false, error: null, errorInfo: null })}
                  className="bg-gray-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-700"
                >
                  Try Again
                </button>
              </div>
            </div>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\FeaturedProducts.tsx -----

import { Button } from '@/components/ui/button';
import { Star, ShoppingCart } from 'lucide-react';
import { useCart } from '@/hooks/useCart';
import { useWishlist } from '@/hooks/useWishlist';
import { useFeaturedProducts } from '@/hooks/useProducts';
import { type Product } from '@/data/products';
import WishlistIcon from '@/components/WishlistIcon';

const FeaturedProducts = () => {
  const { addItem } = useCart();
  const { products: featuredProducts, loading, error } = useFeaturedProducts();

  if (loading) {
    return (
      <section className="py-20 bg-gray-50">
        <div className="container mx-auto px-6">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-cormorant-light mb-4 bg-gradient-mystic bg-clip-text text-transparent">
              Featured Products
            </h2>
            <p className="text-lg text-gray-600 font-madefor-medium">
              Loading our most loved crystals and healing stones...
            </p>
          </div>
          <div className="flex justify-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-mystic"></div>
          </div>
        </div>
      </section>
    );
  }

  if (error) {
    return (
      <section className="py-20 bg-gray-50">
        <div className="container mx-auto px-6">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-cormorant-light mb-4 bg-gradient-mystic bg-clip-text text-transparent">
              Featured Products
            </h2>
            <p className="text-lg text-gray-600 font-madefor-medium">
              Unable to load featured products. Please try again later.
            </p>
          </div>
        </div>
      </section>
    );
  }

  return (
    <section className="py-20 bg-gray-50">
      <div className="container mx-auto px-6">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-cormorant-light mb-4 bg-gradient-mystic bg-clip-text text-transparent">
            Featured Products
          </h2>
          <p className="text-lg text-gray-600 font-madefor-medium">
            Discover our most loved crystals and healing stones
          </p>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 md:gap-8">
          {featuredProducts.map((product) => (
            <div key={product.id} className="bg-white rounded-xl sm:rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 group border border-gray-100 overflow-hidden mobile-card">
              <div className="relative overflow-hidden">
                <img
                  src={product.image}
                  alt={`${product.name} - ${product.description}`}
                  className="w-full h-48 sm:h-56 md:h-64 object-cover transition-all duration-500 group-hover:scale-110"
                  loading="lazy"
                  width="300"
                  height="256"
                  decoding="async"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                <div className="absolute top-4 left-4">
                  <span className="px-3 py-1 text-xs font-bold rounded-full backdrop-blur-sm bg-[#b094b2]/90 text-white">
                    Featured
                  </span>
                </div>
                <div className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-all duration-500 transform translate-y-2 group-hover:translate-y-0">
                  <Button 
                    size="icon" 
                    className="w-12 h-12 bg-white/95 hover:bg-white text-[#b094b2] rounded-full shadow-lg backdrop-blur-sm"
                    aria-label={`Add ${product.name} to cart`}
                    onClick={() => addItem({
                      id: product.id,
                      name: product.name,
                      price: product.price,
                      image: product.image
                    })}
                  >
                    <ShoppingCart className="w-5 h-5" />
                  </Button>
                </div>
                <div className="absolute bottom-4 right-4 opacity-0 group-hover:opacity-100 transition-all duration-500 transform translate-y-2 group-hover:translate-y-0">
                  <WishlistIcon product={product} />
                </div>
              </div>
              
              <div className="p-4 md:p-6">
                <h3 className="text-base md:text-lg font-cormorant-light mb-2 text-gray-800">
                  {product.name}
                </h3>
                <p className="text-xs md:text-sm text-gray-600 mb-3">
                  {product.description}
                </p>
                
                <div className="flex items-center mb-3">
                  <div className="flex items-center">
                    {[...Array(5)].map((_, i) => (
                      <Star
                        key={i}
                        className={`w-4 h-4 ${
                          i < Math.floor(product.rating) ? 'text-yellow-400 fill-current' : 'text-gray-300'
                        }`}
                      />
                    ))}
                  </div>
                  <span className="text-sm text-gray-600 ml-2">
                    {product.rating} ({product.reviewCount} reviews)
                  </span>
                </div>
                
                <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
                  <div className="flex items-center space-x-2">
                    <span className="text-lg md:text-xl font-madefor-medium text-gray-800">
                      â‚¹{product.price}
                    </span>
                    {product.originalPrice && (
                      <span className="text-sm text-gray-500 line-through">
                        â‚¹{product.originalPrice}
                      </span>
                    )}
                  </div>
                  <Button
                    size="sm"
                    className="mobile-button-primary bg-gray-800 hover:bg-gray-700 text-white rounded-full font-arial mobile-touch"
                    onClick={() => addItem({
                      id: product.id,
                      name: product.name,
                      price: product.price,
                      image: product.image
                    })}
                  >
                    Add to Cart
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        <div className="text-center mt-12">
          <Button
            variant="outline" 
            className="border-gray-300 text-gray-700 hover:bg-gray-100 px-8 py-3 rounded-none font-arial tracking-wide"
            onClick={() => window.location.href = '/shop'}
          >
            View All Products
          </Button>
        </div>
      </div>
    </section>
  );
};

export default FeaturedProducts;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\Footer.tsx -----

import { Facebook, Instagram, Twitter, Heart } from 'lucide-react';
import logoImage from '@/assets/logo.png';

const Footer = () => {
  const footerLinks = {
    Shop: ['Natural Crystals', 'Healing Crystals', 'Crystal Kits', 'Bracelets'],
    About: ['Our Story', 'Mission', 'Core Values', 'Blog'],
    Support: ['Contact Us', 'Shipping Info', 'Returns', 'FAQ'],
  };

  const socialLinks = [
    { icon: Facebook, href: '#' },
    { icon: Instagram, href: '#' },
    { icon: Twitter, href: '#' },
  ];

  return (
    <footer className="bg-gray-50 pt-16 pb-8">
      <div className="container mx-auto px-6">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-8 mb-12">
          {/* Brand */}
          <div className="sm:col-span-2 lg:col-span-2">
            <div className="flex items-center gap-2 mb-4">
              <img 
                src={logoImage} 
                alt="Adhyatma Logo" 
                className="w-8 h-8 object-contain" 
              />
              <span className="text-xl font-cormorant-light text-[#4a3c4d]">
                Adhyatma
              </span>
            </div>
            <p className="text-gray-600 mb-6 text-sm leading-relaxed font-madefor-medium max-w-md">
              Sacred stones for modern souls. Ethically sourced crystals for healing, 
              mindfulness, and spiritual growth.
            </p>
            <div className="flex gap-4">
              {socialLinks.map((social, index) => (
                <a
                  key={index}
                  href={social.href}
                  className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center hover:bg-gray-300 transition-colors duration-300"
                >
                  <social.icon className="w-4 h-4 text-gray-600" />
                </a>
              ))}
            </div>
          </div>

          {/* Links */}
          {Object.entries(footerLinks).map(([category, links]) => (
            <div key={category}>
              <h3 className="font-semibold mb-4 text-gray-800 text-sm">{category}</h3>
              <ul className="space-y-2">
                {links.map((link) => (
                  <li key={link}>
                    <a
                      href="#"
                      className="text-gray-600 hover:text-gray-800 transition-colors duration-300 text-sm"
                    >
                      {link}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>

        <div className="border-t border-gray-200 pt-8">
          <div className="flex flex-col md:flex-row justify-between items-center gap-4 text-sm text-gray-600">
            <p className="text-center md:text-left">Â© 2035 by Vesii. Build on Wix Studio</p>
            <div className="flex flex-wrap items-center justify-center md:justify-end gap-3 md:gap-4">
              <a href="#" className="hover:text-gray-800 transition-colors duration-200">Terms & Conditions</a>
              <a href="#" className="hover:text-gray-800 transition-colors duration-200">Privacy Policy</a>
              <a href="#" className="hover:text-gray-800 transition-colors duration-200">Shipping Policy</a>
              <a href="#" className="hover:text-gray-800 transition-colors duration-200">Refund Policy</a>
              <a href="#" className="hover:text-gray-800 transition-colors duration-200">FAQ</a>
              <a href="#" className="hover:text-gray-800 transition-colors duration-200">Accessibility Statement</a>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\Header.tsx -----

import { useState, useEffect } from 'react';
// 1. Import useLocation from react-router-dom
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { ShoppingCart, User, Menu, X, LogOut, Heart } from 'lucide-react';
import logoImage from '@/assets/logo.png';
import { useCart } from '@/hooks/useCart';
import { useAuth } from '@/hooks/useAuth';
import { useWishlist } from '@/hooks/useWishlist';

const Header = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const { state, toggleCart } = useCart();
  const { user, signOut } = useAuth();
  const { wishlistCount } = useWishlist();
  const navigate = useNavigate();
  // 2. Get the current location using the hook
  const location = useLocation();

  const handleSignOut = async () => {
    console.log('Header: handleSignOut called');
    try {
      console.log('Header: Starting signout process...');
      await signOut();
      console.log('âœ… Header: Signout successful. AuthContext will handle state change.');
    } catch (error) {
      console.error('âŒ Header: Error signing out:', error);
    }
  };

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const navLinks = [
    { label: 'Home', href: '/', isExternal: false },
    { label: 'Our Story', href: '/our-story', isExternal: false },
    { label: 'Shop', href: '/shop', isExternal: false },
    { label: 'Collections', href: '/collections', isExternal: false },
  ];

  return (
    <header
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-500 ${
        isScrolled
          ? 'bg-white/95 backdrop-blur-xl shadow-soft border-b border-[#d1bccd]'
          : 'bg-transparent'
      }`}
    >
      <div className="container mx-auto px-6">
        <nav className="flex items-center justify-center py-4 md:py-6 relative">
          <Link to="/" className="absolute left-0 flex items-center gap-2 md:gap-4 group cursor-pointer">
            <div className="relative">
              <img 
                src={logoImage} 
                alt="Adhyatma Logo" 
                className="w-8 h-8 md:w-10 md:h-10 group-hover:scale-110 transition-transform duration-300 object-contain" 
              />
              <div className="absolute inset-0 bg-gradient-lilac rounded-full blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
            </div>
            <span className="text-lg md:text-2xl font-cormorant-light text-mystic font-bold">
              Adhyatma
            </span>
          </Link>

          <div className="hidden md:flex items-center gap-8">
            {navLinks.map((link) => (
              <Link
                key={link.label}
                to={link.href}
                className="relative text-mystic hover:text-muted-foreground transition-all duration-300 font-madefor-medium text-lg tracking-wide group font-bold"
              >
                {link.label}
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 bg-gradient-rose group-hover:w-full transition-all duration-300" />
              </Link>
            ))}
          </div>

          <div className="absolute right-0 hidden md:flex items-center gap-4">
            {user ? (
              <div className="flex items-center gap-4">
                <Link to="/profile">
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="text-mystic hover:text-muted-foreground hover:bg-lilac/20 transition-all duration-300 font-madefor-medium font-bold"
                  >
                    <User className="w-4 h-4 mr-2" />
                    {user.first_name}
                  </Button>
                </Link>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={(e) => {
                    console.log('ðŸšª Button clicked!', e);
                    handleSignOut();
                  }}
                  className="text-mystic hover:text-red-600 hover:bg-red-50 transition-all duration-300 font-madefor-medium font-bold"
                >
                  <LogOut className="w-4 h-4 mr-2" />
                  Sign Out
                </Button>
              </div>
            ) : (
              // 3. Add the 'state' prop to the Login link to pass the current location
              <Link to="/signin" state={{ from: location }}>
                <Button 
                  variant="ghost" 
                  size="sm" 
                    className="text-mystic hover:text-muted-foreground hover:bg-lilac/20 transition-all duration-300 font-medium font-bold"
                >
                  <User className="w-4 h-4 mr-2" />
                  Login
                </Button>
              </Link>
            )}
            <Link to="/wishlist">
              <Button 
                variant="ghost" 
                size="icon" 
                className="text-mystic hover:text-muted-foreground hover:bg-lilac/20 relative transition-all duration-300 group"
              >
                <Heart className="w-5 h-5 group-hover:scale-110 transition-transform duration-300" />
                {wishlistCount > 0 && (
                  <span className="absolute -top-1 -right-1 w-5 h-5 bg-gradient-rose text-xs text-white rounded-full flex items-center justify-center animate-pulse">
                    {wishlistCount}
                  </span>
                )}
              </Button>
            </Link>
            <Button 
              variant="ghost" 
              size="icon" 
              className="text-mystic hover:text-muted-foreground hover:bg-lilac/20 relative transition-all duration-300 group"
              onClick={toggleCart}
            >
              <ShoppingCart className="w-5 h-5 group-hover:scale-110 transition-transform duration-300" />
              {state.totalItems > 0 && (
                <span className="absolute -top-1 -right-1 w-5 h-5 bg-gradient-rose text-xs text-white rounded-full flex items-center justify-center animate-pulse">
                  {state.totalItems}
                </span>
              )}
            </Button>
          </div>

          <Button
            variant="ghost"
            size="icon"
            className="absolute right-0 md:hidden text-mystic"
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
          >
            {isMobileMenuOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
          </Button>
        </nav>

        {isMobileMenuOpen && (
           <div className="md:hidden py-4 border-t border-[#d1bccd] bg-white/95 backdrop-blur-xl">
            <div className="space-y-2 mb-6">
              {navLinks.map((link) => (
                  <Link
                    key={link.label}
                    to={link.href}
                    className="block py-3 px-4 text-mystic hover:text-muted-foreground hover:bg-lilac/10 transition-colors duration-200 font-madefor-medium font-bold rounded-lg"
                    onClick={() => setIsMobileMenuOpen(false)}
                  >
                    {link.label}
                  </Link>
              ))}
            </div>
            <div className="flex flex-col sm:flex-row gap-3 mt-4 px-4">
              {user ? (
                <div className="flex flex-col sm:flex-row gap-3 w-full">
                  <Link to="/profile" className="flex-1">
                     <Button variant="ghost" size="sm" className="text-mystic w-full font-bold justify-start">
                      <User className="w-4 h-4 mr-2" />
                      {user.first_name}
                    </Button>
                  </Link>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    onClick={(e) => {
                      console.log('ðŸšª Mobile Button clicked!', e);
                      handleSignOut();
                    }}
                     className="text-mystic hover:text-red-600 hover:bg-red-50 flex-1 font-bold justify-start"
                  >
                    <LogOut className="w-4 h-4 mr-2" />
                    Sign Out
                  </Button>
                </div>
              ) : (
                // Also add the 'state' prop to the mobile Login link
                <Link to="/signin" state={{ from: location }} className="flex-1">
                     <Button variant="ghost" size="sm" className="text-mystic w-full font-bold justify-start">
                      <User className="w-4 h-4 mr-2" />
                      Login
                    </Button>
                </Link>
              )}
              <div className="flex gap-2">
                <Link to="/wishlist">
                  <Button 
                    variant="ghost" 
                    size="icon" 
                    className="text-mystic hover:text-muted-foreground hover:bg-lilac/10 relative"
                  >
                    <Heart className="w-5 h-5" />
                    {wishlistCount > 0 && (
                      <span className="absolute -top-1 -right-1 w-4 h-4 bg-gradient-rose text-xs text-white rounded-full flex items-center justify-center">
                        {wishlistCount}
                      </span>
                    )}
                  </Button>
                </Link>
                <Button 
                  variant="ghost" 
                  size="icon" 
                  className="text-mystic hover:text-muted-foreground hover:bg-lilac/10 relative"
                  onClick={toggleCart}
                >
                  <ShoppingCart className="w-5 h-5" />
                  {state.totalItems > 0 && (
                    <span className="absolute -top-1 -right-1 w-4 h-4 bg-gradient-rose text-xs text-white rounded-full flex items-center justify-center">
                      {state.totalItems}
                    </span>
                  )}
                </Button>
              </div>
            </div>
          </div>
        )}
      </div>
    </header>
  );
};

export default Header;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\HeroSection.tsx -----

import { Button } from '@/components/ui/button';
import AnimatedCrystalLogo from './AnimatedCrystalLogo';
import { useLenis } from '@/hooks/useLenis';

const HeroSection = () => {
  const { scrollTo } = useLenis();

  const handleScrollToShop = () => {
    const shopSection = document.getElementById('shop');
    if (shopSection) {
      scrollTo(shopSection, {
        duration: 2,
        easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
        offset: -80, // Account for fixed header
      });
    }
  };

  return (
    <section 
      className="relative min-h-screen flex items-center justify-center overflow-hidden"
      role="banner"
      aria-label="Hero section with main call to action"
    >
      {/* Enhanced Background with Pastel Layers */}
      <div className="absolute inset-0 z-0">
        <div className="absolute inset-0 bg-gradient-ethereal" />
        <div className="absolute inset-0 bg-gradient-to-t from-white/60 via-transparent to-white/30" />
        <div className="absolute inset-0 bg-gradient-glow" />
      </div>

      {/* Enhanced Floating Elements - Pastel Theme */}
      <div className="absolute inset-0 z-10" aria-hidden="true">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-lilac rounded-full blur-3xl animate-float opacity-40" />
        <div className="absolute bottom-1/4 right-1/4 w-80 h-80 bg-gradient-rose rounded-full blur-3xl animate-float opacity-40" style={{ animationDelay: '2s' }} />
        <div className="absolute top-1/2 right-1/3 w-64 h-64 bg-gradient-mint rounded-full blur-2xl animate-float opacity-40" style={{ animationDelay: '4s' }} />
        <div className="absolute top-1/3 left-1/2 w-32 h-32 bg-gradient-peach rounded-full blur-xl animate-float opacity-30" style={{ animationDelay: '6s' }} />
      </div>

      {/* Content */}
      <div className="relative z-20 container mx-auto px-4 sm:px-6 text-center max-w-5xl">
        {/* Animated Crystal Logo at the top */}
        <div className="mb-8 sm:mb-12 md:mb-16">
          <div className="relative inline-block">
            <AnimatedCrystalLogo />
          </div>
        </div>
        
        {/* Text content centered below the SVG */}
        <div className="space-y-6 sm:space-y-8">
          <div className="space-y-4 sm:space-y-6">
            <h1 className="text-4xl sm:text-5xl md:text-6xl lg:text-7xl xl:text-8xl font-cormorant-light text-foreground leading-tight">
              ADHYATMA
            </h1>
            
            <p className="text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl text-muted-foreground font-madefor-medium tracking-wide px-2 sm:px-4">
              Sacred Stones for Modern Soul
            </p>
            
            <h2 className="text-sm sm:text-base md:text-lg lg:text-xl xl:text-2xl text-muted-foreground font-madefor-medium tracking-wider">
              Crystal Store
            </h2>
          </div>
          
          <div className="mt-8 sm:mt-12 md:mt-16 space-y-4 sm:space-y-6">
            <Button 
              className="w-full sm:w-auto px-6 sm:px-8 md:px-12 py-3 sm:py-4 md:py-5 lg:py-6 text-sm sm:text-base md:text-lg lg:text-xl bg-gradient-mystic hover:bg-gradient-rose text-white rounded-full font-arial tracking-wide transition-all duration-500 hover:shadow-glow hover:scale-105 transform shadow-lg"
              onClick={handleScrollToShop}
              aria-label="Shop our collection of healing crystals"
            >
              SHOP NOW
            </Button>
            
            <div className="flex flex-col sm:flex-row items-center justify-center space-y-3 sm:space-y-0 sm:space-x-4 md:space-x-6 lg:space-x-8 text-xs sm:text-sm text-mystic px-2 sm:px-4">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-mint rounded-full animate-pulse" />
                <span>Ethically Sourced</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-lilac rounded-full animate-pulse" />
                <span>Free Delivery</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-rose rounded-full animate-pulse" />
                <span>Expert Guidance</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Scroll Indicator */}
      {/* <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-20"> */}
        {/* <button  */}
          {/* onClick={handleScrollToShop} */}
          {/* className="flex flex-col items-center space-y-2 text-gray-400 animate-bounce hover:text-gray-600 transition-colors duration-300 cursor-pointer group" */}
        {/* > */}
          {/* <span className="text-sm font-madefor-medium group-hover:text-gray-600">Explore</span> */}
          {/* <div className="w-6 h-10 border-2 border-gray-300 rounded-full flex justify-center pt-2 group-hover:border-gray-400 transition-colors duration-300"> */}
            {/* <div className="w-1 h-3 bg-gray-400 rounded-full group-hover:bg-gray-600 transition-colors duration-300" /> */}
          {/* </div> */}
        {/* </button> */}
      {/* </div> */}
    </section>
  );
};

export default HeroSection;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ImagePreview.tsx -----

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ImageIcon } from 'lucide-react';

interface ImagePreviewProps {
  src: string;
  alt: string;
  className?: string;
  size?: 'sm' | 'md' | 'lg';
}

const ImagePreview: React.FC<ImagePreviewProps> = ({ 
  src, 
  alt, 
  className = '', 
  size = 'md' 
}) => {
  const sizeClasses = {
    sm: 'h-16 w-16',
    md: 'h-24 w-24',
    lg: 'h-32 w-32'
  };

  const isDataUrl = src.startsWith('data:');
  const isExternalUrl = src.startsWith('http');

  return (
    <Card className={`overflow-hidden ${className}`}>
      <CardContent className="p-0">
        <div className={`${sizeClasses[size]} relative bg-gray-100 flex items-center justify-center`}>
          {src ? (
            <img
              src={src}
              alt={alt}
              className="w-full h-full object-cover"
              onError={(e) => {
                // Fallback to placeholder if image fails to load
                e.currentTarget.style.display = 'none';
                e.currentTarget.nextElementSibling?.classList.remove('hidden');
              }}
            />
          ) : null}
          
          <div className={`${src ? 'hidden' : ''} flex flex-col items-center justify-center text-gray-400`}>
            <ImageIcon className="h-8 w-8 mb-2" />
            <span className="text-xs">No Image</span>
          </div>
          
          {src && (
            <div className="absolute top-1 right-1">
              <Badge variant="secondary" className="text-xs">
                {isDataUrl ? 'Base64' : isExternalUrl ? 'External' : 'Local'}
              </Badge>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default ImagePreview;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ImageUpload.tsx -----

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Upload, X, Image as ImageIcon, Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';
import { uploadFile } from '@/lib/uploadthing-client';

interface ImageUploadProps {
  onImageSelect: (url: string) => void;
  currentImage?: string;
  className?: string;
}

const ImageUpload: React.FC<ImageUploadProps> = ({ 
  onImageSelect, 
  currentImage, 
  className 
}) => {
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [dragActive, setDragActive] = useState(false);

  const handleFile = async (file: File) => {
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith('image/')) {
      setError('Please select an image file');
      return;
    }

    // Validate file size (4MB max)
    if (file.size > 4 * 1024 * 1024) {
      setError('File size must be less than 4MB');
      return;
    }

    setIsUploading(true);
    setError(null);

    try {
      const imageUrl = await uploadFile(file);
      onImageSelect(imageUrl);
    } catch (err) {
      console.error('Upload error:', err);
      setError(err instanceof Error ? err.message : 'Upload failed');
    } finally {
      setIsUploading(false);
    }
  };

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFile(e.dataTransfer.files[0]);
    }
  };

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      handleFile(e.target.files[0]);
    }
  };

  const removeImage = () => {
    onImageSelect('');
  };

  return (
    <div className={cn("space-y-4", className)}>
      {error && (
        <Alert variant="destructive">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {currentImage ? (
        <Card>
          <CardContent className="p-4">
            <div className="relative group">
              <img
                src={currentImage}
                alt="Product preview"
                className="w-full h-48 object-cover rounded-lg"
              />
              <Button
                type="button"
                variant="destructive"
                size="sm"
                className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
                onClick={removeImage}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
            <p className="text-sm text-gray-600 mt-2 text-center">
              Click to change image
            </p>
          </CardContent>
        </Card>
      ) : (
        <Card
          className={cn(
            "border-2 border-dashed transition-colors",
            dragActive
              ? "border-[#b094b2] bg-[#b094b2]/5"
              : "border-gray-300 hover:border-gray-400"
          )}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
        >
          <CardContent className="p-8 text-center">
            <div className="flex flex-col items-center space-y-4">
              {isUploading ? (
                <Loader2 className="h-12 w-12 text-[#b094b2] animate-spin" />
              ) : (
                <div className="p-4 rounded-full bg-gray-100">
                  <ImageIcon className="h-8 w-8 text-gray-400" />
                </div>
              )}
              
              <div className="space-y-2">
                <h3 className="text-lg font-medium text-gray-900">
                  {isUploading ? 'Uploading...' : 'Upload Product Image'}
                </h3>
                <p className="text-sm text-gray-600">
                  Drag and drop an image here, or click to select
                </p>
                <p className="text-xs text-gray-500">
                  PNG, JPG, WEBP up to 4MB
                </p>
              </div>

              <Button
                type="button"
                variant="outline"
                disabled={isUploading}
                onClick={() => document.getElementById('file-upload')?.click()}
                className="mt-4"
              >
                <Upload className="h-4 w-4 mr-2" />
                {isUploading ? 'Uploading...' : 'Choose File'}
              </Button>

              <input
                id="file-upload"
                type="file"
                accept="image/*"
                onChange={handleFileInput}
                className="hidden"
                disabled={isUploading}
              />
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default ImageUpload;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\LenisProvider.tsx -----

import { useLenis } from '@/hooks/useLenis';

interface LenisProviderProps {
  children: React.ReactNode;
}

const LenisProvider = ({ children }: LenisProviderProps) => {
  // Initialize Lenis using the custom hook
  useLenis();

  return <>{children}</>;
};

export default LenisProvider;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\LoadingScreen.tsx -----

import React from 'react';

const LoadingScreen = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd] flex items-center justify-center">
      <div className="text-center">
        <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-[#b094b2] mx-auto mb-4"></div>
        <h2 className="text-xl font-semibold text-gray-800 mb-2">Loading Adhyatma</h2>
        <p className="text-gray-600">Please wait while we initialize the application...</p>
      </div>
    </div>
  );
};

export default LoadingScreen;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\MainLayout.tsx -----

// src/components/MainLayout.tsx
import React from 'react';
import { Outlet } from 'react-router-dom';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { Cart, CartOverlay } from '@/components/ui/cart';

const MainLayout = () => {
  return (
    <>
      <Header />
      <CartOverlay />
      <Cart />
      <main>
        <Outlet /> {/* This is where your page components will be rendered */}
      </main>
      <Footer />
    </>
  );
};

export default MainLayout;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\MissionSection.tsx -----

import { Button } from '@/components/ui/button';
import { useScrollAnimation } from '@/hooks/useScrollAnimation';

const MissionSection = () => {
  const missionRef = useScrollAnimation({ threshold: 0.2 });

  return (
    <section id="mission" className="py-24 bg-gradient-ethereal" aria-labelledby="mission-heading">
      <div className="container mx-auto px-6">
        <div className="max-w-5xl mx-auto text-center">
          <div className="mb-16 scroll-animate" ref={missionRef}>
            <h2 id="mission-heading" className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-cormorant-light mb-4 md:mb-6 bg-gradient-mystic bg-clip-text text-transparent">
              Our Mission
            </h2>
            <div className="w-24 h-1 bg-gradient-mystic mx-auto rounded-full"></div>
          </div>
          
          <div className="relative scroll-animate" ref={missionRef}>
            <div className="bg-white/80 backdrop-blur-sm rounded-3xl p-6 sm:p-8 md:p-12 lg:p-20 shadow-2xl border border-white/20">
              <div className="relative">
                <div className="absolute -top-4 -left-4 w-8 h-8 bg-gradient-mystic rounded-full opacity-20"></div>
                <div className="absolute -bottom-4 -right-4 w-12 h-12 bg-gradient-lilac rounded-full opacity-20"></div>
                
                <p className="text-base sm:text-lg md:text-xl lg:text-2xl leading-relaxed text-gray-700 mb-6 md:mb-10 font-madefor-medium px-2">
                  At <span className="font-semibold text-mystic">Adhyatma</span>, we are devoted to offering ethically sourced, energetically charged crystals 
                  that serve as tools for healing, mindfulness, and spiritual growth. Through education, 
                  intention, and authentic connection, we empower individuals to align with their highest 
                  selves and walk the path of inner peace and purpose.
                </p>
                
                <Button 
                  className="bg-gradient-mystic hover:bg-gradient-lilac text-white px-6 sm:px-8 md:px-10 py-3 md:py-4 rounded-full font-arial tracking-wide text-sm sm:text-base md:text-lg transition-all duration-300 hover:shadow-xl hover:scale-105 transform"
                  onClick={() => window.location.href = '/our-story'}
                >
                  Discover Our Story
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default MissionSection;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\NewsletterSection.tsx -----

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { toast } from '@/components/ui/sonner';

const NewsletterSection = () => {
  const [email, setEmail] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (email) {
      toast.success("Welcome to the Crystal Family! âœ¨", {
        description: "You've successfully joined our newsletter.",
      });
      setEmail('');
    }
  };

  return (
    <section className="py-20 bg-white">
      <div className="container mx-auto px-6">
        <div className="max-w-2xl mx-auto text-center">
          <h2 className="text-2xl sm:text-3xl md:text-4xl font-cormorant-light mb-4 md:mb-6 bg-gradient-to-r from-[#8a6b8d] via-[#a085a3] to-[#8a6b8d] bg-clip-text text-transparent">
            Let's Stay in Touch
          </h2>
          
          <form onSubmit={handleSubmit} className="flex flex-col sm:flex-row gap-3 md:gap-4 max-w-md mx-auto">
            <Input
              type="email"
              placeholder="Email*"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              className="flex-1 px-3 md:px-4 py-2 md:py-3 border border-gray-300 focus:border-gray-500 rounded-none text-sm md:text-base"
            />
            <Button 
              type="submit" 
              className="px-6 md:px-8 py-2 md:py-3 bg-gray-800 hover:bg-gray-700 text-white rounded-none font-arial tracking-wide text-sm md:text-base"
            >
              Submit
            </Button>
          </form>
          
          <div className="flex items-center justify-center mt-4">
            <input type="checkbox" id="newsletter" className="mr-2" />
            <label htmlFor="newsletter" className="text-sm text-gray-600">
              Yes, subscribe me to your newsletter.
            </label>
          </div>
        </div>
      </div>
    </section>
  );
};

export default NewsletterSection;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ProductCard.tsx -----

import React from 'react';
import { Button } from '@/components/ui/button';
import { ShoppingCart, CreditCard } from 'lucide-react';
import { useCart } from '@/hooks/useCart';
import { useWishlist } from '@/hooks/useWishlist';
import { toast } from '@/components/ui/sonner';
import { useNavigate } from 'react-router-dom';
import WishlistIcon from '@/components/WishlistIcon';
import { Product } from '@/data/products';

type ProductCardProps = {
  product: Product;
};

const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  const { addItem } = useCart();
  const navigate = useNavigate();

  const handleAddToCart = () => {
    addItem({ 
      id: product.id, 
      name: product.name, 
      price: product.price, 
      image: product.image 
    });
    
    toast.success('Added to cart', {
      description: `${product.name} has been added to your cart.`,
    });
  };
  
  const handleBuyNow = () => {
    addItem({ 
      id: product.id, 
      name: product.name, 
      price: product.price, 
      image: product.image 
    });
    navigate('/checkout');
  };

  return (
    <div className="group relative overflow-hidden rounded-2xl bg-card shadow-soft hover:shadow-mystic transition-all duration-500 hover:-translate-y-2">
      <div className="aspect-[4/3] overflow-hidden relative">
        <img
          src={product.image}
          alt={product.name}
          className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
        />
        <div className="absolute inset-0 bg-gradient-to-t from-background/90 via-background/30 to-transparent" />
        <div className="absolute top-3 right-3">
          <WishlistIcon product={product} />
        </div>
      </div>
      
      <div className="absolute bottom-0 left-0 right-0 p-6">
        <div className="flex justify-between items-center mb-2">
          <h3 className="text-xl font-cormorant-light text-foreground">
            {product.name}
          </h3>
          <span className="text-lg font-madefor-medium">â‚¹{product.price.toFixed(2)}</span>
        </div>
        <p className="text-sm text-muted-foreground mb-4">
          {product.description}
        </p>
        <div className="flex justify-between items-center gap-2">
          <Button 
            variant="secondary" 
            size="sm" 
            className="rounded-full flex-1 font-arial" 
            onClick={handleAddToCart}
          >
            <ShoppingCart className="h-4 w-4 mr-2" />
            Add to Cart
          </Button>
          <Button 
            variant="default" 
            size="sm" 
            className="rounded-full flex-1 font-arial" 
            onClick={handleBuyNow}
          >
            <CreditCard className="h-4 w-4 mr-2" />
            Buy Now
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ProductCard;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ProductCategories.tsx -----

import { Button } from '@/components/ui/button';
import { useNavigate } from 'react-router-dom';
import naturalCrystals from '@/assets/natural-crystals.jpg';
import healingCrystals from '@/assets/healing-crystals.jpg';
import crystalBottles from '@/assets/crystal-bottles.jpg';
import crystalKits from '@/assets/crystal-kits.jpg';
import crystalBracelets from '@/assets/crystal-bracelets.jpg';
import tumbledStones from '@/assets/tumbled-stones.jpg';
import crystalTrees from '@/assets/crystal-trees.jpg';

const ProductCategories = () => {
  const navigate = useNavigate();
  
  const categories = [
    {
      id: 'natural-crystals',
      name: 'Natural Crystals',
      image: naturalCrystals,
      description: 'Pure, unpolished crystals straight from Earth',
    },
    {
      id: 'healing-crystals',
      name: 'Healing Crystals',
      image: healingCrystals,
      description: 'Energetically charged crystals for wellness',
    },
    {
      id: 'crystal-bottles',
      name: 'Crystal Bottles',
      image: crystalBottles,
      description: 'Infuse your water with crystal energy',
    },
    {
      id: 'crystal-kits',
      name: 'Crystal Kits & Sets',
      image: crystalKits,
      description: 'Curated collections for your practice',
    },
    {
      id: 'crystal-bracelets',
      name: 'Crystal Chips & Bracelets',
      image: crystalBracelets,
      description: 'Wearable crystal energy',
    },
    {
      id: 'tumbled-stones',
      name: 'Tumbled Stones',
      image: tumbledStones,
      description: 'Smooth, polished pocket companions',
    },
    {
      id: 'crystal-trees',
      name: 'Crystal Trees',
      image: crystalTrees,
      description: 'Decorative energy enhancers',
    },
  ];

  return (
    <section id="shop" className="py-20 bg-white" aria-labelledby="shop-heading">
      <div className="container mx-auto px-6">
        <header className="text-center mb-16">
          <h2 id="shop-heading" className="text-4xl md:text-5xl font-cormorant-light mb-4 bg-gradient-to-r from-[#8a6b8d] via-[#a085a3] to-[#8a6b8d] bg-clip-text text-transparent">
            Shop By Category
          </h2>
        </header>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 md:gap-8" role="list">
          {categories.map((category) => (
            <article key={category.id} className="group cursor-pointer bg-white rounded-xl sm:rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 overflow-hidden border border-gray-100 mobile-card mobile-touch" role="listitem">
              <div className="relative overflow-hidden">
                <img
                  src={category.image}
                  alt={`${category.name} - ${category.description}`}
                  className="w-full h-48 sm:h-56 md:h-64 object-cover transition-all duration-500 group-hover:scale-110"
                  loading="lazy"
                  width="400"
                  height="256"
                  decoding="async"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                <div className="absolute inset-0 bg-gradient-to-r from-[#b094b2]/20 to-[#d1bccd]/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                <div className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-all duration-500 transform translate-y-2 group-hover:translate-y-0">
                  <div className="w-10 h-10 bg-white/90 rounded-full flex items-center justify-center backdrop-blur-sm">
                    <svg className="w-5 h-5 text-[#b094b2]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                  </div>
                </div>
              </div>
              
              <div className="p-4 md:p-6">
                <h3 className="text-lg md:text-xl font-cormorant-light mb-3 text-gray-800 group-hover:text-[#b094b2] transition-colors duration-300">
                  {category.name}
                </h3>
                <p className="text-gray-600 mb-4 md:mb-6 text-xs md:text-sm leading-relaxed font-madefor-medium">
                  {category.description}
                </p>
                <Button
                  className="mobile-button-primary bg-gradient-to-r from-[#b094b2] to-[#d1bccd] hover:from-[#b094b2]/80 hover:to-[#d1bccd]/80 text-white font-arial tracking-wide transition-all duration-300 hover:shadow-lg hover:scale-105 transform mobile-touch"
                  onClick={() => navigate(`/collections/${category.id}`)}
                >
                  Explore Collection
                </Button>
              </div>
            </article>
          ))}
        </div>
      </div>
    </section>
  );
};

export default ProductCategories;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ProductForm.tsx -----

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2 } from 'lucide-react';
import { supabase } from '@/lib/supabaseClient';
import ImageUpload from '@/components/ImageUpload';

interface ProductFormProps {
  onSuccess?: () => void;
}

const ProductForm: React.FC<ProductFormProps> = ({ onSuccess }) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    originalPrice: '',
    category: 'bracelet',
    sizes: '',
    image: '',
    benefits: '',
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitError(null);
    setSubmitSuccess(false);

    try {
      // Generate a proper UUID for the product ID
      const id = crypto.randomUUID();
      const productData = {
        id,
        name: formData.name,
        description: formData.description,
        price: parseFloat(formData.price),
        original_price: formData.originalPrice ? parseFloat(formData.originalPrice) : null,
        image_url: formData.image,
        category: formData.category,
        colors: [],
        rating: 0,
        reviewCount: 0,
        sizes: formData.sizes.split(',').map(s => parseFloat(s.trim())).filter(s => !isNaN(s) && s > 0),
        benefits: formData.benefits.split(',').map(b => b.trim()).filter(b => b),
        is_featured: false,
        in_stock: true,
        created_at: new Date().toISOString(),
      };

      const { error } = await supabase
        .from('products')
        .insert([productData]);

      if (error) {
        throw error;
      }

      setSubmitSuccess(true);
      setFormData({
        name: '',
        description: '',
        price: '',
        originalPrice: '',
        category: 'bracelet',
        sizes: '',
        image: '',
        benefits: '',
      });
      
      if (onSuccess) {
        onSuccess();
      }

      setTimeout(() => setSubmitSuccess(false), 3000);
    } catch (error) {
      console.error('Error creating product:', error);
      setSubmitError(error instanceof Error ? error.message : 'Failed to create product');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {submitError && (
        <Alert variant="destructive">
          <AlertDescription>{submitError}</AlertDescription>
        </Alert>
      )}

      {submitSuccess && (
        <Alert className="border-green-200 bg-green-50">
          <AlertDescription className="text-green-800">
            Product created successfully!
          </AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Basic Information</CardTitle>
            <CardDescription>Essential product details</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="name">Product Name *</Label>
              <Input
                id="name"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
                placeholder="e.g., Rose Quartz Bracelet"
                required
              />
            </div>

            <div>
              <Label htmlFor="description">Description *</Label>
              <Textarea
                id="description"
                value={formData.description}
                onChange={(e) => setFormData({...formData, description: e.target.value})}
                placeholder="Describe the product and its properties..."
                rows={4}
                required
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="price">Price (â‚¹) *</Label>
                <Input
                  id="price"
                  type="number"
                  step="0.01"
                  value={formData.price}
                  onChange={(e) => setFormData({...formData, price: e.target.value})}
                  placeholder="0.00"
                  required
                />
              </div>

              <div>
                <Label htmlFor="originalPrice">Original Price (â‚¹)</Label>
                <Input
                  id="originalPrice"
                  type="number"
                  step="0.01"
                  value={formData.originalPrice}
                  onChange={(e) => setFormData({...formData, originalPrice: e.target.value})}
                  placeholder="0.00"
                />
              </div>
            </div>

            <div>
              <Label>Product Image *</Label>
              <ImageUpload
                onImageSelect={(url) => setFormData({...formData, image: url})}
                currentImage={formData.image}
                className="mt-2"
              />
              {!formData.image && (
                <p className="text-sm text-red-600 mt-1">Please upload an image</p>
              )}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Category & Properties</CardTitle>
            <CardDescription>Product classification and attributes</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="category">Category *</Label>
              <select
                id="category"
                value={formData.category}
                onChange={(e) => setFormData({...formData, category: e.target.value})}
                className="w-full p-2 border border-gray-300 rounded-md"
                required
              >
                <option value="bracelet">Bracelet</option>
                <option value="rudraksh">Rudraksh</option>
                <option value="frames">Frames</option>
                <option value="anklet">Anklet</option>
                <option value="pyramid">Pyramid</option>
                <option value="tower-and-tumbles">Tower and Tumbles</option>
                <option value="raw-stones">Raw Stones</option>
                <option value="selenite-plates">Selenite Plates</option>
                <option value="geode">Geode</option>
                <option value="mala">Mala</option>
                <option value="hangers">Hangers</option>
                <option value="tumble-set">Tumble Set</option>
                <option value="trees">Trees</option>
              </select>
            </div>

            <div>
              <Label htmlFor="sizes">Sizes (mm) *</Label>
              <Input
                id="sizes"
                value={formData.sizes}
                onChange={(e) => setFormData({...formData, sizes: e.target.value})}
                placeholder="e.g., 8, 10, 12, 15 (comma-separated)"
                required
              />
              <p className="text-sm text-gray-600 mt-1">
                Enter multiple sizes separated by commas (e.g., 8, 10, 12)
              </p>
              {formData.sizes && formData.sizes.split(',').some(s => isNaN(parseFloat(s.trim())) || parseFloat(s.trim()) <= 0) && (
                <p className="text-sm text-red-600 mt-1">Please enter valid sizes in mm (positive numbers only)</p>
              )}
            </div>


            <div>
              <Label htmlFor="benefits">Benefits (comma-separated) *</Label>
              <Input
                id="benefits"
                value={formData.benefits}
                onChange={(e) => setFormData({...formData, benefits: e.target.value})}
                placeholder="e.g., Love, Emotional Healing, Self-Care"
                required
              />
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="flex justify-end">
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
          Create Product
        </Button>
      </div>
    </form>
  );
};

export default ProductForm;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ProductList.tsx -----

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2, Edit, Trash2, Eye } from 'lucide-react';
import { supabase } from '@/lib/supabaseClient';
import ImagePreview from '@/components/ImagePreview';
import SizeDisplay from '@/components/SizeDisplay';

interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  original_price?: number;
  image_url: string;
  category: string;
  rating: number;
  reviewCount: number;
  sizes: number[];
  benefits: string[];
  is_featured: boolean;
  in_stock: boolean;
  created_at: string;
}

const ProductList: React.FC = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchProducts = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        throw error;
      }

      setProducts(data || []);
    } catch (err) {
      console.error('Error fetching products:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch products');
    } finally {
      setLoading(false);
    }
  };

  const deleteProduct = async (id: string) => {
    if (!confirm('Are you sure you want to delete this product?')) {
      return;
    }

    try {
      const { error } = await supabase
        .from('products')
        .delete()
        .eq('id', id);

      if (error) {
        throw error;
      }

      setProducts(products.filter(product => product.id !== id));
    } catch (err) {
      console.error('Error deleting product:', err);
      setError(err instanceof Error ? err.message : 'Failed to delete product');
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center py-8">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">Loading products...</span>
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  if (products.length === 0) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-500 mb-4">No products found.</p>
        <Button onClick={fetchProducts}>Refresh</Button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold">Products ({products.length})</h3>
        <Button onClick={fetchProducts} variant="outline">
          Refresh
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {products.map((product) => (
          <Card key={product.id} className="overflow-hidden">
            <ImagePreview
              src={product.image_url}
              alt={product.name}
              size="lg"
              className="w-full"
            />
            
            <CardHeader className="pb-2">
              <div className="flex justify-between items-start">
                <CardTitle className="text-lg line-clamp-2">{product.name}</CardTitle>
                <div className="flex space-x-1">
                  {product.is_featured && (
                    <Badge variant="secondary" className="text-xs">Featured</Badge>
                  )}
                  {!product.in_stock && (
                    <Badge variant="destructive" className="text-xs">Out of Stock</Badge>
                  )}
                </div>
              </div>
              <CardDescription className="line-clamp-2">
                {product.description}
              </CardDescription>
            </CardHeader>

            <CardContent className="pt-0">
              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="text-2xl font-bold text-[#b094b2]">
                    â‚¹{product.price.toFixed(2)}
                  </span>
                  {product.original_price && (
                    <span className="text-sm text-gray-500 line-through">
                      â‚¹{product.original_price.toFixed(2)}
                    </span>
                  )}
                </div>

                <div className="text-sm text-gray-600">
                  <p><strong>Category:</strong> {product.category}</p>
                  <div className="flex items-center gap-2 mt-1">
                    <strong>Sizes:</strong>
                    <SizeDisplay sizes={product.sizes} />
                  </div>
                  <p><strong>Rating:</strong> {product.rating}/5 ({product.reviewCount} reviews)</p>
                </div>


                {product.benefits.length > 0 && (
                  <div>
                    <p className="text-sm font-medium text-gray-700 mb-1">Benefits:</p>
                    <div className="flex flex-wrap gap-1">
                      {product.benefits.slice(0, 3).map((benefit, index) => (
                        <Badge key={index} variant="secondary" className="text-xs">
                          {benefit}
                        </Badge>
                      ))}
                      {product.benefits.length > 3 && (
                        <Badge variant="secondary" className="text-xs">
                          +{product.benefits.length - 3} more
                        </Badge>
                      )}
                    </div>
                  </div>
                )}

                <div className="flex space-x-2 pt-2">
                  <Button size="sm" variant="outline" className="flex-1">
                    <Eye className="h-4 w-4 mr-1" />
                    View
                  </Button>
                  <Button size="sm" variant="outline" className="flex-1">
                    <Edit className="h-4 w-4 mr-1" />
                    Edit
                  </Button>
                  <Button 
                    size="sm" 
                    variant="destructive" 
                    onClick={() => deleteProduct(product.id)}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default ProductList;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ProductManagement.tsx -----

 

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ProductStats.tsx -----

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2, Package, Star, DollarSign, TrendingUp } from 'lucide-react';
import { supabase } from '@/lib/supabaseClient';

interface ProductStats {
  totalProducts: number;
  featuredProducts: number;
  outOfStock: number;
  averagePrice: number;
  averageRating: number;
  totalReviews: number;
  categoryCounts: { [key: string]: number };
}

const ProductStats: React.FC = () => {
  const [stats, setStats] = useState<ProductStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchStats = async () => {
    try {
      setLoading(true);
      const { data: products, error } = await supabase
        .from('products')
        .select('*');

      if (error) {
        throw error;
      }

      if (!products) {
        setStats({
          totalProducts: 0,
          featuredProducts: 0,
          outOfStock: 0,
          averagePrice: 0,
          averageRating: 0,
          totalReviews: 0,
          categoryCounts: {},
        });
        return;
      }

      const totalProducts = products.length;
      const featuredProducts = products.filter(p => p.is_featured).length;
      const outOfStock = products.filter(p => !p.in_stock).length;
      const averagePrice = products.length > 0 
        ? products.reduce((sum, p) => sum + p.price, 0) / products.length 
        : 0;
      const averageRating = products.length > 0 
        ? products.reduce((sum, p) => sum + p.rating, 0) / products.length 
        : 0;
      const totalReviews = products.reduce((sum, p) => sum + p.reviewCount, 0);

      // Count products by category
      const categoryCounts: { [key: string]: number } = {};
      products.forEach(product => {
        categoryCounts[product.category] = (categoryCounts[product.category] || 0) + 1;
      });

      setStats({
        totalProducts,
        featuredProducts,
        outOfStock,
        averagePrice,
        averageRating,
        totalReviews,
        categoryCounts,
      });
    } catch (err) {
      console.error('Error fetching stats:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch statistics');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchStats();
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center py-8">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">Loading statistics...</span>
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  if (!stats) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">No statistics available.</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Products</CardTitle>
            <Package className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalProducts}</div>
            <p className="text-xs text-muted-foreground">
              Products in your store
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Featured Products</CardTitle>
            <Star className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.featuredProducts}</div>
            <p className="text-xs text-muted-foreground">
              Highlighted products
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Average Price</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">â‚¹{stats.averagePrice.toFixed(2)}</div>
            <p className="text-xs text-muted-foreground">
              Per product
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Average Rating</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.averageRating.toFixed(1)}</div>
            <p className="text-xs text-muted-foreground">
              Out of 5 stars
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Additional Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>Inventory Status</CardTitle>
            <CardDescription>Current stock levels</CardDescription>
          </CardHeader>
          <CardContent className="space-y-2">
            <div className="flex justify-between items-center">
              <span>In Stock</span>
              <Badge variant="secondary">
                {stats.totalProducts - stats.outOfStock}
              </Badge>
            </div>
            <div className="flex justify-between items-center">
              <span>Out of Stock</span>
              <Badge variant={stats.outOfStock > 0 ? "destructive" : "secondary"}>
                {stats.outOfStock}
              </Badge>
            </div>
            <div className="flex justify-between items-center">
              <span>Total Reviews</span>
              <Badge variant="outline">
                {stats.totalReviews}
              </Badge>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Categories</CardTitle>
            <CardDescription>Products by category</CardDescription>
          </CardHeader>
          <CardContent>
            {Object.keys(stats.categoryCounts).length > 0 ? (
              <div className="space-y-2">
                {Object.entries(stats.categoryCounts)
                  .sort(([,a], [,b]) => b - a)
                  .map(([category, count]) => (
                    <div key={category} className="flex justify-between items-center">
                      <span className="capitalize">{category.replace('-', ' ')}</span>
                      <Badge variant="outline">{count}</Badge>
                    </div>
                  ))}
              </div>
            ) : (
              <p className="text-sm text-gray-500">No products in any category yet.</p>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle>Quick Actions</CardTitle>
          <CardDescription>Common administrative tasks</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-sm text-gray-600 space-y-1">
            <p>â€¢ Add new products using the "Add Product" tab</p>
            <p>â€¢ Manage existing products in the "Products" tab</p>
            <p>â€¢ Update product information and pricing as needed</p>
            <p>â€¢ Monitor inventory levels and restock when necessary</p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ProductStats;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\ShippingBanner.tsx -----

import { Truck, Shield, RotateCcw, Headphones } from 'lucide-react';

const ShippingBanner = () => {
  const features = [
    {
      icon: Truck,
      title: 'Free Standard Delivery',
      description: 'India wide on orders over â‚¹500',
      highlight: true
    },
    {
      icon: Shield,
      title: 'Secure Payment',
      description: '100% secure checkout process',
      highlight: false
    },
    {
      icon: RotateCcw,
      title: 'Easy Returns',
      description: '30-day return policy',
      highlight: false
    },
    {
      icon: Headphones,
      title: '24/7 Support',
      description: 'Always here to help',
      highlight: false
    }
  ];

  return (
    <section className="py-12 bg-gray-100 border-b border-gray-200">
      <div className="container mx-auto px-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {features.map((feature, index) => (
            <div key={index} className={`flex items-center space-x-4 ${feature.highlight ? 'bg-green-50 p-4 rounded-lg border border-green-200' : ''}`}>
              <div className={`flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center ${
                feature.highlight ? 'bg-green-100' : 'bg-gray-200'
              }`}>
                <feature.icon className={`w-6 h-6 ${
                  feature.highlight ? 'text-green-600' : 'text-gray-600'
                }`} />
              </div>
              <div>
                <h3 className={`font-semibold text-sm ${
                  feature.highlight ? 'text-green-800' : 'text-gray-800'
                }`}>
                  {feature.title}
                </h3>
                <p className={`text-xs ${
                  feature.highlight ? 'text-green-600' : 'text-gray-600'
                }`}>
                  {feature.description}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default ShippingBanner;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\SizeDisplay.tsx -----

import React from 'react';
import { Badge } from '@/components/ui/badge';

interface SizeDisplayProps {
  sizes: number[];
  className?: string;
  variant?: 'default' | 'secondary' | 'outline';
}

const SizeDisplay: React.FC<SizeDisplayProps> = ({ 
  sizes, 
  className = '', 
  variant = 'outline' 
}) => {
  if (!sizes || sizes.length === 0) {
    return <span className="text-gray-500 text-sm">No sizes available</span>;
  }

  return (
    <div className={`flex flex-wrap gap-1 ${className}`}>
      {sizes.map((size, index) => (
        <Badge 
          key={index} 
          variant={variant}
          className="text-xs font-medium"
        >
          {size}mm
        </Badge>
      ))}
    </div>
  );
};

export default SizeDisplay;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\TestimonialsSection.tsx -----

import { Star, Quote } from 'lucide-react';

const TestimonialsSection = () => {
  const testimonials = [
    {
      id: 1,
      name: 'Sarah Johnson',
      location: 'California, USA',
      rating: 5,
      text: 'The amethyst cluster I purchased has completely transformed my meditation practice. The energy is so pure and calming. Adhyatma\'s crystals are truly special.',
      image: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face'
    },
    {
      id: 2,
      name: 'Michael Chen',
      location: 'New York, USA',
      rating: 5,
      text: 'I\'ve been collecting crystals for years, and Adhyatma has the highest quality stones I\'ve found. Their customer service is exceptional too.',
      image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face'
    },
    {
      id: 3,
      name: 'Emma Rodriguez',
      location: 'Texas, USA',
      rating: 5,
      text: 'The crystal water bottle set is amazing! I can feel the difference in my water\'s energy. My whole family loves it. Highly recommended!',
      image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face'
    },
    {
      id: 4,
      name: 'David Thompson',
      location: 'Florida, USA',
      rating: 5,
      text: 'The chakra healing kit has been a game-changer for my spiritual journey. Each crystal is perfectly selected and the energy is incredible.',
      image: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face'
    },
    {
      id: 5,
      name: 'Lisa Wang',
      location: 'Washington, USA',
      rating: 5,
      text: 'I love how ethically sourced these crystals are. It makes me feel good knowing I\'m supporting responsible mining practices.',
      image: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=100&h=100&fit=crop&crop=face'
    },
    {
      id: 6,
      name: 'James Wilson',
      location: 'Oregon, USA',
      rating: 5,
      text: 'The packaging was beautiful and the crystals arrived perfectly protected. The care they put into every detail shows their dedication to quality.',
      image: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=100&h=100&fit=crop&crop=face'
    }
  ];

  return (
    <section className="py-24 bg-gradient-to-br from-gray-50 via-white to-[#d1bccd]">
      <div className="container mx-auto px-6">
        <div className="text-center mb-20">
          <h2 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-cormorant-light mb-6 md:mb-8 bg-gradient-to-r from-[#8a6b8d] via-[#a085a3] to-[#8a6b8d] bg-clip-text text-transparent">
            What Our Customers Say
          </h2>
          <div className="w-24 h-1 bg-gradient-to-r from-[#b094b2] to-[#d1bccd] mx-auto rounded-full mb-6 md:mb-8"></div>
          <p className="text-base sm:text-lg md:text-xl text-gray-600 font-madefor-medium px-4">
            Join thousands of satisfied customers who have transformed their lives with our crystals
          </p>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8">
          {testimonials.map((testimonial) => (
            <div key={testimonial.id} className="bg-white/80 backdrop-blur-sm p-6 md:p-8 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 border border-white/20 group">
              <Quote className="w-10 h-10 text-[#d1bccd] absolute top-6 right-6 group-hover:text-[#b094b2] transition-colors duration-300" />
              
              <div className="flex items-center mb-6">
                {[...Array(testimonial.rating)].map((_, i) => (
                  <Star key={i} className="w-5 h-5 text-yellow-400 fill-current" />
                ))}
              </div>
              
              <p className="text-gray-700 mb-6 md:mb-8 leading-relaxed text-sm sm:text-base md:text-lg font-lato-light">
                "{testimonial.text}"
              </p>
              
              <div className="flex items-center">
                <div className="relative">
                  <img
                    src={testimonial.image}
                    alt={testimonial.name}
                    className="w-14 h-14 rounded-full object-cover mr-4 border-2 border-[#d1bccd]"
                  />
                  <div className="absolute inset-0 w-14 h-14 rounded-full bg-gradient-to-r from-[#b094b2]/30 to-[#d1bccd]/30 blur-sm"></div>
                </div>
                <div>
                  <h4 className="font-cormorant-light text-gray-800 text-base md:text-lg">{testimonial.name}</h4>
                  <p className="text-gray-600 font-madefor-medium text-sm md:text-base">{testimonial.location}</p>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className="text-center mt-8 md:mt-12">
          <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-6 md:space-x-8 text-gray-600">
            <div className="text-center">
              <div className="text-2xl md:text-3xl font-cormorant-light text-gray-800">10,000+</div>
              <div className="text-xs md:text-sm font-madefor-medium">Happy Customers</div>
            </div>
            <div className="text-center">
              <div className="text-2xl md:text-3xl font-cormorant-light text-gray-800">4.9/5</div>
              <div className="text-xs md:text-sm font-madefor-medium">Average Rating</div>
            </div>
            <div className="text-center">
              <div className="text-2xl md:text-3xl font-cormorant-light text-gray-800">50+</div>
              <div className="text-xs md:text-sm font-madefor-medium">Countries Served</div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default TestimonialsSection;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\components\WishlistIcon.tsx -----

import React from 'react';
import { Heart } from 'lucide-react';
import { useWishlist } from '@/hooks/useWishlist';
import { Product } from '@/data/products';
import { cn } from '@/lib/utils';

interface WishlistIconProps {
  product: Product;
  size?: 'sm' | 'md' | 'lg';
  className?: string;
  showText?: boolean;
}

const WishlistIcon: React.FC<WishlistIconProps> = ({ 
  product, 
  size = 'md', 
  className,
  showText = false 
}) => {
  const { isInWishlist, toggleWishlist } = useWishlist();
  const isWishlisted = isInWishlist(product.id);

  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-5 w-5',
    lg: 'h-6 w-6'
  };

  const handleClick = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    toggleWishlist(product);
  };

  return (
    <button
      onClick={handleClick}
      className={cn(
        'flex items-center gap-1 transition-colors duration-200 hover:scale-110',
        'focus:outline-none focus:ring-2 focus:ring-[#b094b2] focus:ring-offset-2 rounded-full p-1',
        className
      )}
      aria-label={isWishlisted ? 'Remove from wishlist' : 'Add to wishlist'}
    >
      <Heart
        className={cn(
          sizeClasses[size],
          'transition-colors duration-200',
          isWishlisted 
            ? 'fill-red-500 text-red-500' 
            : 'text-gray-400 hover:text-red-500'
        )}
      />
      {showText && (
        <span className={cn(
          'text-sm font-medium transition-colors duration-200',
          isWishlisted ? 'text-red-500' : 'text-gray-600'
        )}>
          {isWishlisted ? 'Saved' : 'Save'}
        </span>
      )}
    </button>
  );
};

export default WishlistIcon;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\contexts\auth-context-exports.ts -----

// Separate exports file to avoid HMR issues with Fast Refresh
export { AuthContext } from './auth-context';

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\contexts\auth-context.tsx -----

import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';
import { supabase } from '@/lib/supabaseClient';
import { AuthChangeEvent, Session, User as SupabaseUser } from '@supabase/supabase-js';

// --- Type Definitions ---
interface Profile {
  id: string;
  first_name: string;
  last_name: string;
  email: string;
  phone?: string;
  address?: string;
  city?: string;
  state?: string;
  zip_code?: string;
  is_admin?: boolean;
  updated_at?: string;
}

type AuthStatus = 'loading' | 'authenticated' | 'unauthenticated';

interface AuthState {
  user: Profile | null;
  session: Session | null;
  status: AuthStatus;
  error: string | null;
}

interface AuthContextType extends AuthState {
  isAuthenticated: boolean;
  isLoading: boolean;
  isAdmin: boolean;
  signIn: (email: string, password: string) => Promise<{ user: SupabaseUser | null; session: Session | null }>;
  signUp: (userData: Omit<Profile, 'id' | 'updated_at'> & { password: string; email: string }) => Promise<{ user: SupabaseUser | null; session: Session | null }>;
  signOut: () => Promise<void>;
  updateUser: (userData: Partial<Profile>) => Promise<void>;
  clearError: () => void;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<Profile | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [status, setStatus] = useState<AuthStatus>('loading');
  const [error, setError] = useState<string | null>(null);
  const [initialized, setInitialized] = useState(false);
  const [isProcessingProfile, setIsProcessingProfile] = useState(false);
  const [isSigningOut, setIsSigningOut] = useState(false);

  const getProfile = useCallback(async (userId: string) => {
    if (isProcessingProfile) {
      console.log('âš ï¸ Profile fetch already in progress, skipping...');
      return;
    }
    
    // Check if we already have the profile for this user
    if (user && user.id === userId && status === 'authenticated') {
      console.log('âœ… Profile already loaded for user:', userId);
      return;
    }
    
    console.log('ðŸ”„ Starting profile fetch for user:', userId);
    setIsProcessingProfile(true);
    
    try {
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();

      if (profileError) {
        console.error('âŒ Profile fetch error:', profileError);
        
        // If profile doesn't exist, create it from auth user data
        if (profileError.code === 'PGRST116') {
          console.log('âš ï¸ Profile not found, creating new profile...');
          
          // Get the current user from auth
          const { data: { user: authUser } } = await supabase.auth.getUser();
          
          if (authUser) {
            console.log('âœ… Creating profile for user:', authUser.id);
            const { error: createError } = await supabase
              .from('profiles')
              .insert({
                id: authUser.id,
                first_name: authUser.user_metadata?.first_name || '',
                last_name: authUser.user_metadata?.last_name || '',
                email: authUser.email || '',
              });

            if (createError) {
              console.error("âŒ Failed to create missing profile:", createError);
              const tempProfile: Profile = {
                id: authUser.id,
                first_name: authUser.user_metadata?.first_name || '',
                last_name: authUser.user_metadata?.last_name || '',
                email: authUser.email || '',
                updated_at: new Date().toISOString()
              };
              setUser(tempProfile);
              setStatus('authenticated');
              console.log('âœ… Temporary profile created and user authenticated:', tempProfile.first_name);
              return;
            }
            
            // Fetch the newly created profile
            const { data: newProfile } = await supabase
              .from('profiles')
              .select('*')
              .eq('id', userId)
              .single();
              
            if (newProfile) {
              console.log('âœ… Profile created and fetched successfully');
              setUser(newProfile as Profile);
              setStatus('authenticated');
              return;
            }
          }
        }
        
        // If we can't fetch or create profile, create a temporary one from auth data
        const { data: { user: authUser } } = await supabase.auth.getUser();
        if (authUser) {
          const tempProfile: Profile = {
            id: authUser.id,
            first_name: authUser.user_metadata?.first_name || '',
            last_name: authUser.user_metadata?.last_name || '',
            email: authUser.email || '',
            updated_at: new Date().toISOString()
          };
          setUser(tempProfile);
          setStatus('authenticated');
          console.log('âœ… Fallback temporary profile created and user authenticated:', tempProfile.first_name);
          return;
        }
        
        // If we can't get auth user, clear state without triggering signout
        setUser(null);
        setSession(null);
        setStatus('unauthenticated');
        setError('Unable to fetch user profile');
        return;
      }
      
      setUser(profile as Profile);
      setStatus('authenticated');
      console.log('âœ… Profile loaded and user authenticated:', profile.first_name);
    } catch (error) {
      console.error("âŒ Profile fetch exception:", error);
      
      // Instead of signing out immediately, try to create a temporary profile
      try {
        const { data: { user: authUser } } = await supabase.auth.getUser();
        if (authUser) {
          const tempProfile: Profile = {
            id: authUser.id,
            first_name: authUser.user_metadata?.first_name || '',
            last_name: authUser.user_metadata?.last_name || '',
            email: authUser.email || '',
            updated_at: new Date().toISOString()
          };
          setUser(tempProfile);
          setStatus('authenticated');
          return;
        }
      } catch (authError) {
        console.error("âŒ Failed to get auth user:", authError);
      }
      
      // Only clear state if we can't create a temporary profile
      setUser(null);
      setSession(null);
      setStatus('unauthenticated');
      setError('Unable to fetch user profile');
    } finally {
      setIsProcessingProfile(false);
    }
  }, [isProcessingProfile]);

  useEffect(() => {
    let isMounted = true;
    const timeoutId: NodeJS.Timeout = setTimeout(() => {
      if (isMounted) {
        setStatus('unauthenticated');
        setInitialized(true);
      }
    }, 10000); // 10 second timeout
    
    const getInitialSession = async () => {
      try {
        
        // Check if Supabase is properly configured
        if (!supabase || !supabase.auth) {
          if (isMounted) {
            setStatus('unauthenticated');
            setInitialized(true);
          }
          return;
        }
        
        const { data: { session: initialSession }, error: sessionError } = await supabase.auth.getSession();
        
        if (sessionError) {
          console.error("âŒ Session error:", sessionError);
          if (isMounted) {
            setStatus('unauthenticated');
          }
          return;
        }

        if (initialSession?.user && isMounted) {
          await getProfile(initialSession.user.id);
        } else if (isMounted) {
          setStatus('unauthenticated');
        }
      } catch (err) {
        console.error("âŒ Error during initial session fetch:", err);
        if (isMounted) {
          setError("Failed to connect to the server.");
          setStatus('unauthenticated');
        }
      }
    };


    getInitialSession().finally(() => {
      if (isMounted) {
        clearTimeout(timeoutId);
        setInitialized(true);
      }
    });
    
    return () => {
      isMounted = false;
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };

    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, newSession) => {
        console.log('ðŸ”„ Auth state change:', event, newSession?.user?.id, 'isSigningOut:', isSigningOut);
        
        if (event === 'SIGNED_IN' && newSession?.user && !isSigningOut) {
          // This handles both SIGNED_IN and SIGNED_UP events
          console.log('âœ… User signed up/in, updating state...');
          setSession(newSession);
          setStatus('loading'); // Set to loading while we fetch the profile
          setError(null);
          await getProfile(newSession.user.id);
        } else if (event === 'SIGNED_OUT') {
          console.log('âŒ User signed out via auth state change');
          // Only clear state if it's not already cleared (avoid double clearing)
          if (user || session) {
            setUser(null);
            setSession(null);
            setStatus('unauthenticated');
            setError(null);
            setIsProcessingProfile(false);
          }
        } else if (event === 'TOKEN_REFRESHED' && newSession?.user) {
          console.log('ðŸ”„ Token refreshed, updating session...');
          setSession(newSession);
          // Only refresh profile if we don't already have user data
          if (!user || user.id !== newSession.user.id) {
            await getProfile(newSession.user.id);
          }
        } else if (event === 'PASSWORD_RECOVERY') {
          console.log('ðŸ”„ Password recovery initiated');
        } else {
          console.log('ðŸ”„ Unhandled auth event:', event);
        }
      }
    );

    return () => {
      subscription?.unsubscribe();
    };
  }, [getProfile]);

  const signIn = async (email: string, password: string) => {
    try {
      console.log('ðŸ” Attempting to sign in...');
      setStatus('loading');
      setError(null);
      
      const { data, error: signInError } = await supabase.auth.signInWithPassword({ email, password });
      
      if (signInError) {
        console.error("âŒ Sign in error:", signInError);
        setError(transformErrorMessage(signInError, 'signin'));
        setStatus('unauthenticated');
        throw signInError;
      }
      
      console.log('âœ… Sign in successful, data:', data);
      
      return data;
    } catch (error) {
      console.error("âŒ Sign in exception:", error);
      setStatus('unauthenticated');
      setError(transformErrorMessage(error as Error, 'signin'));
      throw error;
    }
  };

  const signUp = async (userData: { first_name: string; last_name: string; email: string; password: string }) => {
    
    try {
      // Add Chrome-specific timeout and retry logic
      const signUpWithRetry = async (retries = 3) => {
        for (let i = 0; i < retries; i++) {
          try {
            const { data, error: signUpError } = await supabase.auth.signUp({
              email: userData.email,
              password: userData.password,
              options: {
                data: {
                  first_name: userData.first_name,
                  last_name: userData.last_name,
                }
              }
            });
            
            if (signUpError) {
              console.error(`âŒ Signup attempt ${i + 1} failed:`, signUpError);
              if (i === retries - 1) throw signUpError;
              // Wait before retry
              await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
              continue;
            }
            
            return { data, error: null };
          } catch (error) {
            console.error(`âŒ Signup attempt ${i + 1} exception:`, error);
            if (i === retries - 1) throw error;
            await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
          }
        }
      };
      
      const { data, error: signUpError } = await signUpWithRetry();

      if (signUpError) {
        console.error("âŒ Sign up error:", signUpError);
        setError(transformErrorMessage(signUpError, 'signup'));
        throw signUpError;
      }

      // If auth user is created, try to create their profile (non-blocking)
      if (data.user) {
        console.log('âœ… User created, setting up profile...');
        
        // Create profile asynchronously without blocking the main flow
        (async () => {
          try {
            const { error: profileError } = await supabase
              .from('profiles')
              .insert({
                id: data.user.id,
                first_name: userData.first_name,
                last_name: userData.last_name,
                email: userData.email,
              });
            
            if (profileError) {
              console.error("âš ï¸ Failed to create profile for new user:", profileError);
            } else {
              console.log('âœ… Profile created successfully');
            }
          } catch (profileError) {
            console.error("âš ï¸ Profile creation exception:", profileError);
          }
        })();
      }

      return data;
    } catch (error) {
      console.error("âŒ Sign up exception:", error);
      throw error;
    }
  };

  const signOut = async () => {
    try {
      console.log('ðŸšª Auth Context: Attempting to sign out...');
      console.log('ðŸšª Auth Context: Current user:', user?.id);
      console.log('ðŸšª Auth Context: Current session:', !!session);
      
      // Set signing out flag to prevent re-authentication
      setIsSigningOut(true);
      
      // Call Supabase signout FIRST while session is still valid
      console.log('ðŸšª Auth Context: Calling supabase.auth.signOut()...');
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.error("âŒ Auth Context: Sign out error:", error);
        setError(transformErrorMessage(error, 'signout'));
        // Clear state even if signout fails
        setUser(null);
        setSession(null);
        setStatus('unauthenticated');
        setError(null);
        setIsProcessingProfile(false);
        setIsSigningOut(false);
        return;
      }
      
      console.log('âœ… Auth Context: Sign out successful');
      
      // Clear state AFTER successful signout
      setUser(null);
      setSession(null);
      setStatus('unauthenticated');
      setError(null);
      setIsProcessingProfile(false);
      setIsSigningOut(false);
      
    } catch (error) {
      console.error("âŒ Auth Context: Sign out exception:", error);
      setError(transformErrorMessage(error as Error, 'signout'));
      // Clear state even on exception
      setUser(null);
      setSession(null);
      setStatus('unauthenticated');
      setError(null);
      setIsProcessingProfile(false);
      setIsSigningOut(false);
    }
  };

  const updateUser = async (userData: Partial<Profile>) => {
    if (!user) throw new Error("No user is signed in to update.");

    const oldUser = user;
    setUser(prevUser => prevUser ? { ...prevUser, ...userData } : null);

    try {
      const { data, error: updateError } = await supabase
        .from('profiles')
        .update(userData)
        .eq('id', user.id)
        .select()
        .single();

      if (updateError) {
        console.error("âŒ Failed to update profile in Supabase:", updateError);
        
        // Update the local user state with the new data
        const updatedUser = { ...oldUser, ...userData, updated_at: new Date().toISOString() };
        setUser(updatedUser);
        return;
      }

      if (data) {
        setUser(data as Profile);
      }
    } catch (error) {
      console.error("âŒ Profile update exception:", error);
      
      // Update the local user state with the new data
      const updatedUser = { ...oldUser, ...userData, updated_at: new Date().toISOString() };
      setUser(updatedUser);
    }
  };

  const clearError = () => setError(null);

  const transformErrorMessage = (error: Error | { message?: string } | string, context: 'signin' | 'signup' | 'profile' | 'signout') => {
    if (!error) return "An unknown error occurred.";
    const errorMessage = typeof error === 'string' ? error : (error.message || error.toString());
    
    const errorTranslations: { [key: string]: string } = {
        'Invalid login credentials': 'The email or password you entered is incorrect.',
        'Email not confirmed': 'Please check your email and click the confirmation link before signing in.',
        'User already registered': 'An account with this email already exists. Please sign in instead.',
        'Password should be at least 6 characters': 'Password must be at least 6 characters long.',
        'Failed to fetch': 'Unable to connect to the server. Please check your internet connection.',
        'duplicate key value violates unique constraint': 'This email is already registered.',
        'NetworkError': 'A network error occurred. Please check your connection and try again.',
        'Token has expired': 'Your session has expired. Please sign in again.'
    };
    
    for (const [technicalError, userFriendlyMessage] of Object.entries(errorTranslations)) {
      if (errorMessage.toLowerCase().includes(technicalError.toLowerCase())) {
        return userFriendlyMessage;
      }
    }
    
    return 'An unexpected error occurred. Please try again or contact support.';
  };

  const value: AuthContextType = {
    user,
    session,
    status,
    isAuthenticated: status === 'authenticated',
    isLoading: status === 'loading',
    isAdmin: user?.is_admin === true,
    error,
    signIn,
    signUp,
    signOut,
    updateUser,
    clearError,
  };

  // Debug logging for authentication state
  useEffect(() => {
    console.log('ðŸ” Auth state changed:', {
      status,
      isAuthenticated: status === 'authenticated',
      hasUser: !!user,
      hasSession: !!session,
      userId: user?.id,
      userEmail: user?.email
    });
  }, [status, user, session]);

  return (
    <AuthContext.Provider value={value}>
      {status === 'loading' && !initialized ? (
        <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd] flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-[#b094b2] mx-auto mb-4"></div>
            <h2 className="text-xl font-semibold text-gray-800 mb-2">Initializing Authentication</h2>
            <p className="text-gray-600">Setting up your crystal journey...</p>
            
            {error && (
              <div className="mt-6 p-4 bg-red-50 border border-red-200 rounded-lg max-w-md mx-auto">
                <p className="text-red-600 text-sm">{error}</p>
                <p className="text-gray-500 text-xs mt-2">
                  Please check your internet connection and try refreshing the page.
                </p>
              </div>
            )}
          </div>
        </div>
      ) : (
        children
      )}
    </AuthContext.Provider>
  );
};

// Export the AuthProvider as default
export default AuthProvider;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\contexts\auth-context.types.ts -----

 

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\contexts\cart-context.tsx -----

import React, { createContext, useContext, useReducer, useEffect } from 'react';

type CartItem = {
  id: string;
  name: string;
  price: number;
  image: string;
  quantity: number;
};

type CartState = {
  items: CartItem[];
  totalItems: number;
  totalAmount: number;
  isOpen: boolean;
};

type CartAction =
  | { type: 'ADD_ITEM'; payload: CartItem }
  | { type: 'REMOVE_ITEM'; payload: { id: string } }
  | { type: 'UPDATE_QUANTITY'; payload: { id: string; quantity: number } }
  | { type: 'CLEAR_CART' }
  | { type: 'TOGGLE_CART' };

const initialState: CartState = {
  items: [],
  totalItems: 0,
  totalAmount: 0,
  isOpen: false,
};

const calculateTotals = (items: CartItem[]) => {
  const totalItems = items.reduce((total, item) => total + item.quantity, 0);
  const totalAmount = items.reduce((total, item) => total + item.price * item.quantity, 0);
  return { totalItems, totalAmount };
};

const cartReducer = (state: CartState, action: CartAction): CartState => {
  switch (action.type) {
    case 'ADD_ITEM': {
      const existingItemIndex = state.items.findIndex((item) => item.id === action.payload.id);
      
      if (existingItemIndex > -1) {
        // Item exists, update quantity
        const updatedItems = [...state.items];
        updatedItems[existingItemIndex] = {
          ...updatedItems[existingItemIndex],
          quantity: updatedItems[existingItemIndex].quantity + action.payload.quantity,
        };
        
        const { totalItems, totalAmount } = calculateTotals(updatedItems);
        return {
          ...state,
          items: updatedItems,
          totalItems,
          totalAmount,
        };
      } else {
        // Add new item
        const updatedItems = [...state.items, action.payload];
        const { totalItems, totalAmount } = calculateTotals(updatedItems);
        return {
          ...state,
          items: updatedItems,
          totalItems,
          totalAmount,
        };
      }
    }
    
    case 'REMOVE_ITEM': {
      const updatedItems = state.items.filter((item) => item.id !== action.payload.id);
      const { totalItems, totalAmount } = calculateTotals(updatedItems);
      return {
        ...state,
        items: updatedItems,
        totalItems,
        totalAmount,
      };
    }
    
    case 'UPDATE_QUANTITY': {
      const { id, quantity } = action.payload;
      if (quantity <= 0) {
        // Remove item if quantity is 0 or negative
        return cartReducer(state, { type: 'REMOVE_ITEM', payload: { id } });
      }
      
      const updatedItems = state.items.map((item) =>
        item.id === id ? { ...item, quantity } : item
      );
      
      const { totalItems, totalAmount } = calculateTotals(updatedItems);
      return {
        ...state,
        items: updatedItems,
        totalItems,
        totalAmount,
      };
    }
    
    case 'CLEAR_CART':
      return {
        ...state,
        items: [],
        totalItems: 0,
        totalAmount: 0,
      };
      
    case 'TOGGLE_CART':
      return {
        ...state,
        isOpen: !state.isOpen,
      };
      
    default:
      return state;
  }
};

type CartContextType = {
  state: CartState;
  addItem: (item: Omit<CartItem, 'quantity'>, quantity?: number) => void;
  removeItem: (id: string) => void;
  updateQuantity: (id: string, quantity: number) => void;
  clearCart: () => void;
  toggleCart: () => void;
};

export const CartContext = createContext<CartContextType | undefined>(undefined);

export const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(cartReducer, initialState, () => {
    // Load cart from localStorage if available
    if (typeof window !== 'undefined') {
      const savedCart = localStorage.getItem('cart');
      if (savedCart) {
        try {
          const parsedCart = JSON.parse(savedCart) as CartState;
          return parsedCart;
        } catch (error) {
          console.error('Failed to parse cart from localStorage:', error);
        }
      }
    }
    return initialState;
  });
  
  // Save cart to localStorage whenever it changes
  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('cart', JSON.stringify(state));
    }
  }, [state]);
  
  const addItem = (item: Omit<CartItem, 'quantity'>, quantity = 1) => {
    dispatch({
      type: 'ADD_ITEM',
      payload: { ...item, quantity },
    });
  };
  
  const removeItem = (id: string) => {
    dispatch({
      type: 'REMOVE_ITEM',
      payload: { id },
    });
  };
  
  const updateQuantity = (id: string, quantity: number) => {
    dispatch({
      type: 'UPDATE_QUANTITY',
      payload: { id, quantity },
    });
  };
  
  const clearCart = () => {
    dispatch({ type: 'CLEAR_CART' });
  };
  
  const toggleCart = () => {
    dispatch({ type: 'TOGGLE_CART' });
  };
  
  return (
    <CartContext.Provider
      value={{
        state,
        addItem,
        removeItem,
        updateQuantity,
        clearCart,
        toggleCart,
      }}
    >
      {children}
    </CartContext.Provider>
  );
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\contexts\wishlist-context.tsx -----

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { Product } from '@/data/products';

// --- Type Definitions ---
interface WishlistContextType {
  wishlistItems: Product[];
  isInWishlist: (productId: string) => boolean;
  addToWishlist: (product: Product) => void;
  removeFromWishlist: (productId: string) => void;
  toggleWishlist: (product: Product) => void;
  clearWishlist: () => void;
  wishlistCount: number;
}

const WishlistContext = createContext<WishlistContextType | undefined>(undefined);

interface WishlistProviderProps {
  children: ReactNode;
}

const WishlistProvider: React.FC<WishlistProviderProps> = ({ children }) => {
  const [wishlistItems, setWishlistItems] = useState<Product[]>([]);

  // Load wishlist from localStorage on mount
  useEffect(() => {
    const savedWishlist = localStorage.getItem('crystal-wishlist');
    if (savedWishlist) {
      try {
        const parsedWishlist = JSON.parse(savedWishlist);
        setWishlistItems(parsedWishlist);
      } catch (error) {
        console.error('Error loading wishlist from localStorage:', error);
        setWishlistItems([]);
      }
    }
  }, []);

  // Save wishlist to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem('crystal-wishlist', JSON.stringify(wishlistItems));
  }, [wishlistItems]);

  const isInWishlist = (productId: string): boolean => {
    return wishlistItems.some(item => item.id === productId);
  };

  const addToWishlist = (product: Product): void => {
    if (!isInWishlist(product.id)) {
      setWishlistItems(prev => [...prev, product]);
    }
  };

  const removeFromWishlist = (productId: string): void => {
    setWishlistItems(prev => prev.filter(item => item.id !== productId));
  };

  const toggleWishlist = (product: Product): void => {
    if (isInWishlist(product.id)) {
      removeFromWishlist(product.id);
    } else {
      addToWishlist(product);
    }
  };

  const clearWishlist = (): void => {
    setWishlistItems([]);
  };

  const value: WishlistContextType = {
    wishlistItems,
    isInWishlist,
    addToWishlist,
    removeFromWishlist,
    toggleWishlist,
    clearWishlist,
    wishlistCount: wishlistItems.length,
  };

  return (
    <WishlistContext.Provider value={value}>
      {children}
    </WishlistContext.Provider>
  );
};

// Export the context for use in hooks
export { WishlistContext };
export default WishlistProvider;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\data\products.ts -----

import healingCrystalsImg from '@/assets/healing-crystals.jpg';
import naturalCrystalsImg from '@/assets/natural-crystals.jpg';
import crystalBraceletsImg from '@/assets/crystal-bracelets.jpg';
import crystalTreesImg from '@/assets/crystal-trees.jpg';
import crystalKitsImg from '@/assets/crystal-kits.jpg';
import crystalBottlesImg from '@/assets/crystal-bottles.jpg';
import tumbledStonesImg from '@/assets/tumbled-stones.jpg';

export interface Product {
  id: string;
  name: string;
  price: number;
  originalPrice: number | null;
  image: string;
  rating: number;
  reviewCount: number;
  category: 'bracelet' | 'rudraksh' | 'frames' | 'anklet' | 'pyramid' | 'tower-and-tumbles' | 'raw-stones' | 'selenite-plates' | 'geode' | 'mala' | 'hangers' | 'tumble-set' | 'trees';
  sizes: number[];
  inStock: boolean;
  featured: boolean;
  description: string;
  benefits: string[];
}

export const products: Product[] = [];

export const categories = [
  { id: 'all', name: 'All Products', count: 0 },
  { id: 'bracelet', name: 'Bracelet', count: 0 },
  { id: 'rudraksh', name: 'Rudraksh', count: 0 },
  { id: 'frames', name: 'Frames', count: 0 },
  { id: 'anklet', name: 'Anklet', count: 0 },
  { id: 'pyramid', name: 'Pyramid', count: 0 },
  { id: 'tower-and-tumbles', name: 'Tower and Tumbles', count: 0 },
  { id: 'raw-stones', name: 'Raw Stones', count: 0 },
  { id: 'selenite-plates', name: 'Selenite Plates', count: 0 },
  { id: 'geode', name: 'Geode', count: 0 },
  { id: 'mala', name: 'Mala', count: 0 },
  { id: 'hangers', name: 'Hangers', count: 0 },
  { id: 'tumble-set', name: 'Tumble Set', count: 0 },
  { id: 'trees', name: 'Trees', count: 0 }
];


export const getFeaturedProducts = (): Product[] => {
  return products.filter(product => product.featured);
};

export const getProductsByCategory = (category: string): Product[] => {
  if (category === 'all') return products;
  return products.filter(product => product.category === category);
};


----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\hooks\use-mobile.tsx -----

import * as React from "react";

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined);

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\hooks\useAuth.ts -----

import { useContext } from 'react';
import { AuthContext } from '@/contexts/auth-context-exports';

/**
 * Custom hook to access the authentication context.
 * Provides user data, session, auth status, and auth functions.
 */
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\hooks\useAuthForm.ts -----

 

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\hooks\useCart.ts -----

import { useContext } from 'react';
import { CartContext } from '@/contexts/cart-context';

export const useCart = () => {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\hooks\useCollections.ts -----

import { useState, useEffect } from 'react';

export interface Collection {
  id: string;
  name: string;
  slug: string;
  description: string;
  image: string;
  is_featured: boolean;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  productCount: number;
  colors: string[];
  priceRange: string;
}

// Collections data - manually managed
const collections: Collection[] = [
  {
    id: 'healing-crystals',
    name: 'Healing Crystals',
    slug: 'healing-crystals',
    description: 'Powerful stones for physical and emotional healing',
    image: '/src/assets/healing-crystals.jpg',
    is_featured: true,
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    productCount: 24,
    colors: ['Purple', 'Pink', 'Clear'],
    priceRange: 'â‚¹15 - â‚¹120'
  },
  {
    id: 'natural-crystals',
    name: 'Natural Crystals',
    slug: 'natural-crystals',
    description: 'Raw, unpolished crystals in their natural form',
    image: '/src/assets/natural-crystals.jpg',
    is_featured: false,
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    productCount: 18,
    colors: ['Green', 'Blue', 'White'],
    priceRange: 'â‚¹25 - â‚¹200'
  },
  {
    id: 'tumbled-stones',
    name: 'Tumbled Stones',
    slug: 'tumbled-stones',
    description: 'Smooth, polished stones perfect for meditation',
    image: '/src/assets/tumbled-stones.jpg',
    is_featured: true,
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    productCount: 32,
    colors: ['Mixed', 'Rainbow'],
    priceRange: 'â‚¹8 - â‚¹45'
  },
  {
    id: 'crystal-trees',
    name: 'Crystal Trees',
    slug: 'crystal-trees',
    description: 'Beautiful decorative crystal formations',
    image: '/src/assets/crystal-trees.jpg',
    is_featured: false,
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    productCount: 12,
    colors: ['Green', 'Pink', 'Clear'],
    priceRange: 'â‚¹35 - â‚¹150'
  },
  {
    id: 'crystal-bracelets',
    name: 'Crystal Bracelets',
    slug: 'crystal-bracelets',
    description: 'Wearable crystal jewelry for daily energy',
    image: '/src/assets/crystal-bracelets.jpg',
    is_featured: true,
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    productCount: 28,
    colors: ['Mixed', 'Purple', 'Rose'],
    priceRange: 'â‚¹20 - â‚¹80'
  },
  {
    id: 'crystal-kits',
    name: 'Crystal Kits',
    slug: 'crystal-kits',
    description: 'Curated sets for specific intentions',
    image: '/src/assets/crystal-kits.jpg',
    is_featured: false,
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    productCount: 15,
    colors: ['Mixed'],
    priceRange: 'â‚¹45 - â‚¹180'
  },
  {
    id: 'crystal-bottles',
    name: 'Crystal Bottles',
    slug: 'crystal-bottles',
    description: 'Infused water bottles with crystal energy',
    image: '/src/assets/crystal-bottles.jpg',
    is_featured: false,
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    productCount: 8,
    colors: ['Clear', 'Blue', 'Pink'],
    priceRange: 'â‚¹30 - â‚¹95'
  }
];

export const useCollections = () => {
  const [collectionsData, setCollectionsData] = useState<Collection[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadCollections = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Simulate a small delay for better UX
        await new Promise(resolve => setTimeout(resolve, 200));
        
        setCollectionsData(collections);
      } catch (err) {
        console.error('Error loading collections:', err);
        setError('Failed to load collections');
        setCollectionsData([]);
      } finally {
        setLoading(false);
      }
    };

    loadCollections();
  }, []);

  return { collections: collectionsData, loading, error };
};

export const useCollection = (id: string) => {
  const [collection, setCollection] = useState<Collection | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadCollection = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Simulate a small delay for better UX
        await new Promise(resolve => setTimeout(resolve, 150));
        
        const foundCollection = collections.find(c => c.id === id);
        setCollection(foundCollection || null);
      } catch (err) {
        console.error('Error loading collection:', err);
        setError('Failed to load collection');
        setCollection(null);
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      loadCollection();
    }
  }, [id]);

  return { collection, loading, error };
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\hooks\useLenis.ts -----

import { useEffect, useRef } from 'react';
import Lenis from 'lenis';

export const useLenis = () => {
  const lenisRef = useRef<Lenis | null>(null);

  useEffect(() => {
    // Initialize Lenis if not already initialized
    if (!lenisRef.current) {
      lenisRef.current = new Lenis({
        duration: 1.2,
        easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
        direction: 'vertical',
        gestureDirection: 'vertical',
        smooth: true,
        mouseMultiplier: 1,
        smoothTouch: false,
        touchMultiplier: 2,
        infinite: false,
      });
    }

    // Animation frame loop
    function raf(time: number) {
      lenisRef.current?.raf(time);
      requestAnimationFrame(raf);
    }

    requestAnimationFrame(raf);

    // Cleanup
    return () => {
      if (lenisRef.current) {
        lenisRef.current.destroy();
        lenisRef.current = null;
      }
    };
  }, []);

  return {
    lenis: lenisRef.current,
    scrollTo: (target: string | number | HTMLElement, options?: Record<string, unknown>) => {
      lenisRef.current?.scrollTo(target, options);
    },
    stop: () => {
      lenisRef.current?.stop();
    },
    start: () => {
      lenisRef.current?.start();
    },
    destroy: () => {
      lenisRef.current?.destroy();
      lenisRef.current = null;
    },
  };
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\hooks\useProducts.ts -----

import { useState, useEffect } from 'react';
import { products, getFeaturedProducts, type Product } from '@/data/products';

export const useProducts = () => {
  const [productsData, setProductsData] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadProducts = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Simulate a small delay for better UX
        await new Promise(resolve => setTimeout(resolve, 300));
        
        setProductsData(products);
      } catch (err) {
        console.error('Error loading products:', err);
        setError('Failed to load products');
        setProductsData([]);
      } finally {
        setLoading(false);
      }
    };

    loadProducts();
  }, []);

  return { products: productsData, loading, error };
};

export const useFeaturedProducts = () => {
  const [productsData, setProductsData] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadFeaturedProducts = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Simulate a small delay for better UX
        await new Promise(resolve => setTimeout(resolve, 200));
        
        const featuredProducts = getFeaturedProducts();
        setProductsData(featuredProducts);
      } catch (err) {
        console.error('Error loading featured products:', err);
        setError('Failed to load featured products');
        setProductsData([]);
      } finally {
        setLoading(false);
      }
    };

    loadFeaturedProducts();
  }, []);

  return { products: productsData, loading, error };
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\hooks\useScrollAnimation.ts -----

import { useEffect, useRef } from 'react';

interface UseScrollAnimationOptions {
  threshold?: number;
  rootMargin?: string;
  triggerOnce?: boolean;
}

export const useScrollAnimation = (options: UseScrollAnimationOptions = {}) => {
  const {
    threshold = 0.1,
    rootMargin = '0px 0px -50px 0px',
    triggerOnce = true
  } = options;

  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const element = ref.current;
    if (!element) return;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-fade-in-up');
            if (triggerOnce) {
              observer.unobserve(entry.target);
            }
          } else if (!triggerOnce) {
            entry.target.classList.remove('animate-fade-in-up');
          }
        });
      },
      {
        threshold,
        rootMargin,
      }
    );

    observer.observe(element);

    return () => {
      observer.unobserve(element);
    };
  }, [threshold, rootMargin, triggerOnce]);

  return ref;
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\hooks\useWishlist.ts -----

import { useContext } from 'react';
import { WishlistContext } from '@/contexts/wishlist-context';

/**
 * Custom hook to access the wishlist context.
 * Provides wishlist data and functions for managing wishlist items.
 */
export const useWishlist = () => {
  const context = useContext(WishlistContext);
  if (context === undefined) {
    throw new Error('useWishlist must be used within a WishlistProvider');
  }
  return context;
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\lib\supabaseClient.ts -----

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || "https://omkxduypxjpfwiwxsbrf.supabase.co";
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9ta3hkdXlweGpwZndpd3hzYnJmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgxNzQ3OTksImV4cCI6MjA3Mzc1MDc5OX0.2nTdy8VlM-W4J12VQ7cqcyLK-mGqaFni9V9bfTfCirI";


if (!supabaseUrl) {
  throw new Error("Missing VITE_SUPABASE_URL in .env file");
}

if (!supabaseAnonKey) {
  throw new Error("Missing VITE_SUPABASE_ANON_KEY in .env file");
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  }
});


----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\lib\uploadthing-client.ts -----

import { supabase } from './supabaseClient';
import { v4 as uuidv4 } from 'uuid';

export const uploadFile = async (file: File): Promise<string> => {
  if (!file) {
    throw new Error('No file provided for upload.');
  }

  // Validate file type
  if (!file.type.startsWith('image/')) {
    throw new Error('Only image files are allowed.');
  }

  // Validate file size (4MB limit)
  if (file.size > 4 * 1024 * 1024) {
    throw new Error('File size exceeds 4MB limit.');
  }

  const fileExtension = file.name.split('.').pop() || 'jpg';
  const fileName = `${uuidv4()}.${fileExtension}`;
  const filePath = `public/${fileName}`;

  try {
    // First, try to upload to Supabase Storage
    console.log('Attempting to upload to Supabase Storage...');
    
    const { data, error } = await supabase.storage
      .from('product-images')
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: false,
      });

    if (error) {
      console.warn('Supabase Storage upload failed:', error);
      throw error;
    }

    // Get the public URL for the uploaded file
    const { data: publicUrlData } = supabase.storage
      .from('product-images')
      .getPublicUrl(data.path);

    if (!publicUrlData?.publicUrl) {
      throw new Error('Could not get public URL for the uploaded file.');
    }

    console.log('Successfully uploaded to Supabase Storage:', publicUrlData.publicUrl);
    return publicUrlData.publicUrl;

  } catch (supabaseError) {
    console.warn('Supabase Storage failed, falling back to base64:', supabaseError);
    
    // Fallback to base64 data URL if Supabase Storage fails
    try {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => {
          const result = e.target?.result;
          if (typeof result === 'string') {
            console.log('Using base64 fallback for image upload');
            resolve(result);
          } else {
            reject(new Error('Failed to read file as data URL.'));
          }
        };
        reader.onerror = (error) => {
          reject(new Error(`File reading error: ${error}`));
        };
        reader.readAsDataURL(file);
      });
    } catch (fallbackError) {
      console.error('Both Supabase Storage and base64 fallback failed:', fallbackError);
      throw new Error('File upload failed. Please try again or contact support.');
    }
  }
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\lib\uploadthing.ts -----

// UploadThing configuration for Vite/React
export const uploadFile = async (file: File): Promise<string> => {
  const formData = new FormData();
  formData.append('file', file);

  try {
    // For now, we'll use a simple file upload to a public folder
    // In production, you'd integrate with UploadThing or another service
    const response = await fetch('/api/upload', {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      throw new Error('Upload failed');
    }

    const data = await response.json();
    return data.url;
  } catch (error) {
    console.error('Upload error:', error);
    throw error;
  }
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\lib\utils.ts -----

import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\AdminDashboard.tsx -----

import React, { useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { useIsAdmin } from '@/utils/admin';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Shield, Package, BarChart3, Users, Settings } from 'lucide-react';
import ProductForm from '@/components/ProductForm';
import ProductList from '@/components/ProductList';
import ProductStats from '@/components/ProductStats';
import Header from '@/components/Header';
import Footer from '@/components/Footer';

const AdminDashboard: React.FC = () => {
  const { user, signOut } = useAuth();
  const isAdmin = useIsAdmin();
  const [activeTab, setActiveTab] = useState('products');

  // Redirect if not admin
  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd] flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-center text-red-600">Access Denied</CardTitle>
            <CardDescription className="text-center">
              You don't have permission to access this page.
            </CardDescription>
          </CardHeader>
          <CardContent className="text-center">
            <Button onClick={() => window.history.back()}>
              Go Back
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
      <Header />
      
      {/* Admin Header - with top padding to account for fixed header */}
      <div className="bg-gradient-to-r from-[#b094b2] to-[#d1bccd] shadow-lg pt-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-8">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-black/20 rounded-full">
                <Shield className="h-8 w-8 text-black" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-black">Admin Dashboard</h1>
                <p className="text-black text-lg">Welcome back, {user?.first_name}</p>
              </div>
            </div>
            <Button 
              variant="outline" 
              onClick={signOut}
              className="bg-white/20 text-white border-white/30 hover:bg-white/30 hover:text-white"
            >
              Sign Out
            </Button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <Alert className="mb-6">
          <Shield className="h-4 w-4" />
          <AlertDescription>
            You are logged in as an administrator. You can manage products, view statistics, and configure settings.
          </AlertDescription>
        </Alert>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="products" className="flex items-center space-x-2">
              <Package className="h-4 w-4" />
              <span>Products</span>
            </TabsTrigger>
            <TabsTrigger value="add-product" className="flex items-center space-x-2">
              <Package className="h-4 w-4" />
              <span>Add Product</span>
            </TabsTrigger>
            <TabsTrigger value="stats" className="flex items-center space-x-2">
              <BarChart3 className="h-4 w-4" />
              <span>Statistics</span>
            </TabsTrigger>
            <TabsTrigger value="settings" className="flex items-center space-x-2">
              <Settings className="h-4 w-4" />
              <span>Settings</span>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="products" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Product Management</CardTitle>
                <CardDescription>
                  View, edit, and manage all products in your store.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <ProductList />
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="add-product" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Add New Product</CardTitle>
                <CardDescription>
                  Create a new product for your crystal store.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <ProductForm />
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="stats" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Store Statistics</CardTitle>
                <CardDescription>
                  Overview of your store's performance and metrics.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <ProductStats />
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="settings" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Admin Settings</CardTitle>
                <CardDescription>
                  Configure your admin account and store settings.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="p-4 border rounded-lg">
                    <h3 className="font-semibold mb-2">Account Information</h3>
                    <p className="text-sm text-gray-600">
                      <strong>Name:</strong> {user?.first_name} {user?.last_name}
                    </p>
                    <p className="text-sm text-gray-600">
                      <strong>Email:</strong> {user?.email}
                    </p>
                    <p className="text-sm text-gray-600">
                      <strong>Role:</strong> Administrator
                    </p>
                  </div>
                  
                  <div className="p-4 border rounded-lg">
                    <h3 className="font-semibold mb-2">Store Categories</h3>
                    <p className="text-sm text-gray-600">
                      Your store currently supports 13 product categories: Bracelet, Rudraksh, Frames, Anklet, Pyramid, Tower and Tumbles, Raw Stones, Selenite Plates, Geode, Mala, Hangers, Tumble Set, and Trees.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
      
      
    </div>
  );
};

export default AdminDashboard;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\CheckoutSimple.tsx -----

import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { useCart } from '@/hooks/useCart';
import { useAuth } from '@/hooks/useAuth';
import { toast } from '@/components/ui/sonner';
import { OrderService } from '@/services/orderService';
import { Package } from 'lucide-react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';

export default function CheckoutSimple() {
  const { state: cartState, clearCart } = useCart();
  const { items: cart, totalAmount } = cartState;
  const { user } = useAuth();
  const navigate = useNavigate();

  // Simple form state
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    address: '',
    city: '',
    state: '',
    zipCode: '',
  });

  const [paymentMethod, setPaymentMethod] = useState<'card' | 'cod'>('card');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const isSubmittingRef = useRef(false);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      isSubmittingRef.current = false;
    };
  }, []);

  // Simple input handler
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Form submission with proper debouncing
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Prevent multiple submissions
    if (isSubmittingRef.current) {
      return;
    }
    
    if (!user) {
      toast.error("Authentication Required", {
        description: "Please sign in to create an order.",
      });
      return;
    }
    
    setIsSubmitting(true);
    isSubmittingRef.current = true;
    
    try {
      
      const orderData = {
        items: cart.map(item => ({
          id: item.id,
          name: item.name,
          price: item.price,
          quantity: item.quantity,
          image: item.image,
        })),
        totalAmount: totalAmount,
        shippingAddress: {
          firstName: formData.firstName,
          lastName: formData.lastName,
          email: formData.email,
          address: formData.address,
          city: formData.city,
          state: formData.state,
          zipCode: formData.zipCode,
        },
        paymentMethod: paymentMethod,
      };
      
      const order = await OrderService.createOrder(orderData, user.id);
      
      clearCart();
      toast.success("Order Created!", {
        description: `Your order #${order.id} has been created successfully.`,
      });
      
      navigate(`/order-confirmation/${order.id}`);
    } catch (error) {
      console.error('âŒ Order creation failed:', error);
      toast.error("Order Failed", {
        description: `Failed to create order: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
    } finally {
      setIsSubmitting(false);
      isSubmittingRef.current = false;
    }
  };

  if (cart.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
        <Header />
        <div className="pt-32 pb-20">
          <div className="container mx-auto px-4">
            <div className="max-w-2xl mx-auto text-center">
              <h1 className="text-3xl font-cormorant-light text-gray-900 mb-4">Your Cart is Empty</h1>
              <p className="text-gray-600 mb-8">Add some items to your cart first.</p>
            </div>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
      <Header />
      
      <div className="pt-32 pb-20">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            <h1 className="text-4xl font-cormorant-light text-gray-900 mb-8 text-center">Simple Checkout</h1>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Simple Form */}
              <Card className="shadow-lg">
                <CardHeader>
                  <CardTitle className="text-2xl font-cormorant-light text-gray-900">Shipping Information</CardTitle>
                  <CardDescription>Enter your delivery details</CardDescription>
                </CardHeader>
                <CardContent>
                  <form onSubmit={handleSubmit} className="space-y-4">
                    <div>
                      <Label htmlFor="firstName">First Name *</Label>
                      <Input
                        id="firstName"
                        name="firstName"
                        value={formData.firstName}
                        onChange={handleInputChange}
                        placeholder="Enter your first name"
                        required
                      />
                    </div>

                    <div>
                      <Label htmlFor="lastName">Last Name *</Label>
                      <Input
                        id="lastName"
                        name="lastName"
                        value={formData.lastName}
                        onChange={handleInputChange}
                        placeholder="Enter your last name"
                        required
                      />
                    </div>

                    <div>
                      <Label htmlFor="email">Email *</Label>
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        placeholder="Enter your email"
                        required
                      />
                    </div>

                    <div>
                      <Label htmlFor="address">Street Address *</Label>
                      <Input
                        id="address"
                        name="address"
                        value={formData.address}
                        onChange={handleInputChange}
                        placeholder="Enter your street address"
                        required
                      />
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="city">City *</Label>
                        <Input
                          id="city"
                          name="city"
                          value={formData.city}
                          onChange={handleInputChange}
                          placeholder="Enter city"
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="state">State *</Label>
                        <Input
                          id="state"
                          name="state"
                          value={formData.state}
                          onChange={handleInputChange}
                          placeholder="Enter state"
                          required
                        />
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="zipCode">ZIP Code *</Label>
                      <Input
                        id="zipCode"
                        name="zipCode"
                        value={formData.zipCode}
                        onChange={handleInputChange}
                        placeholder="Enter ZIP code"
                        required
                      />
                    </div>

                    <div className="pt-4">
                      <Label className="text-lg font-semibold">Payment Method</Label>
                      <RadioGroup
                        value={paymentMethod}
                        onValueChange={(value: 'card' | 'cod') => setPaymentMethod(value)}
                        className="mt-2 space-y-2"
                      >
                        <div className="flex items-center space-x-2 rounded-lg border p-4">
                          <RadioGroupItem value="card" id="card" />
                          <Label htmlFor="card" className="flex-1 cursor-pointer">
                            Credit/Debit Card (Online Payment)
                            <p className="text-sm text-muted-foreground">Secure payment via our gateway.</p>
                          </Label>
                        </div>
                        <div className="flex items-center space-x-2 rounded-lg border p-4">
                          <RadioGroupItem value="cod" id="cod" />
                          <Label htmlFor="cod" className="flex-1 cursor-pointer">
                            Cash on Delivery (COD)
                            <p className="text-sm text-muted-foreground">Pay with cash when your order arrives.</p>
                          </Label>
                        </div>
                      </RadioGroup>
                    </div>

                    <Button
                      type="submit"
                      className="w-full bg-[#b094b2] hover:bg-[#b094b2]/80 mt-6"
                      disabled={isSubmitting}
                    >
                      {isSubmitting ? (
                        <div className="flex items-center">
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          Creating Order...
                        </div>
                      ) : (
                        <div className="flex items-center">
                          <Package className="w-4 h-4 mr-2" />
                          order now
                        </div>
                      )}
                    </Button>
                  </form>
                </CardContent>
              </Card>

              {/* Order Summary */}
              <Card className="shadow-lg">
                <CardHeader>
                  <CardTitle className="text-xl font-cormorant-light text-gray-900">Order Summary</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {cart.map((item) => (
                      <div key={item.id} className="flex items-center space-x-3">
                        <img
                          src={item.image}
                          alt={item.name}
                          className="w-12 h-12 object-cover rounded-lg"
                        />
                        <div className="flex-1">
                          <p className="font-medium">{item.name}</p>
                          <p className="text-sm text-gray-600">Qty: {item.quantity}</p>
                        </div>
                        <p className="font-medium">â‚¹{(item.price * item.quantity).toFixed(2)}</p>
                      </div>
                    ))}
                    
                    <div className="border-t pt-4">
                      <div className="flex justify-between text-lg font-semibold">
                        <span>Total</span>
                        <span>â‚¹{totalAmount.toFixed(2)}</span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>

      {/* <Footer /> */}
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\CollectionDetail.tsx -----

import { useState } from 'react';
import { useParams } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { 
  Search, 
  Filter, 
  Grid, 
  List, 
  Star, 
  Heart, 
  ShoppingCart, 
  ArrowLeft,
  ChevronDown,
  SortAsc
} from 'lucide-react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { useCart } from '@/hooks/useCart';
import SizeDisplay from '@/components/SizeDisplay';

const CollectionDetail = () => {
  const { id } = useParams();
  const { addItem } = useCart();
  const [searchTerm, setSearchTerm] = useState('');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sortBy, setSortBy] = useState('name');
  const [priceRange, setPriceRange] = useState([0, 10000]);
  const [wishlist, setWishlist] = useState<string[]>([]);

  // Mock collection data - in real app, this would come from API
  const collectionData = {
    'healing-crystals': {
      name: 'Healing Crystals',
      description: 'Powerful stones for physical and emotional healing. Each crystal is carefully selected for its unique energy properties and healing benefits.',
      image: '/src/assets/healing-crystals.jpg',
      bannerImage: '/src/assets/healing-crystals.jpg',
      productCount: 24,
      featured: true,
      colors: ['Purple', 'Pink', 'Clear', 'Green', 'Blue'],
      priceRange: 'â‚¹15 - â‚¹120',
      category: 'Healing',
      benefits: ['Emotional Healing', 'Physical Wellness', 'Energy Balance', 'Stress Relief']
    },
    'natural-crystals': {
      name: 'Natural Crystals',
      description: 'Raw, unpolished crystals in their natural form. These stones maintain their original energy and connection to the earth.',
      image: '/src/assets/natural-crystals.jpg',
      bannerImage: '/src/assets/natural-crystals.jpg',
      productCount: 18,
      featured: false,
      colors: ['Green', 'Blue', 'White', 'Brown', 'Gray'],
      priceRange: 'â‚¹25 - â‚¹200',
      category: 'Natural',
      benefits: ['Grounding', 'Natural Energy', 'Earth Connection', 'Raw Power']
    }
  };

  const collection = collectionData[id as keyof typeof collectionData] || collectionData['healing-crystals'];

  // Mock products data
  const products = [
    {
      id: '1',
      name: 'Amethyst Cluster',
      price: 45,
      originalPrice: 60,
      image: '/src/assets/healing-crystals.jpg',
      rating: 4.8,
      reviewCount: 124,
      colors: ['Purple'],
      size: 'Medium',
      inStock: true,
      featured: true,
      description: 'Beautiful amethyst cluster for meditation and healing'
    },
    {
      id: '2',
      name: 'Rose Quartz Heart',
      price: 25,
      originalPrice: 35,
      image: '/src/assets/healing-crystals.jpg',
      rating: 4.9,
      reviewCount: 89,
      colors: ['Pink'],
      size: 'Small',
      inStock: true,
      featured: false,
      description: 'Gentle rose quartz heart for love and compassion'
    },
    {
      id: '3',
      name: 'Clear Quartz Point',
      price: 35,
      originalPrice: 45,
      image: '/src/assets/healing-crystals.jpg',
      rating: 4.7,
      reviewCount: 156,
      colors: ['Clear'],
      size: 'Large',
      inStock: true,
      featured: true,
      description: 'Powerful clear quartz point for energy amplification'
    },
    {
      id: '4',
      name: 'Green Aventurine',
      price: 20,
      originalPrice: 30,
      image: '/src/assets/healing-crystals.jpg',
      rating: 4.6,
      reviewCount: 67,
      colors: ['Green'],
      size: 'Medium',
      inStock: false,
      featured: false,
      description: 'Lucky green aventurine for prosperity and growth'
    }
  ];

  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesPrice = product.price >= priceRange[0] && product.price <= priceRange[1];
    
    return matchesSearch && matchesPrice;
  });

  const sortedProducts = [...filteredProducts].sort((a, b) => {
    switch (sortBy) {
      case 'price-low':
        return a.price - b.price;
      case 'price-high':
        return b.price - a.price;
      case 'rating':
        return b.rating - a.rating;
      case 'name':
      default:
        return a.name.localeCompare(b.name);
    }
  });

  const toggleWishlist = (productId: string) => {
    setWishlist(prev => 
      prev.includes(productId) 
        ? prev.filter(id => id !== productId)
        : [...prev, productId]
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      {/* Collection Banner */}
      <section className="relative h-96 overflow-hidden">
        <img
          src={collection.bannerImage}
          alt={collection.name}
          className="w-full h-full object-cover"
        />
        <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent" />
        <div className="absolute bottom-8 left-8 right-8">
          <div className="max-w-4xl">
            <Button
              variant="ghost"
              className="text-white hover:text-white mb-4 p-0"
              onClick={() => window.history.back()}
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Collections
            </Button>
            <h1 className="text-4xl md:text-6xl font-cormorant-light text-white mb-4 drop-shadow-lg">
              {collection.name}
            </h1>
            <p className="text-xl text-gray-200 mb-6 max-w-2xl">
              {collection.description}
            </p>
            <div className="flex flex-wrap gap-4">
              <Badge variant="secondary" className="bg-white/20 text-white border-white/30">
                {collection.productCount} Products
              </Badge>
              <Badge variant="secondary" className="bg-white/20 text-white border-white/30">
                {collection.priceRange}
              </Badge>
              <Badge variant="secondary" className="bg-white/20 text-white border-white/30">
                {collection.category}
              </Badge>
            </div>
          </div>
        </div>
      </section>

      {/* Collection Benefits */}
      <section className="py-12 bg-white">
        <div className="container mx-auto px-6">
          <div className="max-w-4xl mx-auto">
            <h2 className="text-3xl font-cormorant-light text-center mb-8 text-gray-900">
              Collection Benefits
            </h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
              {collection.benefits.map((benefit, index) => (
                <div key={index} className="text-center p-4 bg-gradient-to-br from-[#d1bccd] to-[#d1bccd] rounded-xl">
                  <div className="w-12 h-12 bg-gradient-to-r from-[#b094b2] to-[#d1bccd] rounded-full flex items-center justify-center mx-auto mb-3">
                    <Star className="w-6 h-6 text-white" />
                  </div>
                  <h3 className="font-semibold text-gray-800">{benefit}</h3>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Products Section */}
      <section className="py-16">
        <div className="container mx-auto px-6">
          {/* Filters and Search */}
          <div className="mb-8">
            <div className="flex flex-col lg:flex-row gap-6 mb-6">
              {/* Search */}
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <Input
                  type="text"
                  placeholder="Search products..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 pr-4 py-3 rounded-full border-gray-200 focus:border-[#b094b2] focus:ring-[#b094b2]"
                />
              </div>
              
              {/* Sort */}
              <div className="flex gap-4">
                <div className="relative">
                  <select
                    value={sortBy}
                    onChange={(e) => setSortBy(e.target.value)}
                    className="appearance-none bg-white border border-gray-200 rounded-full px-4 py-3 pr-8 focus:border-[#b094b2] focus:ring-[#b094b2]"
                  >
                    <option value="name">Sort by Name</option>
                    <option value="price-low">Price: Low to High</option>
                    <option value="price-high">Price: High to Low</option>
                    <option value="rating">Highest Rated</option>
                  </select>
                  <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400 pointer-events-none" />
                </div>
                
                {/* View Mode */}
                <div className="flex gap-2">
                  <Button
                    variant={viewMode === 'grid' ? 'default' : 'outline'}
                    size="icon"
                    onClick={() => setViewMode('grid')}
                    className="rounded-full"
                  >
                    <Grid className="w-4 h-4" />
                  </Button>
                  <Button
                    variant={viewMode === 'list' ? 'default' : 'outline'}
                    size="icon"
                    onClick={() => setViewMode('list')}
                    className="rounded-full"
                  >
                    <List className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </div>

          </div>

          {/* Products Grid/List */}
          <div className={`grid gap-6 ${
            viewMode === 'grid' 
              ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' 
              : 'grid-cols-1 max-w-4xl mx-auto'
          }`}>
            {sortedProducts.map((product) => (
              <div
                key={product.id}
                className={`group bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 overflow-hidden border border-gray-100 ${
                  viewMode === 'list' ? 'flex' : ''
                }`}
              >
                <div className={`relative overflow-hidden ${
                  viewMode === 'list' ? 'w-1/3 h-48' : 'h-64'
                }`}>
                  <img
                    src={product.image}
                    alt={product.name}
                    className="w-full h-full object-cover transition-all duration-500 group-hover:scale-110"
                    loading="lazy"
                  />
                  {product.featured && (
                    <div className="absolute top-4 left-4">
                      <Badge className="bg-gradient-to-r from-[#b094b2] to-[#d1bccd] text-white">
                        Featured
                      </Badge>
                    </div>
                  )}
                  {!product.inStock && (
                    <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
                      <Badge variant="destructive" className="text-lg px-4 py-2">
                        Out of Stock
                      </Badge>
                    </div>
                  )}
                  <div className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <Button
                      size="icon"
                      variant="ghost"
                      className="w-10 h-10 bg-white/90 hover:bg-white rounded-full"
                      onClick={() => toggleWishlist(product.id)}
                    >
                      <Heart className={`w-5 h-5 ${
                        wishlist.includes(product.id) ? 'fill-red-500 text-red-500' : 'text-gray-600'
                      }`} />
                    </Button>
                  </div>
                </div>
                
                <div className={`p-6 ${viewMode === 'list' ? 'flex-1' : ''}`}>
                  <div className="flex items-start justify-between mb-3">
                    <h3 className="text-xl font-bold text-gray-800 group-hover:text-[#b094b2] transition-colors duration-300">
                      {product.name}
                    </h3>
                    <div className="flex items-center text-sm text-gray-500">
                      <Star className="w-4 h-4 text-yellow-400 fill-current mr-1" />
                      {product.rating} ({product.reviewCount})
                    </div>
                  </div>
                  
                  <p className="text-gray-600 mb-4 text-sm leading-relaxed">
                    {product.description}
                  </p>
                  
                  <div className="space-y-2 mb-4 text-sm">
                    <div className="flex justify-between items-center">
                      <span className="text-gray-500">Sizes:</span>
                      <SizeDisplay sizes={product.sizes} variant="secondary" />
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-500">Colors:</span>
                      <span className="font-semibold text-gray-800">{product.colors.join(', ')}</span>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-2">
                      <span className="text-2xl font-bold text-gray-800">â‚¹{product.price}</span>
                      {product.originalPrice > product.price && (
                        <span className="text-lg text-gray-500 line-through">â‚¹{product.originalPrice}</span>
                      )}
                    </div>
                    {product.originalPrice > product.price && (
                      <Badge variant="destructive" className="text-xs">
                        Save â‚¹{product.originalPrice - product.price}
                      </Badge>
                    )}
                  </div>
                  
                  <Button
                    className="w-full bg-gradient-to-r from-[#b094b2] to-[#d1bccd] hover:from-[#b094b2]/80 hover:to-[#d1bccd]/80 text-white px-6 py-3 rounded-full font-medium tracking-wide transition-all duration-300 hover:shadow-lg hover:scale-105 transform disabled:opacity-50"
                    disabled={!product.inStock}
                    onClick={() => {
                      if (product.inStock) {
                        addItem({
                          id: product.id,
                          name: product.name,
                          price: product.price,
                          image: product.image
                        });
                      }
                    }}
                  >
                    <ShoppingCart className="w-4 h-4 mr-2" />
                    {product.inStock ? 'Add to Cart' : 'Out of Stock'}
                  </Button>
                </div>
              </div>
            ))}
          </div>

          {sortedProducts.length === 0 && (
            <div className="text-center py-16">
              <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                <Search className="w-12 h-12 text-gray-400" />
              </div>
              <h3 className="text-2xl font-bold text-gray-800 mb-4">No products found</h3>
              <p className="text-gray-600 mb-6">Try adjusting your search or filter criteria</p>
              <Button
                onClick={() => {
                  setSearchTerm('');
                  setSelectedColors([]);
                  setPriceRange([0, 500]);
                }}
                className="bg-gradient-to-r from-[#b094b2] to-[#d1bccd] hover:from-[#b094b2]/80 hover:to-[#d1bccd]/80 text-white px-8 py-3 rounded-full"
              >
                Clear Filters
              </Button>
            </div>
          )}
        </div>
      </section>

      <Footer />
    </div>
  );
};

export default CollectionDetail;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\Collections.tsx -----

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Search, Filter, Grid, List } from 'lucide-react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { useCollections, type Collection } from '@/hooks/useCollections';

const Collections = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const { collections, loading, error } = useCollections();

  const mockCollections = [
    {
      id: 'healing-crystals',
      name: 'Healing Crystals',
      description: 'Powerful stones for physical and emotional healing',
      image: '/src/assets/healing-crystals.jpg',
      productCount: 24,
      featured: true,
      colors: ['Purple', 'Pink', 'Clear'],
      priceRange: 'â‚¹15 - â‚¹120'
    },
    {
      id: 'natural-crystals',
      name: 'Natural Crystals',
      description: 'Raw, unpolished crystals in their natural form',
      image: '/src/assets/natural-crystals.jpg',
      productCount: 18,
      featured: false,
      colors: ['Green', 'Blue', 'White'],
      priceRange: 'â‚¹25 - â‚¹200'
    },
    {
      id: 'tumbled-stones',
      name: 'Tumbled Stones',
      description: 'Smooth, polished stones perfect for meditation',
      image: '/src/assets/tumbled-stones.jpg',
      productCount: 32,
      featured: true,
      colors: ['Mixed', 'Rainbow'],
      priceRange: 'â‚¹8 - â‚¹45'
    },
    {
      id: 'crystal-trees',
      name: 'Crystal Trees',
      description: 'Beautiful decorative crystal formations',
      image: '/src/assets/crystal-trees.jpg',
      productCount: 12,
      featured: false,
      colors: ['Green', 'Pink', 'Clear'],
      priceRange: 'â‚¹35 - â‚¹150'
    },
    {
      id: 'crystal-bracelets',
      name: 'Crystal Bracelets',
      description: 'Wearable crystal jewelry for daily energy',
      image: '/src/assets/crystal-bracelets.jpg',
      productCount: 28,
      featured: true,
      colors: ['Mixed', 'Purple', 'Rose'],
      priceRange: 'â‚¹20 - â‚¹80'
    },
    {
      id: 'crystal-kits',
      name: 'Crystal Kits',
      description: 'Curated sets for specific intentions',
      image: '/src/assets/crystal-kits.jpg',
      productCount: 15,
      featured: false,
      colors: ['Mixed'],
      priceRange: 'â‚¹45 - â‚¹180'
    },
    {
      id: 'crystal-bottles',
      name: 'Crystal Bottles',
      description: 'Infused water bottles with crystal energy',
      image: '/src/assets/crystal-bottles.jpg',
      productCount: 8,
      featured: false,
      colors: ['Clear', 'Blue', 'Pink'],
      priceRange: 'â‚¹30 - â‚¹95'
    }
  ];

  const categories = [
    { id: 'all', name: 'All Collections', count: collections.length },
    { id: 'featured', name: 'Featured', count: collections.filter(c => c.featured).length },
    { id: 'healing', name: 'Healing', count: collections.filter(c => c.name.toLowerCase().includes('healing')).length },
    { id: 'jewelry', name: 'Jewelry', count: collections.filter(c => c.name.toLowerCase().includes('bracelet')).length },
    { id: 'decorative', name: 'Decorative', count: collections.filter(c => c.name.toLowerCase().includes('tree') || c.name.toLowerCase().includes('bottle')).length }
  ];

  const filteredCollections = collections.filter(collection => {
    const matchesSearch = collection.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (collection.description && collection.description.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesCategory = selectedCategory === 'all' || 
                           (selectedCategory === 'featured' && collection.is_featured) ||
                           (selectedCategory === 'healing' && collection.name.toLowerCase().includes('healing')) ||
                           (selectedCategory === 'jewelry' && collection.name.toLowerCase().includes('bracelet')) ||
                           (selectedCategory === 'decorative' && (collection.name.toLowerCase().includes('tree') || collection.name.toLowerCase().includes('bottle')));
    
    return matchesSearch && matchesCategory;
  });

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="pt-32 pb-20">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center py-20">
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-[#b094b2] mx-auto mb-4"></div>
              <h2 className="text-xl font-semibold text-gray-800 mb-2">Loading Collections</h2>
              <p className="text-gray-600">Please wait while we fetch the latest collections...</p>
            </div>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="pt-32 pb-20">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center py-20">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Search className="w-8 h-8 text-red-600" />
              </div>
              <h2 className="text-xl font-semibold text-gray-800 mb-2">Error Loading Collections</h2>
              <p className="text-gray-600 mb-4">{error}</p>
              <Button onClick={() => window.location.reload()} className="bg-[#b094b2] hover:bg-[#b094b2]/80">
                Try Again
              </Button>
            </div>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      {/* Hero Section */}
      <section className="bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd] py-20">
        <div className="container mx-auto px-6">
          <div className="text-center max-w-4xl mx-auto">
            <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-cormorant-light mb-4 md:mb-6 bg-gradient-to-r from-gray-900 via-[#8a6b8d] to-gray-900 bg-clip-text text-transparent">
              Crystal Collections
            </h1>
            <p className="text-base sm:text-lg md:text-xl text-gray-600 mb-6 md:mb-8 leading-relaxed px-4">
              Discover our carefully curated collections of healing crystals, each chosen for their unique energy and beauty.
            </p>
            
            {/* Search and Filter Bar */}
            <div className="flex flex-col md:flex-row gap-4 max-w-2xl mx-auto">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <Input
                  type="text"
                  placeholder="Search collections..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 pr-4 py-3 rounded-full border-gray-200 focus:border-[#b094b2] focus:ring-[#b094b2]"
                />
              </div>
              <Button
                variant="outline"
                className="px-6 py-3 rounded-full border-gray-200 hover:border-[#b094b2] hover:text-[#b094b2]"
              >
                <Filter className="w-4 h-4 mr-2" />
                Filter
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Collections Grid */}
      <section className="py-16">
        <div className="container mx-auto px-6">
          {/* Category Filter */}
          <div className="flex flex-wrap justify-center gap-2 md:gap-4 mb-8 md:mb-12">
            {categories.map((category) => (
              <Button
                key={category.id}
                variant={selectedCategory === category.id ? "default" : "outline"}
                onClick={() => setSelectedCategory(category.id)}
                className={`px-3 md:px-6 py-2 rounded-full transition-all duration-300 text-xs md:text-sm ${
                  selectedCategory === category.id
                    ? 'bg-gradient-to-r from-[#b094b2] to-[#d1bccd] text-white shadow-lg'
                    : 'border-gray-200 hover:border-[#b094b2] hover:text-[#b094b2]'
                }`}
              >
                {category.name} ({category.count})
              </Button>
            ))}
          </div>

          {/* View Mode Toggle */}
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 md:mb-8 gap-4">
            <p className="text-sm md:text-base text-gray-600">
              Showing {filteredCollections.length} collection{filteredCollections.length !== 1 ? 's' : ''}
            </p>
            <div className="flex gap-2">
              <Button
                variant={viewMode === 'grid' ? 'default' : 'outline'}
                size="icon"
                onClick={() => setViewMode('grid')}
                className="rounded-full w-10 h-10"
              >
                <Grid className="w-4 h-4" />
              </Button>
              <Button
                variant={viewMode === 'list' ? 'default' : 'outline'}
                size="icon"
                onClick={() => setViewMode('list')}
                className="rounded-full w-10 h-10"
              >
                <List className="w-4 h-4" />
              </Button>
            </div>
          </div>

          {/* Collections Grid/List */}
          <div className={`grid gap-6 md:gap-8 ${
            viewMode === 'grid' 
              ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' 
              : 'grid-cols-1 max-w-4xl mx-auto'
          }`}>
            {filteredCollections.map((collection) => (
              <div
                key={collection.id}
                className={`group bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 overflow-hidden border border-gray-100 ${
                  viewMode === 'list' ? 'flex' : ''
                }`}
              >
                <div className={`relative overflow-hidden ${
                  viewMode === 'list' ? 'w-1/3 h-48 sm:h-56' : 'h-48 sm:h-56 md:h-64'
                }`}>
                  <img
                    src={collection.image}
                    alt={collection.name}
                    className="w-full h-full object-cover transition-all duration-500 group-hover:scale-110"
                    loading="lazy"
                  />
                  {collection.featured && (
                    <div className="absolute top-4 left-4">
                      <span className="px-3 py-1 text-xs font-bold bg-gradient-to-r from-[#b094b2] to-[#d1bccd] text-white rounded-full">
                        Featured
                      </span>
                    </div>
                  )}
                  <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                </div>
                
                <div className={`p-4 md:p-6 ${viewMode === 'list' ? 'flex-1' : ''}`}>
                  <h3 className="text-lg md:text-xl lg:text-2xl font-bold mb-3 text-gray-800 group-hover:text-[#b094b2] transition-colors duration-300">
                    {collection.name}
                  </h3>
                  <p className="text-sm md:text-base text-gray-600 mb-4 leading-relaxed">
                    {collection.description}
                  </p>
                  
                  <div className="space-y-3 mb-6">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-500">Products:</span>
                      <span className="font-semibold text-gray-800">{collection.productCount} items</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-500">Price Range:</span>
                      <span className="font-semibold text-gray-800">{collection.priceRange}</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-500">Colors:</span>
                      <span className="font-semibold text-gray-800">{collection.colors.join(', ')}</span>
                    </div>
                  </div>
                  
                  <Button
                    className="w-full bg-gradient-to-r from-[#b094b2] to-[#d1bccd] hover:from-[#b094b2]/80 hover:to-[#d1bccd]/80 text-white px-4 md:px-6 py-2 md:py-3 rounded-full font-medium tracking-wide transition-all duration-300 hover:shadow-lg hover:scale-105 transform text-sm md:text-base"
                    onClick={() => window.location.href = `/collections/${collection.id}`}
                  >
                    Explore Collection
                  </Button>
                </div>
              </div>
            ))}
          </div>

          {filteredCollections.length === 0 && (
            <div className="text-center py-16">
              <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                <Search className="w-12 h-12 text-gray-400" />
              </div>
              <h3 className="text-2xl font-bold text-gray-800 mb-4">No collections found</h3>
              <p className="text-gray-600 mb-6">Try adjusting your search or filter criteria</p>
              <Button
                onClick={() => {
                  setSearchTerm('');
                  setSelectedCategory('all');
                }}
                className="bg-gradient-to-r from-[#b094b2] to-[#d1bccd] hover:from-[#b094b2]/80 hover:to-[#d1bccd]/80 text-white px-8 py-3 rounded-full"
              >
                Clear Filters
              </Button>
            </div>
          )}
        </div>
      </section>

      {/* <Footer /> */}
    </div>
  );
};

export default Collections;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\ConfirmEmail.tsx -----

import { useLocation, Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { MailCheck } from 'lucide-react';
import { supabase } from '@/lib/supabaseClient';

const ConfirmEmail = () => {
  const location = useLocation();
  // Get the email address passed from the sign-up page
  const email = location.state?.email || 'your email address';

  const handleResendEmail = async () => {
    try {
      const { error } = await supabase.auth.resend({
        type: 'signup',
        email: email
      });
      
      if (error) {
        console.error('Error resending email:', error);
        alert('Failed to resend email. Please try again.');
      } else {
        alert('A new confirmation email has been sent!');
      }
    } catch (error) {
      console.error('Error resending email:', error);
      alert('Failed to resend email. Please try again.');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
      <div className="pt-40 pb-20">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-md mx-auto">
            <Card className="shadow-xl border-0">
              <CardHeader className="text-center pb-6">
                <div className="w-16 h-16 bg-gradient-to-r from-[#b094b2] to-[#d1bccd] rounded-full flex items-center justify-center mx-auto mb-4">
                  <MailCheck className="w-8 h-8 text-white" />
                </div>
                <CardTitle className="text-3xl font-cormorant-light text-gray-900">
                  Confirm Your Email
                </CardTitle>
                <CardDescription className="text-lg text-gray-600 pt-2">
                  We've sent a confirmation link to your inbox.
                </CardDescription>
              </CardHeader>
              
              <CardContent className="text-center">
                <p className="text-gray-700 mb-6">
                  Please check your email at{' '}
                  <strong className="text-[#b094b2]">{email}</strong> and click the link to activate your account.
                </p>
                <p className="text-sm text-gray-500 mb-8">
                  If you don't see the email, please check your spam folder.
                </p>
                <div className="space-y-4">
                   <Button
                    onClick={handleResendEmail}
                    className="w-full bg-[#b094b2] hover:bg-[#b094b2]/80 text-white py-3 rounded-lg font-medium"
                  >
                    Resend Confirmation Email
                  </Button>
                  <Button variant="outline" asChild className="w-full">
                    <Link to="/">Go to Homepage</Link>
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ConfirmEmail;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\ForgotPassword.tsx -----

import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Mail, ArrowLeft } from 'lucide-react';
import AlertMessage from '@/components/AlertMessage';
import { supabase } from '@/lib/supabaseClient';

const ForgotPassword = () => {
  const [email, setEmail] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');
    setMessage('');

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`,
      });

      if (error) {
        setError(error.message);
      } else {
        setMessage('Password reset email sent! Check your inbox.');
      }
    } catch (err) {
      setError('An unexpected error occurred. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
      
      <div className="pt-32 pb-20">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-md mx-auto">
            <div className="text-center mb-8">
              <Link 
                to="/signin" 
                className="inline-flex items-center text-[#b094b2] hover:text-[#b094b2]/80 mb-6"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back to Sign In
              </Link>
              <h1 className="text-3xl font-cormorant-light text-gray-900 mb-2">
                Forgot Password?
              </h1>
              <p className="text-gray-600">
                Enter your email address and we'll send you a link to reset your password
              </p>
            </div>

            <Card className="shadow-xl border-0">
              <CardHeader className="text-center pb-6">
                <CardTitle className="text-2xl font-cormorant-light text-gray-900">
                  Reset Password
                </CardTitle>
                <CardDescription>
                  We'll send you a secure link to reset your password
                </CardDescription>
              </CardHeader>
              
              <CardContent>
                {error && (
                  <AlertMessage
                    type="error"
                    title="Error"
                    message={error}
                    onClose={() => setError('')}
                  />
                )}
                
                {message && (
                  <AlertMessage
                    type="success"
                    title="Email Sent!"
                    message={message}
                    onClose={() => setMessage('')}
                  />
                )}

                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="space-y-2">
                    <Label htmlFor="email" className="text-sm font-medium text-gray-700">
                      Email Address
                    </Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        placeholder="Enter your email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="pl-10 pr-4 py-3 rounded-lg border-gray-200 focus:border-[#b094b2] focus:ring-[#b094b2]"
                        required
                      />
                    </div>
                  </div>

                  <Button
                    type="submit"
                    className="w-full bg-[#b094b2] hover:bg-[#b094b2]/80 text-white py-3 rounded-lg font-medium disabled:opacity-50"
                    disabled={isLoading}
                  >
                    {isLoading ? 'Sending...' : 'Send Reset Link'}
                  </Button>
                </form>

                <div className="mt-6 text-center">
                  <p className="text-sm text-gray-600">
                    Remember your password?{' '}
                    <Link 
                      to="/signin" 
                      className="text-[#b094b2] hover:text-[#b094b2]/80 font-medium"
                    >
                      Sign in here
                    </Link>
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

    </div>
  );
};

export default ForgotPassword;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\Index.tsx -----

import HeroSection from '@/components/HeroSection';
import ShippingBanner from '@/components/ShippingBanner';
import MissionSection from '@/components/MissionSection';
import ProductCategories from '@/components/ProductCategories';
import FeaturedProducts from '@/components/FeaturedProducts';
import AboutPreview from '@/components/AboutPreview';
import CoreValues from '@/components/CoreValues';
import TestimonialsSection from '@/components/TestimonialsSection';
import CallToAction from '@/components/CallToAction';
import BlogSection from '@/components/BlogSection';
import ContactInfo from '@/components/ContactInfo';
import NewsletterSection from '@/components/NewsletterSection';

const Index = () => {
  return (
    <div className="min-h-screen">
      <main>
        <HeroSection />
        <MissionSection />
        <ProductCategories />
        <FeaturedProducts />
        <AboutPreview />
        <CoreValues />
        <ShippingBanner />
        <TestimonialsSection />
        <CallToAction 
          title="Ready to Begin Your Crystal Journey?"
          subtitle="Discover the perfect crystals for your spiritual growth and healing. Start with our curated collections or let our experts guide you."
          buttonText="Shop Now"
          buttonLink="#shop"
          variant="primary"
        />
        <BlogSection />
        <ContactInfo />
        <NewsletterSection />
      </main>
    </div>
  );
};

export default Index;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\LoginTest.tsx -----

 

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\NotFound.tsx -----

import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error("404 Error: User attempted to access non-existent route:", location.pathname);
  }, [location.pathname]);

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="mb-4 text-4xl font-bold">404</h1>
        <p className="mb-4 text-xl text-gray-600">Oops! Page not found</p>
        <a href="/" className="text-blue-500 underline hover:text-blue-700">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\OrderConfirmation.tsx -----

// src/pages/OrderConfirmation.tsx

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { useAuth } from '@/hooks/useAuth';
import { toast } from '@/components/ui/sonner';
import { CheckCircle, Package, CalendarDays, Home, ShoppingBag, MapPin, CreditCard, Truck } from 'lucide-react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { OrderService } from '@/services/orderService';
import { Order } from '@/types/order';

// Helper function to calculate an estimated delivery date
const getDeliveryEstimate = () => {
  const addBusinessDays = (startDate: Date, days: number) => {
    let currentDate = new Date(startDate);
    let added = 0;
    while (added < days) {
      currentDate.setDate(currentDate.getDate() + 1);
      const dayOfWeek = currentDate.getDay();
      if (dayOfWeek !== 0 && dayOfWeek !== 6) { // 0=Sun, 6=Sat
        added++;
      }
    }
    return currentDate;
  };

  const today = new Date();
  const estimatedArrivalStart = addBusinessDays(today, 5);
  const estimatedArrivalEnd = addBusinessDays(today, 7);
  
  const formatDate = (date: Date) => date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });

  return `${formatDate(estimatedArrivalStart)} - ${formatDate(estimatedArrivalEnd)}`;
};

export default function OrderConfirmation() {
  const { orderId } = useParams<{ orderId: string }>();
  const navigate = useNavigate();
  const { user } = useAuth();
  const [order, setOrder] = useState<Order | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchOrder = async () => {
      if (!orderId) {
        navigate('/');
        return;
      }
      try {
        const orderData = await OrderService.getOrderById(orderId);
        if (orderData) {
          setOrder(orderData);
        } else {
          toast.error("Order Not Found", {
            description: "The order you're looking for doesn't exist.",
          });
          navigate('/');
        }
      } catch (error) {
        console.error('Error fetching order:', error);
        toast.error("Error", {
          description: "Failed to load order details.",
        });
        navigate('/');
      } finally {
        setLoading(false);
      }
    };

    fetchOrder();
  }, [orderId, navigate]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-ethereal">
        <Header />
        <div className="pt-32 pb-20 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-mystic mx-auto mb-4"></div>
            <h2 className="text-xl font-semibold text-gray-800">Loading Your Confirmation...</h2>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  if (!order) {
    // This state is shown if fetching fails or the order is not found
    return (
      <div className="min-h-screen bg-gradient-ethereal">
        <Header />
        <div className="pt-32 pb-20 container mx-auto text-center">
             <h1 className="text-3xl font-cormorant-light text-gray-900 mb-4">Order Not Found</h1>
             <p className="text-gray-600 mb-8">We couldn't find the order you were looking for.</p>
             <Link to="/"><Button>Go Home</Button></Link>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-ethereal">
      <Header />
      <div className="pt-32 pb-20">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-4xl mx-auto">
            
            {/* --- Success Header --- */}
            <div className="text-center mb-12 animate-fade-in-up">
              <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
              <h1 className="text-4xl sm:text-5xl font-cormorant-light text-gray-900 mb-3">
                Thank you for your order, {order.shippingAddress.firstName}!
              </h1>
              <p className="text-lg text-gray-600">
                Your crystal journey is about to begin. A confirmation has been sent to your email.
              </p>
            </div>

            {/* --- Key Order Info --- */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8 animate-fade-in-up" style={{ animationDelay: '0.2s' }}>
              <div className="bg-white/70 backdrop-blur-sm border border-gray-200 rounded-xl p-4 flex items-center gap-4">
                <div className="bg-lilac/20 p-3 rounded-full">
                  <Package className="w-6 h-6 text-mystic" />
                </div>
                <div>
                  <p className="text-sm text-gray-600">Order Number</p>
                  <p className="font-semibold font-mono text-gray-800">#{order.orderNumber}</p>
                </div>
              </div>
              <div className="bg-white/70 backdrop-blur-sm border border-gray-200 rounded-xl p-4 flex items-center gap-4">
                <div className="bg-lilac/20 p-3 rounded-full">
                  <CalendarDays className="w-6 h-6 text-mystic" />
                </div>
                <div>
                  <p className="text-sm text-gray-600">Estimated Delivery</p>
                  <p className="font-semibold text-gray-800">{getDeliveryEstimate()}</p>
                </div>
              </div>
            </div>

            {/* --- Main Order Receipt Card --- */}
            <Card className="shadow-xl border-0 animate-fade-in-up" style={{ animationDelay: '0.4s' }}>
              <CardHeader className="p-6">
                <CardTitle className="text-2xl font-cormorant-light text-gray-900">Order Summary</CardTitle>
              </CardHeader>
              <CardContent className="p-6 pt-0">
                {/* Items List */}
                <div className="space-y-4 mb-6">
                  {order.items.map((item) => (
                    <div key={item.id} className="flex items-center space-x-4">
                      <img
                        src={item.image}
                        alt={item.name}
                        className="w-16 h-16 object-cover rounded-lg shadow-sm"
                      />
                      <div className="flex-1 min-w-0">
                        <h3 className="font-semibold text-gray-800 truncate">{item.name}</h3>
                        <p className="text-sm text-gray-600">Quantity: {item.quantity}</p>
                      </div>
                      <div className="text-right">
                        <p className="font-medium text-gray-800">â‚¹{(item.price * item.quantity).toFixed(2)}</p>
                      </div>
                    </div>
                  ))}
                </div>

                <Separator className="my-6"/>

                {/* Totals */}
                <div className="space-y-2 mb-6 text-gray-700">
                   <div className="flex justify-between">
                    <p>Subtotal</p>
                    <p className="font-medium">â‚¹{order.totalAmount.toFixed(2)}</p>
                  </div>
                  <div className="flex justify-between">
                    <p>Shipping</p>
                    <p className="font-medium">Free</p>
                  </div>
                  <Separator className="my-2"/>
                  <div className="flex justify-between text-lg font-bold text-gray-900">
                    <p>Total</p>
                    <p>â‚¹{order.totalAmount.toFixed(2)}</p>
                  </div>
                </div>

                <Separator className="my-6"/>

                {/* Shipping and Payment Details */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-semibold mb-3 text-gray-800">Shipping To</h4>
                    <div className="flex items-start space-x-3 text-gray-600 text-sm">
                      <MapPin className="w-5 h-5 text-gray-400 mt-0.5 flex-shrink-0" />
                      <div>
                        <p className="font-medium">{order.shippingAddress.firstName} {order.shippingAddress.lastName}</p>
                        <p>{order.shippingAddress.address}</p>
                        <p>{order.shippingAddress.city}, {order.shippingAddress.state} {order.shippingAddress.zipCode}</p>
                      </div>
                    </div>
                  </div>
                   <div>
                    <h4 className="font-semibold mb-3 text-gray-800">Payment</h4>
                    <div className="flex items-center space-x-3 text-gray-600 text-sm">
                       {order.paymentMethod === 'cod' ? (
                          <>
                            <Truck className="w-5 h-5 text-gray-400" />
                            <p>Cash on Delivery (COD)</p>
                          </>
                        ) : (
                          <>
                            <CreditCard className="w-5 h-5 text-gray-400" />
                            <p>Paid by Card</p>
                          </>
                        )}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* --- Bottom Actions --- */}
            <div className="mt-12 text-center space-y-4 sm:space-y-0 sm:flex sm:justify-center sm:space-x-4 animate-fade-in-up" style={{ animationDelay: '0.6s' }}>
                <Link to="/shop">
                    <Button size="lg" className="w-full sm:w-auto bg-mystic hover:bg-mystic/90">
                        <ShoppingBag className="w-5 h-5 mr-2" />
                        Continue Shopping
                    </Button>
                </Link>
                <Link to="/profile">
                    <Button size="lg" variant="outline" className="w-full sm:w-auto">
                        <Package className="w-5 h-5 mr-2" />
                        View My Orders
                    </Button>
                </Link>
            </div>
            
          </div>
        </div>
      </div>
      <Footer />
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\OrderTest.tsx -----

 

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\OurStory.tsx -----

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Heart, 
  Users, 
  Globe, 
  Award, 
  Leaf, 
  Sparkles,
  ArrowRight,
  Quote,
  Star
} from 'lucide-react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { useScrollAnimation } from '@/hooks/useScrollAnimation';
import healingCrystalsImg from '@/assets/healing-crystals.jpg';
import naturalCrystalsImg from '@/assets/natural-crystals.jpg';
import crystalKitsImg from '@/assets/crystal-kits.jpg';
import crystalBraceletsImg from '@/assets/crystal-bracelets.jpg';
import crystalTreesImg from '@/assets/crystal-trees.jpg';
import crystalBottlesImg from '@/assets/crystal-bottles.jpg';

const OurStory = () => {
  const heroRef = useScrollAnimation({ threshold: 0.1 });
  const missionRef = useScrollAnimation({ threshold: 0.2 });
  const valuesRef = useScrollAnimation({ threshold: 0.2 });
  const timelineRef = useScrollAnimation({ threshold: 0.2 });
  const teamRef = useScrollAnimation({ threshold: 0.2 });
  const testimonialsRef = useScrollAnimation({ threshold: 0.2 });
  const ctaRef = useScrollAnimation({ threshold: 0.2 });

  const values = [
    {
      icon: Heart,
      title: 'Ethical Sourcing',
      description: 'We work directly with miners and suppliers who share our commitment to fair labor practices and environmental responsibility.',
      color: 'from-red-500 to-[#d1bccd]'
    },
    {
      icon: Leaf,
      title: 'Environmental Care',
      description: 'Every crystal is sourced with respect for the earth, ensuring minimal environmental impact and sustainable practices.',
      color: 'from-green-500 to-emerald-500'
    },
    {
      icon: Users,
      title: 'Community Impact',
      description: 'We support local communities where our crystals are sourced, contributing to education and economic development.',
      color: 'from-blue-500 to-cyan-500'
    },
    {
      icon: Award,
      title: 'Quality Assurance',
      description: 'Each crystal undergoes careful inspection and energetic cleansing before reaching our customers.',
      color: 'from-[#b094b2] to-violet-500'
    }
  ];

  const milestones = [
    {
      year: '2018',
      title: 'The Beginning',
      description: 'Founded with a vision to make healing crystals accessible while maintaining the highest ethical standards.',
      image: healingCrystalsImg
    },
    {
      year: '2019',
      title: 'First Partnership',
      description: 'Established our first direct partnership with ethical crystal miners in Brazil and Madagascar.',
      image: naturalCrystalsImg
    },
    {
      year: '2020',
      title: 'Digital Transformation',
      description: 'Launched our online platform, making healing crystals accessible to customers worldwide.',
      image: crystalKitsImg
    },
    {
      year: '2021',
      title: 'Community Growth',
      description: 'Reached 10,000 customers and launched our educational crystal care program.',
      image: crystalBraceletsImg
    },
    {
      year: '2022',
      title: 'Sustainability Initiative',
      description: 'Introduced our carbon-neutral shipping program and sustainable packaging solutions.',
      image: crystalTreesImg
    },
    {
      year: '2023',
      title: 'Global Expansion',
      description: 'Expanded to serve customers in 25 countries with localized crystal collections.',
      image: crystalBottlesImg
    }
  ];

  const team = [
    {
      name: 'Sarah Chen',
      role: 'Founder & CEO',
      image: healingCrystalsImg,
      bio: 'A certified crystal therapist with 15 years of experience in energy healing and crystal therapy.',
      specialties: ['Crystal Therapy', 'Energy Healing', 'Ethical Sourcing']
    },
    {
      name: 'Marcus Rodriguez',
      role: 'Head of Sourcing',
      image: naturalCrystalsImg,
      bio: 'Geologist and ethical sourcing expert who ensures every crystal meets our high standards.',
      specialties: ['Geology', 'Ethical Sourcing', 'Quality Control']
    },
    {
      name: 'Priya Sharma',
      role: 'Customer Experience Director',
      image: crystalKitsImg,
      bio: 'Dedicated to creating meaningful connections between customers and their healing journey.',
      specialties: ['Customer Care', 'Crystal Education', 'Community Building']
    }
  ];

  const testimonials = [
    {
      text: "Adhyatma has transformed my spiritual practice. The quality and energy of their crystals is unmatched.",
      author: "Emma Thompson",
      location: "Melbourne, Australia",
      rating: 5
    },
    {
      text: "I love knowing that my crystals are ethically sourced. It makes my practice feel more authentic.",
      author: "David Kim",
      location: "Seoul, South Korea",
      rating: 5
    },
    {
      text: "The educational resources and customer service are exceptional. I've learned so much about crystal care.",
      author: "Maria Santos",
      location: "Barcelona, Spain",
      rating: 5
    }
  ];

  return (
    <div className="min-h-screen bg-white">
      <Header />
      
      {/* Hero Section */}
      <section className="relative pt-32 pb-24 bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd] overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-[#b094b2]/20 via-transparent to-[#d1bccd]/20" />
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
          <div className="max-w-5xl mx-auto text-center scroll-animate" ref={heroRef}>
            <div className="mb-8">
              <Badge className="bg-gradient-to-r from-[#b094b2] to-[#d1bccd] text-white px-6 py-2 text-lg mb-6 inline-block">
                Our Story
              </Badge>
            </div>
            <h1 className="text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-cormorant-light mb-6 md:mb-8 bg-gradient-to-r from-gray-900 via-[#8a6b8d] to-gray-900 bg-clip-text text-transparent leading-tight">
              The Journey of Adhyatma
            </h1>
            <p className="text-lg sm:text-xl md:text-2xl text-gray-600 leading-relaxed mb-8 md:mb-12 max-w-4xl mx-auto px-4 font-lato-light">
              Born from a deep reverence for the earth's gifts and a commitment to ethical practices, 
              Adhyatma has grown into a trusted source for healing crystals worldwide.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center items-center px-4">
              <Button 
                className="px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg bg-gradient-to-r from-[#b094b2] to-[#d1bccd] hover:from-[#b094b2]/80 hover:to-[#d1bccd]/80 text-white rounded-full font-arial tracking-wide transition-all duration-300 hover:shadow-xl hover:scale-105 transform w-full sm:w-auto"
                onClick={() => {
                  const shopSection = document.getElementById('shop');
                  if (shopSection) {
                    shopSection.scrollIntoView({ behavior: 'smooth' });
                  }
                }}
              >
                Explore Our Crystals
                <ArrowRight className="w-4 h-4 sm:w-5 sm:h-5 ml-2" />
              </Button>
              <Button 
                variant="outline"
                className="px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg border-2 border-[#b094b2] text-[#b094b2] hover:bg-[#b094b2] hover:text-white rounded-full font-arial tracking-wide transition-all duration-300 w-full sm:w-auto"
              >
                Watch Our Story
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Our Mission */}
      <section className="py-16 sm:py-20 lg:py-24 bg-white">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-6xl mx-auto">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 lg:gap-16 items-center">
              <div className="scroll-animate" ref={missionRef}>
                <h2 className="text-3xl sm:text-4xl md:text-5xl font-cormorant-light mb-6 md:mb-8 text-gray-900 leading-tight">
                  Our Mission
                </h2>
                <div className="space-y-4 sm:space-y-6 text-base sm:text-lg text-gray-600 leading-relaxed font-lato-light">
                  <p>
                    At <span className="font-semibold text-[#b094b2]">Adhyatma</span>, we believe that crystals are more than beautiful objects â€“ 
                    they are powerful tools for healing, growth, and transformation. Our mission is to make these 
                    ancient gifts accessible to everyone while maintaining the highest standards of ethical sourcing 
                    and environmental responsibility.
                  </p>
                  <p>
                    We work directly with miners and suppliers who share our values, ensuring that every crystal 
                    in our collection is sourced with respect for both the earth and the communities that call 
                    these places home.
                  </p>
                  <p>
                    Through education, intention, and authentic connection, we empower individuals to align with 
                    their highest selves and walk the path of inner peace and purpose.
                  </p>
                </div>
              </div>
              <div className="scroll-animate" ref={missionRef}>
                <div className="relative">
                  <img 
                    src={healingCrystalsImg} 
                    alt="Our crystal collection" 
                    className="rounded-2xl shadow-2xl w-full h-96 object-cover"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-2xl" />
                  <div className="absolute bottom-6 left-6 text-white">
                    <h3 className="text-2xl font-bold mb-2">Ethically Sourced</h3>
                    <p className="text-lg">Every crystal tells a story</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Our Values */}
      <section className="py-16 sm:py-20 lg:py-24 bg-gradient-to-br from-gray-50 via-white to-[#d1bccd]">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 scroll-animate" ref={valuesRef}>
              <h2 className="text-3xl sm:text-4xl md:text-5xl font-cormorant-light mb-4 sm:mb-6 text-gray-900 leading-tight">
                Our Values
              </h2>
              <p className="text-lg sm:text-xl text-gray-600 max-w-3xl mx-auto px-4 font-lato-light">
                These core principles guide everything we do, from sourcing crystals to serving our customers.
              </p>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 sm:gap-8">
              {values.map((value, index) => (
                <div key={index} className="scroll-animate" ref={valuesRef}>
                  <div className="bg-white rounded-2xl p-6 sm:p-8 shadow-lg hover:shadow-2xl transition-all duration-500 text-center group h-full">
                    <div className={`w-14 h-14 sm:w-16 sm:h-16 bg-gradient-to-r ${value.color} rounded-full flex items-center justify-center mx-auto mb-4 sm:mb-6 group-hover:scale-110 transition-transform duration-300`}>
                      <value.icon className="w-7 h-7 sm:w-8 sm:h-8 text-white" />
                    </div>
                    <h3 className="text-lg sm:text-xl font-bold mb-3 sm:mb-4 text-gray-900 font-cormorant-light">{value.title}</h3>
                    <p className="text-sm sm:text-base text-gray-600 leading-relaxed font-lato-light">{value.description}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Timeline */}
      <section className="py-16 sm:py-20 lg:py-24 bg-white">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 scroll-animate" ref={timelineRef}>
              <h2 className="text-3xl sm:text-4xl md:text-5xl font-cormorant-light mb-4 sm:mb-6 text-gray-900 leading-tight">
                Our Journey
              </h2>
              <p className="text-lg sm:text-xl text-gray-600 max-w-3xl mx-auto px-4 font-lato-light">
                From humble beginnings to a global community of crystal lovers.
              </p>
            </div>
            <div className="space-y-8 sm:space-y-12">
              {milestones.map((milestone, index) => (
                <div key={index} className={`flex flex-col lg:flex-row gap-6 sm:gap-8 items-center ${index % 2 === 1 ? 'lg:flex-row-reverse' : ''}`}>
                  <div className="lg:w-1/2 scroll-animate" ref={timelineRef}>
                    <div className="bg-white rounded-2xl p-6 sm:p-8 shadow-lg hover:shadow-2xl transition-all duration-500 h-full">
                      <div className="flex flex-col sm:flex-row sm:items-center mb-4 gap-2 sm:gap-4">
                        <Badge className="bg-gradient-to-r from-[#b094b2] to-[#d1bccd] text-white px-3 sm:px-4 py-1 text-sm sm:text-lg w-fit">
                          {milestone.year}
                        </Badge>
                        <h3 className="text-xl sm:text-2xl font-bold text-gray-900 font-cormorant-light">{milestone.title}</h3>
                      </div>
                      <p className="text-gray-600 leading-relaxed text-base sm:text-lg font-lato-light">{milestone.description}</p>
                    </div>
                  </div>
                  <div className="lg:w-1/2 scroll-animate" ref={timelineRef}>
                    <img 
                      src={milestone.image} 
                      alt={milestone.title} 
                      className="rounded-2xl shadow-lg w-full h-48 sm:h-56 lg:h-64 object-cover hover:shadow-2xl transition-all duration-500"
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Team Section */}
      <section className="py-16 sm:py-20 lg:py-24 bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 scroll-animate" ref={teamRef}>
              <h2 className="text-3xl sm:text-4xl md:text-5xl font-cormorant-light mb-4 sm:mb-6 text-gray-900 leading-tight">
                Meet Our Team
              </h2>
              <p className="text-lg sm:text-xl text-gray-600 max-w-3xl mx-auto px-4 font-lato-light">
                The passionate individuals behind Adhyatma's mission.
              </p>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8">
              {team.map((member, index) => (
                <div key={index} className="scroll-animate" ref={teamRef}>
                  <div className="bg-white rounded-2xl p-6 sm:p-8 shadow-lg hover:shadow-2xl transition-all duration-500 text-center group h-full">
                    <div className="relative mb-4 sm:mb-6">
                      <img 
                        src={member.image} 
                        alt={member.name} 
                        className="w-24 h-24 sm:w-28 sm:h-28 lg:w-32 lg:h-32 rounded-full object-cover mx-auto shadow-lg group-hover:scale-105 transition-transform duration-300"
                      />
                      <div className="absolute inset-0 w-24 h-24 sm:w-28 sm:h-28 lg:w-32 lg:h-32 rounded-full bg-gradient-to-r from-[#b094b2]/30 to-[#d1bccd]/30 mx-auto blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                    </div>
                    <h3 className="text-xl sm:text-2xl font-bold mb-2 text-gray-900 font-cormorant-light">{member.name}</h3>
                    <p className="text-[#b094b2] font-semibold mb-3 sm:mb-4 text-sm sm:text-base font-madefor-medium">{member.role}</p>
                    <p className="text-gray-600 leading-relaxed mb-4 sm:mb-6 text-sm sm:text-base font-lato-light">{member.bio}</p>
                    <div className="flex flex-wrap justify-center gap-1 sm:gap-2">
                      {member.specialties.map((specialty, specIndex) => (
                        <Badge key={specIndex} variant="outline" className="text-xs px-2 py-1">
                          {specialty}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Testimonials */}
      <section className="py-16 sm:py-20 lg:py-24 bg-white">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 scroll-animate" ref={testimonialsRef}>
              <h2 className="text-3xl sm:text-4xl md:text-5xl font-cormorant-light mb-4 sm:mb-6 text-gray-900 leading-tight">
                What Our Community Says
              </h2>
              <p className="text-lg sm:text-xl text-gray-600 max-w-3xl mx-auto px-4 font-lato-light">
                Hear from the amazing people who have joined us on this journey.
              </p>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8">
              {testimonials.map((testimonial, index) => (
                <div key={index} className="scroll-animate" ref={testimonialsRef}>
                  <div className="bg-gradient-to-br from-[#d1bccd] to-[#d1bccd] rounded-2xl p-6 sm:p-8 shadow-lg hover:shadow-2xl transition-all duration-500 relative h-full">
                    <Quote className="w-6 h-6 sm:w-8 sm:h-8 text-[#d1bccd] absolute top-4 right-4 sm:top-6 sm:right-6" />
                    <div className="flex items-center mb-3 sm:mb-4">
                      {[...Array(testimonial.rating)].map((_, i) => (
                        <Star key={i} className="w-4 h-4 sm:w-5 sm:h-5 text-yellow-400 fill-current" />
                      ))}
                    </div>
                    <p className="text-gray-700 leading-relaxed mb-4 sm:mb-6 text-sm sm:text-base font-lato-light">
                      "{testimonial.text}"
                    </p>
                    <div>
                      <h4 className="font-bold text-gray-900 text-base sm:text-lg font-cormorant-light">{testimonial.author}</h4>
                      <p className="text-gray-600 text-sm sm:text-base font-lato-light">{testimonial.location}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Call to Action */}
      <section className="py-16 sm:py-20 lg:py-24 bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 text-white">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-4xl mx-auto text-center scroll-animate" ref={ctaRef}>
            <h2 className="text-3xl sm:text-4xl md:text-5xl font-cormorant-light mb-6 sm:mb-8 leading-tight">
              Join Our Community
            </h2>
            <p className="text-lg sm:text-xl text-gray-300 mb-8 sm:mb-12 leading-relaxed px-4 font-lato-light">
              Be part of a global community dedicated to healing, growth, and positive change. 
              Discover the perfect crystals for your journey.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center items-center px-4">
              <Button 
                className="px-8 sm:px-12 py-4 sm:py-6 text-lg sm:text-xl bg-gradient-to-r from-white to-gray-100 text-gray-900 hover:from-gray-100 hover:to-gray-200 rounded-full font-arial tracking-wide transition-all duration-500 hover:shadow-2xl hover:scale-105 transform w-full sm:w-auto"
                onClick={() => {
                  const shopSection = document.getElementById('shop');
                  if (shopSection) {
                    shopSection.scrollIntoView({ behavior: 'smooth' });
                  }
                }}
              >
                <Sparkles className="w-5 h-5 sm:w-6 sm:h-6 mr-2 sm:mr-3" />
                Start Your Journey
              </Button>
              <Button 
                variant="outline"
                className="px-8 sm:px-12 py-4 sm:py-6 text-lg sm:text-xl border-2 border-white/30 text-white hover:bg-white/10 hover:border-white/50 rounded-full font-arial tracking-wide backdrop-blur-sm w-full sm:w-auto"
                onClick={() => window.location.href = '/shop'}
              >
                Learn About Crystals
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* <Footer /> */}
    </div>
  );
};

export default OurStory;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\Profile.tsx -----

// src/pages/Profile.tsx

import React, { useState, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { User, Package, Heart, Settings, LogOut, Edit, Save, X } from 'lucide-react';
import { useAuth } from '@/hooks/useAuth';
import { useWishlist } from '@/hooks/useWishlist';
import { OrderService } from '@/services/orderService';
import ApiDebounceManager from '@/utils/apiDebounce';

// 2. Define a type for your order data
type Order = {
  id: string;
  orderNumber: string;
  created_at: string;
  status: 'Processing' | 'Shipped' | 'Delivered';
  total_amount: number;
  payment_method?: string;
  // You can add more fields here if you select them
};

const Profile = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState('profile');
  const { user, session, updateUser, signOut, isLoading } = useAuth();
  const { wishlistItems } = useWishlist();
  const navigate = useNavigate();

  // Add state for orders and loading status
  const [orders, setOrders] = useState<Order[]>([]);
  const [loadingOrders, setLoadingOrders] = useState(false);
  const [ordersLoaded, setOrdersLoaded] = useState(false);
  const isFetchingOrdersRef = useRef(false);

  const [profileData, setProfileData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    address: '',
    city: '',
    state: '',
    zipCode: '',
    joinDate: ''
  });
  
  useEffect(() => {
    if (user) {
      setProfileData({
        firstName: user.first_name || '',
        lastName: user.last_name || '',
        email: user.email || '',
        phone: user.phone || '',
        address: user.address || '',
        city: user.city || '',
        state: user.state || '',
        zipCode: user.zip_code || '',
        joinDate: user.updated_at ? new Date(user.updated_at).toLocaleDateString() : 'Recently joined'
      });
    }
  }, [user]);

  // Fetch orders when the 'orders' tab is active (with debouncing)
  useEffect(() => {
    if (activeTab === 'orders' && user && !ordersLoaded && !isFetchingOrdersRef.current) {
      const fetchOrders = async () => {
        isFetchingOrdersRef.current = true;
        setLoadingOrders(true);
        
        try {
          
          // Use debounced API call
          const userOrders = await ApiDebounceManager.debounce(
            `getUserOrders-${user.id}`,
            () => OrderService.getUserOrders(user.id),
            200
          );
          
          // Transform orders to match the expected format
          const transformedOrders: Order[] = userOrders.map(order => ({
            id: order.id,
            orderNumber: order.orderNumber,
            created_at: order.createdAt,
            status: order.status.charAt(0).toUpperCase() + order.status.slice(1) as 'Processing' | 'Shipped' | 'Delivered',
            total_amount: order.totalAmount
          }));
          
          setOrders(transformedOrders);
          setOrdersLoaded(true);
        } catch (error) {
          console.error("âŒ Error fetching orders:", error);
        } finally {
          setLoadingOrders(false);
          isFetchingOrdersRef.current = false;
        }
      };

      fetchOrders();
    }
  }, [activeTab, user, ordersLoaded]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      isFetchingOrdersRef.current = false;
    };
  }, []);

  // Function to refresh orders
  const refreshOrders = React.useCallback(async () => {
    if (!user || isFetchingOrdersRef.current) return;
    
    isFetchingOrdersRef.current = true;
    setOrdersLoaded(false);
    setOrders([]);
    setLoadingOrders(true);
    
    try {
      // Cancel any existing request for this user
      ApiDebounceManager.cancel(`getUserOrders-${user.id}`);
      
      const userOrders = await ApiDebounceManager.debounce(
        `getUserOrders-${user.id}`,
        () => OrderService.getUserOrders(user.id),
        100
      );
      
      const transformedOrders: Order[] = userOrders.map(order => ({
        id: order.id,
        orderNumber: order.orderNumber,
        created_at: order.createdAt,
        status: order.status.charAt(0).toUpperCase() + order.status.slice(1) as 'Processing' | 'Shipped' | 'Delivered',
        total_amount: order.totalAmount
      }));
      
      setOrders(transformedOrders);
      setOrdersLoaded(true);
    } catch (error) {
      console.error("âŒ Error refreshing orders:", error);
    } finally {
      setLoadingOrders(false);
      isFetchingOrdersRef.current = false;
    }
  }, [user]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setProfileData(prev => ({ ...prev, [name]: value }));
  };

  const handleSave = async () => {
    try {
      await updateUser({
        first_name: profileData.firstName,
        last_name: profileData.lastName,
        phone: profileData.phone,
        address: profileData.address,
        city: profileData.city,
        state: profileData.state,
        zip_code: profileData.zipCode
      });
      setIsEditing(false);
    } catch (error) {
      console.error('Error updating profile:', error);
    }
  };

  const handleCancel = () => {
    setIsEditing(false);
    if (user) {
      setProfileData({
        firstName: user.first_name || '',
        lastName: user.last_name || '',
        email: user.email || '',
        phone: user.phone || '',
        address: user.address || '',
        city: user.city || '',
        state: user.state || '',
        zipCode: user.zip_code || '',
        joinDate: user.updated_at ? new Date(user.updated_at).toLocaleDateString() : 'Recently joined'
      });
    }
  };

  const handleSignOut = async () => {
    try {
      console.log('ðŸšª Profile: Starting signout process...');
      await signOut();
      console.log('âœ… Profile: Signout successful, navigating to home...');
      // Navigate to home page after signout
      navigate('/', { replace: true });
    } catch (error) {
      console.error('âŒ Profile: Error signing out:', error);
      // Even if signout fails, try to navigate to home
      try {
        navigate('/', { replace: true });
      } catch (navError) {
        console.error('âŒ Navigation also failed:', navError);
        window.location.href = '/';
      }
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Delivered': return 'bg-green-100 text-green-800';
      case 'Shipped': return 'bg-blue-100 text-blue-800';
      case 'Processing': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // Show loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd] flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-[#b094b2] mx-auto mb-4"></div>
          <h2 className="text-xl font-semibold text-gray-800 mb-2">Loading Profile</h2>
          <p className="text-gray-600">Please wait...</p>
        </div>
      </div>
    );
  }

  // Redirect if not authenticated
  if (!user) {
    navigate('/signin');
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
      <div className="pt-32 pb-20">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-7xl mx-auto">
            {/* Header */}
            <div className="mb-6 md:mb-8 text-center">
              <h1 className="text-3xl sm:text-4xl md:text-5xl font-cormorant-light text-gray-900 mb-3">My Profile</h1>
              <p className="text-base sm:text-lg text-gray-600 px-4">Manage your account settings and preferences</p>
              <div className="w-24 h-1 bg-gradient-to-r from-[#b094b2] to-[#d1bccd] mx-auto mt-4 rounded-full"></div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 md:gap-8">
              {/* Sidebar */}
              <div className="lg:col-span-1">
                <Card className="shadow-lg border-0 bg-white/90 backdrop-blur-sm">
                  <CardContent className="p-4 md:p-6">
                    <div className="text-center mb-6 md:mb-8">
                      <div className="w-16 h-16 md:w-20 md:h-20 bg-gradient-to-br from-[#b094b2] via-[#b094b2] to-[#d1bccd] rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg ring-4 ring-[#d1bccd]">
                        <User className="w-8 h-8 md:w-10 md:h-10 text-white" />
                      </div>
                      <h3 className="text-base md:text-lg font-semibold text-gray-800 mb-1">
                        {profileData.firstName} {profileData.lastName}
                      </h3>
                      <p className="text-gray-600 text-xs md:text-sm mb-3 break-all">{profileData.email}</p>
                      <div className="inline-flex items-center px-2 md:px-3 py-1 bg-gradient-to-r from-[#d1bccd] to-[#d1bccd] text-[#b094b2] rounded-full text-xs font-medium">
                        <div className="w-2 h-2 bg-[#b094b2] rounded-full mr-2"></div>
                        Member since {profileData.joinDate}
                      </div>
                    </div>

                    <div className="space-y-1">
                      <button
                        onClick={() => setActiveTab('profile')}
                        className={`w-full flex items-center gap-2 md:gap-3 px-3 md:px-4 py-2 md:py-3 rounded-xl transition-all duration-200 text-left group text-sm md:text-base ${
                          activeTab === 'profile'
                            ? 'bg-gradient-to-r from-[#b094b2] to-[#d1bccd] text-white shadow-lg transform scale-105'
                            : 'text-gray-700 hover:bg-[#d1bccd] hover:text-[#b094b2] hover:transform hover:scale-105'
                        }`}
                      >
                        <User className={`w-5 h-5 ${activeTab === 'profile' ? 'text-white' : 'text-gray-600 group-hover:text-[#b094b2]'}`} />
                        <span className="font-medium">Profile</span>
                        {activeTab === 'profile' && (
                          <div className="ml-auto w-2 h-2 bg-white rounded-full"></div>
                        )}
                      </button>
                      
                      <button
                        onClick={() => setActiveTab('orders')}
                        className={`w-full flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-200 text-left group ${
                          activeTab === 'orders'
                            ? 'bg-gradient-to-r from-[#b094b2] to-[#d1bccd] text-white shadow-lg transform scale-105'
                            : 'text-gray-700 hover:bg-[#d1bccd] hover:text-[#b094b2] hover:transform hover:scale-105'
                        }`}
                      >
                        <Package className={`w-5 h-5 ${activeTab === 'orders' ? 'text-white' : 'text-gray-600 group-hover:text-[#b094b2]'}`} />
                        <span className="font-medium">Orders</span>
                        {activeTab === 'orders' && (
                          <div className="ml-auto w-2 h-2 bg-white rounded-full"></div>
                        )}
                      </button>
                      
                      <button
                        onClick={() => setActiveTab('wishlist')}
                        className={`w-full flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-200 text-left group ${
                          activeTab === 'wishlist'
                            ? 'bg-gradient-to-r from-[#b094b2] to-[#d1bccd] text-white shadow-lg transform scale-105'
                            : 'text-gray-700 hover:bg-[#d1bccd] hover:text-[#b094b2] hover:transform hover:scale-105'
                        }`}
                      >
                        <Heart className={`w-5 h-5 ${activeTab === 'wishlist' ? 'text-white' : 'text-gray-600 group-hover:text-[#b094b2]'}`} />
                        <span className="font-medium">Wishlist</span>
                        {activeTab === 'wishlist' && (
                          <div className="ml-auto w-2 h-2 bg-white rounded-full"></div>
                        )}
                      </button>
                      
                      <button
                        onClick={() => setActiveTab('settings')}
                        className={`w-full flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-200 text-left group ${
                          activeTab === 'settings'
                            ? 'bg-gradient-to-r from-[#b094b2] to-[#d1bccd] text-white shadow-lg transform scale-105'
                            : 'text-gray-700 hover:bg-[#d1bccd] hover:text-[#b094b2] hover:transform hover:scale-105'
                        }`}
                      >
                        <Settings className={`w-5 h-5 ${activeTab === 'settings' ? 'text-white' : 'text-gray-600 group-hover:text-[#b094b2]'}`} />
                        <span className="font-medium">Settings</span>
                        {activeTab === 'settings' && (
                          <div className="ml-auto w-2 h-2 bg-white rounded-full"></div>
                        )}
                      </button>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Main Content */}
              <div className="lg:col-span-3">
                <Tabs value={activeTab} onValueChange={setActiveTab}>
                  {/* Profile Tab */}
                  <TabsContent value="profile">
                    <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
                      <CardHeader className="bg-gradient-to-r from-[#d1bccd] to-[#d1bccd] rounded-t-lg">
                        <div className="flex items-center justify-between">
                          <div>
                            <CardTitle className="text-2xl font-cormorant-light text-gray-900">Profile Information</CardTitle>
                            <CardDescription>Manage your personal information and preferences</CardDescription>
                          </div>
                          {!isEditing ? (
                            <Button 
                              onClick={() => setIsEditing(true)} 
                              className="flex items-center gap-2 bg-[#b094b2] hover:bg-[#b094b2]/80"
                            >
                              <Edit className="w-4 h-4" />
                              Edit Profile
                            </Button>
                          ) : (
                            <div className="flex gap-2">
                              <Button 
                                onClick={handleSave} 
                                className="flex items-center gap-2 bg-[#b094b2] hover:bg-[#b094b2]/80"
                              >
                                <Save className="w-4 h-4" />
                                Save Changes
                              </Button>
                              <Button 
                                onClick={handleCancel} 
                                variant="outline" 
                                className="flex items-center gap-2 border-gray-300 hover:bg-gray-50"
                              >
                                <X className="w-4 h-4" />
                                Cancel
                              </Button>
                            </div>
                          )}
                        </div>
                      </CardHeader>
                      <CardContent className="p-4 md:p-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
                          <div className="space-y-2">
                            <Label htmlFor="firstName" className="text-sm font-medium text-gray-700">First Name</Label>
                            <Input
                              id="firstName"
                              name="firstName"
                              value={profileData.firstName}
                              onChange={handleInputChange}
                              disabled={!isEditing}
                              className={`mt-1 ${!isEditing ? 'bg-gray-50' : 'bg-white border-gray-300 focus:border-[#b094b2] focus:ring-[#b094b2]'}`}
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="lastName" className="text-sm font-medium text-gray-700">Last Name</Label>
                            <Input
                              id="lastName"
                              name="lastName"
                              value={profileData.lastName}
                              onChange={handleInputChange}
                              disabled={!isEditing}
                              className={`mt-1 ${!isEditing ? 'bg-gray-50' : 'bg-white border-gray-300 focus:border-[#b094b2] focus:ring-[#b094b2]'}`}
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="email" className="text-sm font-medium text-gray-700">Email Address</Label>
                            <Input
                              id="email"
                              name="email"
                              value={profileData.email}
                              disabled
                              className="mt-1 bg-gray-50 border-gray-200"
                            />
                            <p className="text-xs text-gray-500 mt-1">Email address cannot be changed</p>
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="phone" className="text-sm font-medium text-gray-700">Phone Number</Label>
                            <Input
                              id="phone"
                              name="phone"
                              value={profileData.phone}
                              onChange={handleInputChange}
                              disabled={!isEditing}
                              className={`mt-1 ${!isEditing ? 'bg-gray-50' : 'bg-white border-gray-300 focus:border-[#b094b2] focus:ring-[#b094b2]'}`}
                            />
                          </div>
                          <div className="md:col-span-2 space-y-2">
                            <Label htmlFor="address" className="text-sm font-medium text-gray-700">Street Address</Label>
                            <Input
                              id="address"
                              name="address"
                              value={profileData.address}
                              onChange={handleInputChange}
                              disabled={!isEditing}
                              className={`mt-1 ${!isEditing ? 'bg-gray-50' : 'bg-white border-gray-300 focus:border-[#b094b2] focus:ring-[#b094b2]'}`}
                              placeholder="Enter your street address"
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="city" className="text-sm font-medium text-gray-700">City</Label>
                            <Input
                              id="city"
                              name="city"
                              value={profileData.city}
                              onChange={handleInputChange}
                              disabled={!isEditing}
                              className={`mt-1 ${!isEditing ? 'bg-gray-50' : 'bg-white border-gray-300 focus:border-[#b094b2] focus:ring-[#b094b2]'}`}
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="state" className="text-sm font-medium text-gray-700">State</Label>
                            <Input
                              id="state"
                              name="state"
                              value={profileData.state}
                              onChange={handleInputChange}
                              disabled={!isEditing}
                              className={`mt-1 ${!isEditing ? 'bg-gray-50' : 'bg-white border-gray-300 focus:border-[#b094b2] focus:ring-[#b094b2]'}`}
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="zipCode" className="text-sm font-medium text-gray-700">ZIP Code</Label>
                            <Input
                              id="zipCode"
                              name="zipCode"
                              value={profileData.zipCode}
                              onChange={handleInputChange}
                              disabled={!isEditing}
                              className={`mt-1 ${!isEditing ? 'bg-gray-50' : 'bg-white border-gray-300 focus:border-[#b094b2] focus:ring-[#b094b2]'}`}
                            />
                          </div>
                          <div className="space-y-2">
                            <Label className="text-sm font-medium text-gray-700">Member Since</Label>
                            <Input
                              value={profileData.joinDate}
                              disabled
                              className="mt-1 bg-gray-50 border-gray-200"
                            />
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>

                  {/* Orders Tab */}
                  <TabsContent value="orders">
                    <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
                      <CardHeader className="bg-gradient-to-r from-[#d1bccd] to-[#d1bccd] rounded-t-lg">
                        <div className="flex items-center justify-between">
                          <div>
                            <CardTitle className="text-2xl font-cormorant-light text-gray-900">Order History</CardTitle>
                            <CardDescription>Track your past and current orders</CardDescription>
                          </div>
                          <Button 
                            onClick={refreshOrders} 
                            disabled={loadingOrders || isFetchingOrdersRef.current}
                            variant="outline"
                            size="sm"
                            className="border-[#b094b2] text-[#b094b2] hover:bg-[#d1bccd]"
                          >
                            {loadingOrders ? 'Loading...' : 'Refresh'}
                          </Button>
                        </div>
                      </CardHeader>
                      <CardContent className="p-6">
                        {loadingOrders ? (
                          <div className="text-center py-12">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#b094b2] mx-auto mb-4"></div>
                            <p className="text-gray-600">Loading your order history...</p>
                          </div>
                        ) : orders.length === 0 ? (
                          <div className="text-center py-12">
                            <div className="w-20 h-20 bg-gradient-to-br from-[#d1bccd] to-[#d1bccd] rounded-full flex items-center justify-center mx-auto mb-6">
                              <Package className="w-10 h-10 text-[#b094b2]" />
                            </div>
                            <h3 className="text-xl font-semibold text-gray-800 mb-2">No Orders Yet</h3>
                            <p className="text-gray-600 mb-6">You haven't placed any orders yet. Start your crystal journey!</p>
                            <Link to="/shop">
                              <Button className="bg-[#b094b2] hover:bg-[#b094b2]/80 px-6 py-2">
                                Start Shopping
                              </Button>
                            </Link>
                          </div>
                        ) : (
                          <div className="space-y-4">
                            {orders.map((order) => (
                              <div key={order.id} className="border border-gray-200 rounded-xl p-6 hover:shadow-lg transition-all duration-200 bg-white">
                                <div className="flex items-center justify-between mb-4">
                                  <div className="flex items-center gap-3">
                                    <div className="w-10 h-10 bg-gradient-to-br from-[#d1bccd] to-[#d1bccd] rounded-full flex items-center justify-center">
                                      <Package className="w-5 h-5 text-[#b094b2]" />
                                    </div>
                                    <div>
                                      <h3 className="font-semibold text-gray-800">Order #{order.orderNumber}</h3>
                                      <p className="text-sm text-gray-500">Placed on {new Date(order.created_at).toLocaleDateString()}</p>
                                    </div>
                                  </div>
                                  <Badge className={`${getStatusColor(order.status)} px-3 py-1`}>{order.status}</Badge>
                                </div>
                                <div className="border-t pt-4 mt-4">
                                  <div className="flex items-center justify-between">
                                    <div>
                                      <span className="text-sm text-gray-500">Total: </span>
                                      <span className="font-semibold text-lg text-[#b094b2]">â‚¹{order.total_amount.toFixed(2)}</span>
                                    </div>
                                    <div>
                                      <span className="text-sm text-gray-500">Paid via: </span>
                                      <Badge variant="outline" className="uppercase">{order.payment_method || 'Card'}</Badge>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  {/* Wishlist Tab */}
                  <TabsContent value="wishlist">
                    <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
                      <CardHeader className="bg-gradient-to-r from-[#d1bccd] to-[#d1bccd] rounded-t-lg">
                        <CardTitle className="text-2xl font-cormorant-light text-gray-900">Wishlist</CardTitle>
                        <CardDescription>Your favorite crystals and spiritual items</CardDescription>
                      </CardHeader>
                      <CardContent className="p-6">
                        {wishlistItems.length === 0 ? (
                          <div className="text-center py-12">
                            <div className="w-20 h-20 bg-gradient-to-br from-[#d1bccd] to-[#d1bccd] rounded-full flex items-center justify-center mx-auto mb-6">
                              <Heart className="w-10 h-10 text-[#b094b2]" />
                            </div>
                            <h3 className="text-xl font-semibold text-gray-800 mb-2">Your Wishlist is Empty</h3>
                            <p className="text-gray-600 mb-6">Start adding your favorite crystals to your wishlist!</p>
                            <Link to="/shop">
                              <Button className="bg-[#b094b2] hover:bg-[#b094b2]/80 px-6 py-2">
                                Browse Products
                              </Button>
                            </Link>
                          </div>
                        ) : (
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            {wishlistItems.map((item) => (
                              <div key={item.id} className="border border-gray-200 rounded-xl p-6 hover:shadow-lg transition-all duration-200 bg-white">
                                <div className="flex items-center space-x-4">
                                  <img 
                                    src={item.image} 
                                    alt={item.name} 
                                    className="w-20 h-20 object-cover rounded-xl shadow-sm"
                                  />
                                  <div className="flex-1">
                                    <h3 className="font-semibold text-gray-800 mb-1">{item.name}</h3>
                                    <p className="text-xl font-bold text-[#b094b2]">â‚¹{item.price.toFixed(2)}</p>
                                  </div>
                                  <div className="flex flex-col gap-2">
                                    <Button size="sm" className="bg-[#b094b2] hover:bg-[#b094b2]/80 text-white">
                                      Add to Cart
                                    </Button>
                                    <Button size="sm" variant="outline" className="border-red-200 text-red-600 hover:bg-red-50">
                                      Remove
                                    </Button>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  </TabsContent>

                  {/* Settings Tab */}
                  <TabsContent value="settings">
                    <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
                      <CardHeader className="bg-gradient-to-r from-[#d1bccd] to-[#d1bccd] rounded-t-lg">
                        <CardTitle className="text-2xl font-cormorant-light text-gray-900">Account Settings</CardTitle>
                        <CardDescription>Manage your account preferences and security</CardDescription>
                      </CardHeader>
                      <CardContent className="p-6">
                        <div className="space-y-6">
                          {/* Account Information */}
                          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-xl border border-blue-100">
                            <div className="flex items-center gap-3 mb-4">
                              <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                                <User className="w-5 h-5 text-blue-600" />
                              </div>
                              <div>
                                <h3 className="font-semibold text-gray-800">Account Information</h3>
                                <p className="text-sm text-gray-600">Your basic account details</p>
                              </div>
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                              <div>
                                <span className="text-gray-500">Email:</span>
                                <span className="ml-2 font-medium">{profileData.email}</span>
                              </div>
                              <div>
                                <span className="text-gray-500">Member Since:</span>
                                <span className="ml-2 font-medium">{profileData.joinDate}</span>
                              </div>
                            </div>
                          </div>

                          {/* Security Settings */}
                          <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-6 rounded-xl border border-green-100">
                            <div className="flex items-center gap-3 mb-4">
                              <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                                <Settings className="w-5 h-5 text-green-600" />
                              </div>
                              <div>
                                <h3 className="font-semibold text-gray-800">Security</h3>
                                <p className="text-sm text-gray-600">Manage your account security</p>
                              </div>
                            </div>
                            <div className="space-y-3">
                              <Button variant="outline" className="w-full justify-start border-green-200 text-green-700 hover:bg-green-50">
                                Change Password
                              </Button>
                              <Button variant="outline" className="w-full justify-start border-green-200 text-green-700 hover:bg-green-50">
                                Two-Factor Authentication
                              </Button>
                            </div>
                          </div>

                          {/* Sign Out */}
                          <div className="bg-gradient-to-r from-red-50 to-[#d1bccd] p-6 rounded-xl border border-red-100">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center gap-3">
                                <div className="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                                  <LogOut className="w-5 h-5 text-red-600" />
                                </div>
                                <div>
                                  <h3 className="font-semibold text-gray-800">Sign Out</h3>
                                  <p className="text-sm text-gray-600">Sign out of your account</p>
                                </div>
                              </div>
                              <Button 
                                variant="outline" 
                                onClick={handleSignOut}
                                className="flex items-center gap-2 text-red-600 border-red-200 hover:bg-red-50"
                              >
                                <LogOut className="w-4 h-4" />
                                Sign Out
                              </Button>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                </Tabs>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Profile;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\ResetPassword.tsx -----

import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Lock, Eye, EyeOff } from 'lucide-react';
import AlertMessage from '@/components/AlertMessage';
import { supabase } from '@/lib/supabaseClient';

const ResetPassword = () => {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();

  useEffect(() => {
    // Check if we have the necessary tokens in the URL
    const accessToken = searchParams.get('access_token');
    const refreshToken = searchParams.get('refresh_token');
    
    if (!accessToken || !refreshToken) {
      setError('Invalid reset link. Please request a new password reset.');
    }
  }, [searchParams]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    if (password.length < 6) {
      setError('Password must be at least 6 characters long');
      return;
    }

    setIsLoading(true);

    try {
      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) {
        setError(error.message);
      } else {
        setSuccess(true);
        setTimeout(() => {
          navigate('/signin');
        }, 2000);
      }
    } catch (err) {
      setError('An unexpected error occurred. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  if (success) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
        
        <div className="pt-32 pb-20">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="max-w-md mx-auto">
              <Card className="shadow-xl border-0">
                <CardHeader className="text-center pb-6">
                  <CardTitle className="text-2xl font-cormorant-light text-gray-900">
                    Password Reset Successful!
                  </CardTitle>
                  <CardDescription>
                    Your password has been updated successfully
                  </CardDescription>
                </CardHeader>
                
                <CardContent className="text-center">
                  <AlertMessage
                    type="success"
                    title="Success!"
                    message="Your password has been reset. Redirecting you to sign in..."
                    onClose={() => {}}
                  />
                </CardContent>
              </Card>
            </div>
          </div>
        </div>

      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
      
      <div className="pt-32 pb-20">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-md mx-auto">
            <div className="text-center mb-8">
              <h1 className="text-3xl font-cormorant-light text-gray-900 mb-2">
                Reset Your Password
              </h1>
              <p className="text-gray-600">
                Enter your new password below
              </p>
            </div>

            <Card className="shadow-xl border-0">
              <CardHeader className="text-center pb-6">
                <CardTitle className="text-2xl font-cormorant-light text-gray-900">
                  New Password
                </CardTitle>
                <CardDescription>
                  Choose a strong password for your account
                </CardDescription>
              </CardHeader>
              
              <CardContent>
                {error && (
                  <AlertMessage
                    type="error"
                    title="Error"
                    message={error}
                    onClose={() => setError('')}
                  />
                )}

                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="space-y-2">
                    <Label htmlFor="password" className="text-sm font-medium text-gray-700">
                      New Password
                    </Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <Input
                        id="password"
                        name="password"
                        type={showPassword ? 'text' : 'password'}
                        placeholder="Enter new password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="pl-10 pr-12 py-3 rounded-lg border-gray-200 focus:border-[#b094b2] focus:ring-[#b094b2]"
                        required
                      />
                      <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                      </button>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="confirmPassword" className="text-sm font-medium text-gray-700">
                      Confirm New Password
                    </Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <Input
                        id="confirmPassword"
                        name="confirmPassword"
                        type={showConfirmPassword ? 'text' : 'password'}
                        placeholder="Confirm new password"
                        value={confirmPassword}
                        onChange={(e) => setConfirmPassword(e.target.value)}
                        className="pl-10 pr-12 py-3 rounded-lg border-gray-200 focus:border-[#b094b2] focus:ring-[#b094b2]"
                        required
                      />
                      <button
                        type="button"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        {showConfirmPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                      </button>
                    </div>
                  </div>

                  <Button
                    type="submit"
                    className="w-full bg-[#b094b2] hover:bg-[#b094b2]/80 text-white py-3 rounded-lg font-medium disabled:opacity-50"
                    disabled={isLoading}
                  >
                    {isLoading ? 'Updating...' : 'Update Password'}
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

    </div>
  );
};

export default ResetPassword;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\Shop.tsx -----

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { 
  Search, 
  Filter, 
  Grid, 
  List, 
  Star, 
  Heart, 
  ShoppingCart, 
  SlidersHorizontal,
  ChevronDown,
  X
} from 'lucide-react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { useCart } from '@/hooks/useCart';
import { useProducts } from '@/hooks/useProducts';
import { categories, type Product } from '@/data/products';

const Shop = () => {
  const { addItem } = useCart();
  const { products, loading: productsLoading, error: productsError } = useProducts();
  const [searchTerm, setSearchTerm] = useState('');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sortBy, setSortBy] = useState('name');
  const [priceRange, setPriceRange] = useState([0, 5000]);
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
  const [showFilters, setShowFilters] = useState(false);
  const [wishlist, setWishlist] = useState<string[]>([]);

  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (product.description && product.description.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesPrice = product.price >= priceRange[0] && product.price <= priceRange[1];
    const matchesCategory = selectedCategories.length === 0 || 
                           selectedCategories.includes(product.category || '') ||
                           selectedCategories.includes('all');
    
    return matchesSearch && matchesPrice && matchesCategory;
  });

  const sortedProducts = [...filteredProducts].sort((a, b) => {
    switch (sortBy) {
      case 'price-low':
        return a.price - b.price;
      case 'price-high':
        return b.price - a.price;
      case 'rating':
        return b.rating - a.rating;
      case 'name':
      default:
        return a.name.localeCompare(b.name);
    }
  });

  const toggleWishlist = (productId: string) => {
    setWishlist(prev => 
      prev.includes(productId) 
        ? prev.filter(id => id !== productId)
        : [...prev, productId]
    );
  };

  const toggleCategory = (categoryId: string) => {
    setSelectedCategories(prev => 
      prev.includes(categoryId)
        ? prev.filter(id => id !== categoryId)
        : [...prev, categoryId]
    );
  };


  if (productsLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
        <Header />
        <div className="pt-32 pb-20">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center py-20">
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-[#b094b2] mx-auto mb-4"></div>
              <h2 className="text-xl font-semibold text-gray-800 mb-2">Loading Products</h2>
              <p className="text-gray-600">Please wait while we fetch the latest products...</p>
            </div>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  if (productsError) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
        <Header />
        <div className="pt-32 pb-20">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center py-20">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <X className="w-8 h-8 text-red-600" />
              </div>
              <h2 className="text-xl font-semibold text-gray-800 mb-2">Error Loading Products</h2>
              <p className="text-gray-600 mb-4">{productsError}</p>
              <Button onClick={() => window.location.reload()} className="bg-[#b094b2] hover:bg-[#b094b2]/80">
                Try Again
              </Button>
            </div>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      {/* Hero Section */}
      <section className="pt-32 pb-12 bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center max-w-4xl mx-auto">
            <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-cormorant-light mb-4 md:mb-6 bg-gradient-to-r from-gray-900 via-[#8a6b8d] to-gray-900 bg-clip-text text-transparent">
              Crystal Shop
            </h1>
            <p className="text-base sm:text-lg md:text-xl text-gray-600 mb-6 md:mb-8 max-w-2xl mx-auto px-4">
              Discover our carefully curated collection of healing crystals, each chosen for their unique energy and beauty.
            </p>
            
            {/* Search Bar */}
            <div className="flex flex-col md:flex-row gap-4 max-w-2xl mx-auto">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <Input
                  type="text"
                  placeholder="Search crystals..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 pr-4 py-3 rounded-full border-gray-200 focus:border-[#b094b2] focus:ring-[#b094b2] w-full"
                />
              </div>
              <Button
                variant="outline"
                className="px-6 py-3 rounded-full border-gray-200 hover:border-[#b094b2] hover:text-[#b094b2] md:hidden w-full md:w-auto"
                onClick={() => setShowFilters(!showFilters)}
              >
                <SlidersHorizontal className="w-4 h-4 mr-2" />
                Filters
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Filters and Products */}
      <section className="py-8">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex flex-col lg:flex-row gap-6 lg:gap-8">
            {/* Sidebar Filters */}
            <div className={`lg:w-1/4 ${showFilters ? 'block' : 'hidden lg:block'}`}>
              <div className="bg-white rounded-2xl p-4 md:p-6 shadow-lg sticky top-24 max-h-[80vh] overflow-y-auto">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-xl font-bold text-gray-800">Filters</h3>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="lg:hidden"
                    onClick={() => setShowFilters(false)}
                  >
                    <X className="w-4 h-4" />
                  </Button>
                </div>

                {/* Categories */}
                <div className="mb-8">
                  <h4 className="font-semibold text-gray-800 mb-4">Categories</h4>
                  <div className="space-y-2">
                    {categories.map((category) => (
                      <button
                        key={category.id}
                        onClick={() => toggleCategory(category.id)}
                        className={`w-full text-left px-4 py-2 rounded-lg transition-all duration-200 ${
                          selectedCategories.includes(category.id)
                            ? 'bg-[#d1bccd] text-[#b094b2] border border-[#b094b2]'
                            : 'hover:bg-gray-100 text-gray-600'
                        }`}
                      >
                        <div className="flex justify-between items-center">
                          <span>{category.name}</span>
                          <Badge variant="secondary" className="text-xs">
                            {category.count}
                          </Badge>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>


                {/* Price Range */}
                <div className="mb-8">
                  <h4 className="font-semibold text-gray-800 mb-4">Price Range</h4>
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4">
                      <Input
                        type="number"
                        placeholder="Min"
                        value={priceRange[0]}
                        onChange={(e) => setPriceRange([Number(e.target.value), priceRange[1]])}
                        className="w-20"
                      />
                      <span className="text-gray-500">to</span>
                      <Input
                        type="number"
                        placeholder="Max"
                        value={priceRange[1]}
                        onChange={(e) => setPriceRange([priceRange[0], Number(e.target.value)])}
                        className="w-20"
                      />
                    </div>
                    <div className="text-sm text-gray-600">
                      â‚¹{priceRange[0]} - â‚¹{priceRange[1]}
                    </div>
                  </div>
                </div>

                {/* Clear Filters */}
                <Button
                  variant="outline"
                  className="w-full"
                  onClick={() => {
                    setSelectedCategories([]);
                    setPriceRange([0, 5000]);
                    setSearchTerm('');
                  }}
                >
                  Clear All Filters
                </Button>
              </div>
            </div>

            {/* Products Grid */}
            <div className="lg:w-3/4">
              {/* Sort and View Controls */}
              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 lg:mb-8 gap-4">
                <div className="flex items-center gap-4">
                  <p className="text-gray-600 text-sm sm:text-base">
                    Showing {sortedProducts.length} of {products.length} products
                  </p>
                </div>
                <div className="flex items-center gap-3 sm:gap-4 w-full sm:w-auto">
                  <div className="relative flex-1 sm:flex-none">
                    <select
                      value={sortBy}
                      onChange={(e) => setSortBy(e.target.value)}
                      className="appearance-none bg-white border border-gray-200 rounded-lg px-3 sm:px-4 py-2 pr-8 focus:border-[#b094b2] focus:ring-[#b094b2] w-full sm:w-auto text-sm"
                    >
                      <option value="name">Sort by Name</option>
                      <option value="price-low">Price: Low to High</option>
                      <option value="price-high">Price: High to Low</option>
                      <option value="rating">Highest Rated</option>
                    </select>
                    <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400 pointer-events-none" />
                  </div>
                  <div className="flex gap-2">
                    <Button
                      variant={viewMode === 'grid' ? 'default' : 'outline'}
                      size="icon"
                      onClick={() => setViewMode('grid')}
                      className="rounded-lg w-10 h-10"
                    >
                      <Grid className="w-4 h-4" />
                    </Button>
                    <Button
                      variant={viewMode === 'list' ? 'default' : 'outline'}
                      size="icon"
                      onClick={() => setViewMode('list')}
                      className="rounded-lg w-10 h-10"
                    >
                      <List className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </div>

              {/* Products Grid/List */}
              <div className={`grid gap-4 md:gap-6 ${
                viewMode === 'grid' 
                  ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3' 
                  : 'grid-cols-1'
              }`}>
                {sortedProducts.map((product) => (
                  <div
                    key={product.id}
                    className={`bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100 flex flex-col ${
                      viewMode === 'list' ? 'flex-row' : ''
                    }`}
                  >
                    {/* Image Container - Fixed Height */}
                    <div className={`relative overflow-hidden ${
                      viewMode === 'list' ? 'w-1/3 h-48 sm:h-56' : 'h-48 sm:h-56 md:h-64'
                    }`}>
                      <img
                        src={product.image}
                        alt={product.name}
                        className="w-full h-full object-cover"
                        loading="lazy"
                      />
                      {product.featured && (
                        <div className="absolute top-4 left-4">
                          <Badge className="bg-gradient-to-r from-[#b094b2] to-[#d1bccd] text-white">
                            Featured
                          </Badge>
                        </div>
                      )}
                      {!product.inStock && (
                        <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
                          <Badge variant="destructive" className="text-lg px-4 py-2">
                            Out of Stock
                          </Badge>
                        </div>
                      )}
                    </div>
                    
                    {/* Content Container - Flexible Height */}
                    <div className={`p-4 md:p-6 flex flex-col flex-grow ${viewMode === 'list' ? 'flex-1' : ''}`}>
                      {/* Header with Title and Rating */}
                      <div className="flex items-start justify-between mb-3">
                        <h3 className="text-lg md:text-xl font-bold text-gray-800 flex-1 pr-2">
                          {product.name}
                        </h3>
                        <div className="flex items-center text-sm text-gray-500 flex-shrink-0">
                          <Star className="w-4 h-4 text-yellow-400 fill-current mr-1" />
                          {product.rating} ({product.reviewCount})
                        </div>
                      </div>  
                      
                      
                      {/* Description - Flexible Height */}
                      <p className="text-gray-600 mb-4 text-sm flex-grow">
                        {product.description}
                      </p>
                      
                      {/* Price Section - Fixed at Bottom */}
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center gap-2">
                          <span className="text-xl md:text-2xl font-bold text-gray-800">â‚¹{product.price}</span>
                          {product.originalPrice && (
                            <span className="text-base md:text-lg text-gray-500 line-through">â‚¹{product.originalPrice}</span>
                          )}
                        </div>
                        {product.originalPrice && (
                          <Badge variant="destructive" className="text-xs">
                            Save â‚¹{(product.originalPrice - product.price).toFixed(2)}
                          </Badge>
                        )}
                      </div>
                      
                      {/* Button - Fixed at Bottom */}
                      <Button
                        className="w-full bg-[#b094b2] hover:bg-[#b094b2]/80 text-white py-2 md:py-3 rounded-lg font-medium text-sm md:text-base disabled:opacity-50"
                        disabled={!product.inStock}
                        onClick={() => {
                          if (product.inStock) {
                            addItem({
                              id: product.id,
                              name: product.name,
                              price: product.price,
                              image: product.image
                            });
                          }
                        }}
                      >
                        <ShoppingCart className="w-4 h-4 mr-2" />
                        {product.inStock ? 'Add to Cart' : 'Out of Stock'}
                      </Button>
                    </div>
                  </div>
                ))}
              </div>

              {sortedProducts.length === 0 && (
                <div className="text-center py-16">
                  <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                    <Search className="w-12 h-12 text-gray-400" />
                  </div>
                  <h3 className="text-2xl font-bold text-gray-800 mb-4">No products found</h3>
                  <p className="text-gray-600 mb-6">Try adjusting your search or filter criteria</p>
                  <Button
                    onClick={() => {
                      setSearchTerm('');
                      setSelectedCategories([]);
                      setSelectedColors([]);
                      setPriceRange([0, 200]);
                    }}
                    className="bg-gradient-to-r from-[#b094b2] to-[#d1bccd] hover:from-[#b094b2]/80 hover:to-[#d1bccd]/80 text-white px-8 py-3 rounded-full"
                  >
                    Clear Filters
                  </Button>
                </div>
              )}
            </div>
          </div>
        </div>
      </section>

      {/* <Footer /> */}
    </div>
  );
};

export default Shop;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\SignIn.tsx -----

import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Eye, EyeOff, Mail, Lock, ArrowLeft } from 'lucide-react';
import AlertMessage from '@/components/AlertMessage';
import { useAuth } from '@/hooks/useAuth';

const SignIn = () => {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [fieldErrors, setFieldErrors] = useState<{[key: string]: string}>({});
  const location = useLocation(); 
  const from = location.state?.from?.pathname || '/profile';
  const [showPassword, setShowPassword] = useState(false);
  const { signIn, isLoading, error, clearError, isAuthenticated, user } = useAuth();
  const navigate = useNavigate();

  // Check if user is already authenticated and redirect
  useEffect(() => {
    if (isAuthenticated && user) {
      console.log('âœ… User already authenticated, redirecting...');
      const from = location.state?.from?.pathname || '/';
      navigate(from, { replace: true });
    }
  }, [isAuthenticated, user, navigate, location.state?.from?.pathname]);

  // React to authentication state changes after login
  useEffect(() => {
    if (isAuthenticated) {
      console.log('âœ… Auth state is now authenticated. Redirecting...');
      navigate(from, { replace: true });
    }
  }, [isAuthenticated, navigate, from]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Only clear field-level errors when user starts typing
    // Don't clear context-level errors (like "wrong password") automatically
    if (fieldErrors[name]) {
      setFieldErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors: {[key: string]: string} = {};
    
    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Please enter a valid email address';
    }
    
    if (!formData.password) {
      newErrors.password = 'Password is required';
    }
    
    setFieldErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Clear any existing errors when submitting
    clearError();
    setFieldErrors({});
    
    if (!validateForm()) {
      return;
    }
    
    try {
      console.log('ðŸ” SignIn: Starting login process...');
      await signIn(formData.email, formData.password);
      // The success case is now handled by the useEffect above
    } catch (error) {
      // Error is handled by the context and will persist until next submission
      console.error('âŒ Sign in failed:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-ethereal">
      
      <div className="pt-32 pb-20">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-md mx-auto">
            <div className="text-center mb-8">
              <Link 
                to="/" 
                className="inline-flex items-center text-mystic hover:text-mystic/80 mb-6"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back to Home
              </Link>
              <h1 className="text-3xl font-cormorant-light text-gray-900 mb-2">
                Welcome Back
              </h1>
              <p className="text-gray-600">
                Login to your account to continue shopping
              </p>
            </div>

            <Card className="shadow-xl border-0">
              <CardHeader className="text-center pb-6">
                <CardTitle className="text-2xl font-cormorant-light text-gray-900">
                  Login
                </CardTitle>
                <CardDescription>
                  Enter your credentials to access your account
                </CardDescription>
              </CardHeader>
              
              <CardContent>
                {error && (
                  <AlertMessage
                    type="error"
                    title="Login Failed"
                    message={error}
                    suggestions={[
                      'Check your email and password',
                      'Make sure your account is verified',
                      'Try resetting your password'
                    ]}
                    onClose={clearError}
                  />
                )}
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="space-y-2">
                    <Label htmlFor="email" className="text-sm font-medium text-gray-700">
                      Email Address
                    </Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        placeholder="Enter your email"
                        value={formData.email}
                        onChange={handleInputChange}
                        className={`pl-10 pr-4 py-3 rounded-lg border-gray-200 focus:border-mystic focus:ring-mystic ${
                          fieldErrors.email ? 'border-red-500 focus:border-red-500 focus:ring-red-500' : ''
                        }`}
                        required
                      />
                    </div>
                    {fieldErrors.email && (
                      <p className="text-sm text-red-600 flex items-center">
                        <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                        {fieldErrors.email}
                      </p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="password" className="text-sm font-medium text-gray-700">
                      Password
                    </Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <Input
                        id="password"
                        name="password"
                        type={showPassword ? 'text' : 'password'}
                        placeholder="Enter your password"
                        value={formData.password}
                        onChange={handleInputChange}
                        className={`pl-10 pr-12 py-3 rounded-lg border-gray-200 focus:border-mystic focus:ring-mystic ${
                          fieldErrors.password ? 'border-red-500 focus:border-red-500 focus:ring-red-500' : ''
                        }`}
                        required
                      />
                      <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                      </button>
                    </div>
                    {fieldErrors.password && (
                      <p className="text-sm text-red-600 flex items-center">
                        <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                        {fieldErrors.password}
                      </p>
                    )}
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <input
                        id="remember"
                        type="checkbox"
                        className="h-4 w-4 text-mystic focus:ring-mystic border-gray-300 rounded"
                      />
                      <Label htmlFor="remember" className="ml-2 text-sm text-gray-600">
                        Remember me
                      </Label>
                    </div>
                    <Link 
                      to="/forgot-password" 
                      className="text-sm text-mystic hover:text-mystic/80"
                    >
                      Forgot password?
                    </Link>
                  </div>

                  <Button
                    type="submit"
                    className="w-full bg-mystic hover:bg-mystic/80 text-white py-3 rounded-lg font-medium disabled:opacity-50"
                    disabled={isLoading}
                  >
                    {isLoading ? 'Logging In...' : 'Login'}
                  </Button>
                </form>

                <div className="mt-6 text-center">
                  <p className="text-sm text-gray-600">
                    Don't have an account?{' '}
                    <Link 
                      to="/signup" 
                      className="text-mystic hover:text-mystic/80 font-medium"
                    >
                      Sign up here
                    </Link>
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

    </div>
  );
};

export default SignIn;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\SignUp.tsx -----

import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Eye, EyeOff, Mail, Lock, User, ArrowLeft, Loader2, CheckCircle, AlertCircle } from 'lucide-react';
import AlertMessage from '@/components/AlertMessage';
import { useAuth } from '@/hooks/useAuth';

const SignUp = () => {
  const [formData, setFormData] = useState({
    first_name: '',
    last_name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [signupStatus, setSignupStatus] = useState<'idle' | 'creating-user' | 'creating-profile' | 'success' | 'error'>('idle');
  const { signUp, isLoading, error, clearError, isAuthenticated, user } = useAuth();
  const navigate = useNavigate();

  // Monitor authentication state changes after signup
  useEffect(() => {
    if (signupStatus === 'success' && isAuthenticated && user) {
      console.log('âœ… Authentication state updated after signup, redirecting to profile...');
      setTimeout(() => {
        try {
          navigate('/profile', { replace: true });
        } catch (navError) {
          console.error('âŒ Navigation failed:', navError);
          window.location.href = '/profile';
        }
      }, 500);
    }
  }, [isAuthenticated, user, signupStatus, navigate]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors: { [key: string]: string } = {};

    if (!formData.first_name.trim()) {
      newErrors.first_name = 'First name is required';
    }

    if (!formData.last_name.trim()) {
      newErrors.last_name = 'Last name is required';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email is invalid';
    }

    if (!formData.password) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    }

    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'Please confirm your password';
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    clearError();
    setErrors({});
    setSignupStatus('idle');
    
    // Add browser detection and debugging
    const userAgent = navigator.userAgent;
    const isChrome = userAgent.includes('Chrome') && !userAgent.includes('Edge');
    const isIncognito = window.navigator.storage && window.navigator.storage.estimate ? true : false;
    
    if (!validateForm()) {
      return;
    }

    try {
      setSignupStatus('creating-user');
      
      // Add timeout protection for Chrome
      const signupPromise = signUp({
        first_name: formData.first_name,
        last_name: formData.last_name,
        email: formData.email,
        password: formData.password
      });
      
      // Add timeout for Chrome compatibility (reduced to 10 seconds)
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Signup timeout after 10 seconds')), 10000)
      );
      
      const result = await Promise.race([signupPromise, timeoutPromise]);
      
      setSignupStatus('success');
      
      // Check if user is authenticated after signup
      if (isAuthenticated && user) {
        console.log('âœ… User is authenticated after signup, redirecting to profile...');
        setTimeout(() => {
          try {
            navigate('/profile', { replace: true });
          } catch (navError) {
            console.error('âŒ Navigation failed:', navError);
            window.location.href = '/profile';
          }
        }, 1000);
      } else {
        // Show success state briefly before redirecting to email confirmation
        setTimeout(() => {
          try {
            navigate('/confirm-email', { state: { email: formData.email }, replace: true });
          } catch (navError) {
            console.error('âŒ Navigation failed:', navError);
            // Fallback: try window.location
            window.location.href = '/confirm-email';
          }
        }, 1000);
      }

    } catch (error) {
      console.error('âŒ Sign up failed:', error);
      setSignupStatus('error');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
      <div className="pt-32 pb-20">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-md mx-auto">
            <div className="text-center mb-8">
              <Link 
                to="/" 
                className="inline-flex items-center text-[#b094b2] hover:text-[#b094b2]/80 mb-6"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back to Home
              </Link>
              <h1 className="text-3xl font-cormorant-light text-gray-900 mb-2">
                Create Account
              </h1>
              <p className="text-gray-600">
                Join us and start your crystal journey
              </p>
            </div>

            <Card className="shadow-xl border-0">
              <CardHeader className="text-center pb-6">
                <CardTitle className="text-2xl font-cormorant-light text-gray-900">
                  Sign Up
                </CardTitle>
                <CardDescription>
                  Create your account to get started
                </CardDescription>
              </CardHeader>
              
              <CardContent>
                {/* Status Indicator */}
                {signupStatus !== 'idle' && (
                  <div className="mb-6 p-4 rounded-lg border-2 border-dashed">
                    {signupStatus === 'creating-user' && (
                      <div className="space-y-3">
                        <div className="flex items-center justify-center space-x-3 text-[#b094b2]">
                          <Loader2 className="w-5 h-5 animate-spin" />
                          <span className="font-medium">Creating your account...</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div className="bg-[#b094b2] h-2 rounded-full animate-pulse" style={{ width: '60%' }}></div>
                        </div>
                        <p className="text-xs text-gray-500 text-center">Setting up your profile and preferences...</p>
                      </div>
                    )}
                    {signupStatus === 'success' && (
                      <div className="space-y-3">
                        <div className="flex items-center justify-center space-x-3 text-green-600">
                          <CheckCircle className="w-5 h-5" />
                          <span className="font-medium">Account created successfully! Redirecting...</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div className="bg-green-600 h-2 rounded-full transition-all duration-500" style={{ width: '100%' }}></div>
                        </div>
                        <p className="text-xs text-gray-500 text-center">Taking you to the confirmation page...</p>
                      </div>
                    )}
                    {signupStatus === 'error' && (
                      <div className="flex items-center justify-center space-x-3 text-red-600">
                        <AlertCircle className="w-5 h-5" />
                        <span className="font-medium">Something went wrong. Please try again.</span>
                      </div>
                    )}
                  </div>
                )}

                {error && (
                  <AlertMessage
                    type="error"
                    title="Account Creation Failed"
                    message={error}
                    suggestions={[
                      'Check if email is already registered',
                      'Ensure password is at least 6 characters',
                      'Verify email format is correct',
                      'Try using a different email address'
                    ]}
                    onClose={clearError}
                  />
                )}
                <form onSubmit={handleSubmit} className={`space-y-6 transition-opacity duration-300 ${signupStatus === 'creating-user' ? 'opacity-75' : 'opacity-100'}`}>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="first_name" className="text-sm font-medium text-gray-700">
                        First Name
                      </Label>
                      <div className="relative">
                        <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                        <Input
                          id="first_name"
                          name="first_name"
                          type="text"
                          placeholder="First name"
                          value={formData.first_name}
                          onChange={handleInputChange}
                          disabled={signupStatus === 'creating-user' || signupStatus === 'success'}
                          className={`pl-10 pr-4 py-3 rounded-lg border-gray-200 focus:border-[#b094b2] focus:ring-[#b094b2] ${
                            errors.first_name ? 'border-red-500' : ''
                          } ${signupStatus === 'creating-user' || signupStatus === 'success' ? 'bg-gray-50' : ''}`}
                          required
                        />
                      </div>
                      {errors.first_name && (
                        <p className="text-sm text-red-500">{errors.first_name}</p>
                      )}
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="last_name" className="text-sm font-medium text-gray-700">
                        Last Name
                      </Label>
                      <div className="relative">
                        <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                        <Input
                          id="last_name"
                          name="last_name"
                          type="text"
                          placeholder="Last name"
                          value={formData.last_name}
                          onChange={handleInputChange}
                          disabled={signupStatus === 'creating-user' || signupStatus === 'success'}
                          className={`pl-10 pr-4 py-3 rounded-lg border-gray-200 focus:border-[#b094b2] focus:ring-[#b094b2] ${
                            errors.last_name ? 'border-red-500' : ''
                          } ${signupStatus === 'creating-user' || signupStatus === 'success' ? 'bg-gray-50' : ''}`}
                          required
                        />
                      </div>
                      {errors.last_name && (
                        <p className="text-sm text-red-500">{errors.last_name}</p>
                      )}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="email" className="text-sm font-medium text-gray-700">
                      Email Address
                    </Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        placeholder="Enter your email"
                        value={formData.email}
                        onChange={handleInputChange}
                        disabled={signupStatus === 'creating-user' || signupStatus === 'success'}
                        className={`pl-10 pr-4 py-3 rounded-lg border-gray-200 focus:border-[#b094b2] focus:ring-[#b094b2] ${
                          errors.email ? 'border-red-500' : ''
                        } ${signupStatus === 'creating-user' || signupStatus === 'success' ? 'bg-gray-50' : ''}`}
                        required
                      />
                    </div>
                    {errors.email && (
                      <p className="text-sm text-red-500">{errors.email}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="password" className="text-sm font-medium text-gray-700">
                      Password
                    </Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <Input
                        id="password"
                        name="password"
                        type={showPassword ? 'text' : 'password'}
                        placeholder="Create a password"
                        value={formData.password}
                        onChange={handleInputChange}
                        disabled={signupStatus === 'creating-user' || signupStatus === 'success'}
                        className={`pl-10 pr-12 py-3 rounded-lg border-gray-200 focus:border-[#b094b2] focus:ring-[#b094b2] ${
                          errors.password ? 'border-red-500' : ''
                        } ${signupStatus === 'creating-user' || signupStatus === 'success' ? 'bg-gray-50' : ''}`}
                        required
                      />
                      <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                      </button>
                    </div>
                    {errors.password && (
                      <p className="text-sm text-red-500">{errors.password}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="confirmPassword" className="text-sm font-medium text-gray-700">
                      Confirm Password
                    </Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <Input
                        id="confirmPassword"
                        name="confirmPassword"
                        type={showConfirmPassword ? 'text' : 'password'}
                        placeholder="Confirm your password"
                        value={formData.confirmPassword}
                        onChange={handleInputChange}
                        disabled={signupStatus === 'creating-user' || signupStatus === 'success'}
                        className={`pl-10 pr-12 py-3 rounded-lg border-gray-200 focus:border-[#b094b2] focus:ring-[#b094b2] ${
                          errors.confirmPassword ? 'border-red-500' : ''
                        } ${signupStatus === 'creating-user' || signupStatus === 'success' ? 'bg-gray-50' : ''}`}
                        required
                      />
                      <button
                        type="button"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        {showConfirmPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                      </button>
                    </div>
                    {errors.confirmPassword && (
                      <p className="text-sm text-red-500">{errors.confirmPassword}</p>
                    )}
                  </div>

                  <div className="flex items-center">
                    <input
                      id="terms"
                      type="checkbox"
                      disabled={signupStatus === 'creating-user' || signupStatus === 'success'}
                      className={`h-4 w-4 text-[#b094b2] focus:ring-[#b094b2] border-gray-300 rounded ${
                        signupStatus === 'creating-user' || signupStatus === 'success' ? 'opacity-50' : ''
                      }`}
                      required
                    />
                    <Label htmlFor="terms" className="ml-2 text-sm text-gray-600">
                      I agree to the{' '}
                      <Link to="/terms" className="text-[#b094b2] hover:text-[#b094b2]/80">
                        Terms of Service
                      </Link>{' '}
                      and{' '}
                      <Link to="/privacy" className="text-[#b094b2] hover:text-[#b094b2]/80">
                        Privacy Policy
                      </Link>
                    </Label>
                  </div>

                  <Button
                    type="submit"
                    className={`w-full py-3 rounded-lg font-medium transition-all duration-300 ${
                      signupStatus === 'creating-user' 
                        ? 'bg-[#b094b2] cursor-not-allowed' 
                        : signupStatus === 'success'
                        ? 'bg-green-600 hover:bg-green-700'
                        : 'bg-[#b094b2] hover:bg-[#b094b2]/80'
                    } text-white disabled:opacity-50`}
                    disabled={isLoading || signupStatus === 'creating-user' || signupStatus === 'success'}
                  >
                    <div className="flex items-center justify-center space-x-2">
                      {signupStatus === 'creating-user' && <Loader2 className="w-4 h-4 animate-spin" />}
                      {signupStatus === 'success' && <CheckCircle className="w-4 h-4" />}
                      <span>
                        {signupStatus === 'creating-user' 
                          ? 'Creating Account...' 
                          : signupStatus === 'success'
                          ? 'Account Created!'
                          : 'Create Account'
                        }
                      </span>
                    </div>
                  </Button>
                </form>

                <div className="mt-6 text-center">
                  <p className="text-sm text-gray-600">
                    Already have an account?{' '}
                    <Link 
                      to="/signin" 
                      className="text-[#b094b2] hover:text-[#b094b2]/80 font-medium"
                    >
                      Login here
                    </Link>
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SignUp;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\SupabaseTest.tsx -----

 

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\pages\Wishlist.tsx -----

import React from 'react';
import { Heart, ShoppingBag, ArrowLeft } from 'lucide-react';
import { Link } from 'react-router-dom';
import { useWishlist } from '@/hooks/useWishlist';
import { useCart } from '@/hooks/useCart';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import WishlistIcon from '@/components/WishlistIcon';
import { Product } from '@/data/products';

const Wishlist: React.FC = () => {
  const { wishlistItems, clearWishlist, wishlistCount } = useWishlist();
  const { addItem } = useCart();

  const handleAddToCart = (product: Product) => {
    addItem({
      id: product.id,
      name: product.name,
      price: product.price,
      image: product.image
    }, 1);
  };

  const handleClearWishlist = () => {
    clearWishlist();
  };

  if (wishlistCount === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
        <div className="container mx-auto px-4 py-16">
          <div className="text-center">
            <Heart className="h-24 w-24 text-gray-300 mx-auto mb-6" />
            <h1 className="text-3xl font-bold text-gray-800 mb-4">Your Wishlist is Empty</h1>
            <p className="text-gray-600 mb-8 max-w-md mx-auto">
              Start adding crystals to your wishlist to save them for later. 
              Look for the heart icon on any product!
            </p>
            <div className="space-x-4">
              <Link to="/shop">
                <Button className="bg-[#b094b2] hover:bg-[#b094b2]/80">
                  <ShoppingBag className="h-4 w-4 mr-2" />
                  Browse Products
                </Button>
              </Link>
              <Link to="/">
                <Button variant="outline">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Back to Home
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#d1bccd] via-white to-[#d1bccd]">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-800 mb-2">My Wishlist</h1>
            <p className="text-gray-600">
              {wishlistCount} {wishlistCount === 1 ? 'item' : 'items'} saved
            </p>
          </div>
          <Button 
            variant="outline" 
            onClick={handleClearWishlist}
            className="text-red-600 hover:text-red-700 hover:bg-red-50"
          >
            Clear All
          </Button>
        </div>

        {/* Wishlist Items */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {wishlistItems.map((product) => (
            <Card key={product.id} className="group hover:shadow-lg transition-shadow duration-300">
              <div className="relative">
                <img
                  src={product.image}
                  alt={product.name}
                  className="w-full h-48 object-cover rounded-t-lg"
                />
                <div className="absolute top-2 right-2">
                  <WishlistIcon product={product} />
                </div>
                {product.originalPrice && (
                  <div className="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded text-sm font-medium">
                    Sale
                  </div>
                )}
              </div>
              
              <CardContent className="p-4">
                <h3 className="font-semibold text-lg mb-2 line-clamp-2">{product.name}</h3>
                <p className="text-gray-600 text-sm mb-3 line-clamp-2">{product.description}</p>
                
                <div className="flex items-center mb-3">
                  <div className="flex text-yellow-400">
                    {[...Array(5)].map((_, i) => (
                      <span key={i} className={i < Math.floor(product.rating) ? 'text-yellow-400' : 'text-gray-300'}>
                        â˜…
                      </span>
                    ))}
                  </div>
                  <span className="text-sm text-gray-600 ml-2">({product.reviewCount})</span>
                </div>

                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-2">
                    <span className="text-xl font-bold text-[#b094b2]">${product.price}</span>
                    {product.originalPrice && (
                      <span className="text-sm text-gray-500 line-through">${product.originalPrice}</span>
                    )}
                  </div>
                  <span className="text-sm text-gray-500 capitalize">{product.category}</span>
                </div>

                <div className="flex flex-wrap gap-1 mb-3">
                  {product.benefits.slice(0, 3).map((benefit, index) => (
                    <span
                      key={index}
                      className="px-2 py-1 bg-[#d1bccd] text-[#b094b2] text-xs rounded-full"
                    >
                      {benefit}
                    </span>
                  ))}
                </div>
              </CardContent>

              <CardFooter className="p-4 pt-0">
                <Button 
                  className="w-full bg-[#b094b2] hover:bg-[#b094b2]/80"
                  onClick={() => handleAddToCart(product)}
                >
                  <ShoppingBag className="h-4 w-4 mr-2" />
                  Add to Cart
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>

        {/* Bottom Actions */}
        <div className="mt-12 text-center">
          <Link to="/shop">
            <Button variant="outline" size="lg">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Continue Shopping
            </Button>
          </Link>
        </div>
      </div>
    </div>
  );
};

export default Wishlist;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\services\emailService.ts -----

/**
 * Simple Email Service for order confirmation emails
 * Uses console logging for development, can be extended for real email services
 */

interface OrderEmailData {
  orderId: string;
  customerName: string;
  customerEmail: string;
  totalAmount: number;
  items: Array<{
    productId: string;
    quantity: number;
    price: number;
  }>;
}

export class EmailService {
  /**
   * Send order confirmation email
   */
  static async sendOrderConfirmation(data: OrderEmailData): Promise<boolean> {
    try {
      // Generate email content
      const emailContent = this.generateEmailContent(data);
      
      // In a real implementation, you would send the email here
      // For now, we'll simulate success
      return true;
    } catch (error) {
      console.error('âŒ Error sending order confirmation email:', error);
      return false;
    }
  }

  /**
   * Generate email content
   */
  private static generateEmailContent(data: OrderEmailData): string {
    const itemsHtml = data.items.map(item => 
      `<tr>
        <td>Product ${item.productId}</td>
        <td>${item.quantity}</td>
        <td>â‚¹${(item.price * item.quantity).toFixed(2)}</td>
      </tr>`
    ).join('');

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f7; }
          .container { max-width: 600px; margin: 20px auto; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); overflow: hidden; }
          .header { background: linear-gradient(to right, #8A2BE2, #EC4899); color: white; padding: 30px; text-align: center; }
          .header h1 { margin: 0; font-size: 28px; }
          .content { padding: 30px; }
          .content h2 { color: #333; }
          .content p { line-height: 1.6; color: #555; }
          .order-details { width: 100%; border-collapse: collapse; margin-top: 20px; }
          .order-details th, .order-details td { padding: 12px; border-bottom: 1px solid #eee; text-align: left; }
          .order-details th { background-color: #f9f9f9; color: #555; }
          .total { text-align: right; font-size: 1.2em; font-weight: bold; margin-top: 20px; }
          .footer { background-color: #f4f4f7; padding: 20px; text-align: center; font-size: 12px; color: #888; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>Thank You for Your Order!</h1>
          </div>
          <div class="content">
            <h2>Hi ${data.customerName},</h2>
            <p>Your order #${data.orderId.substring(0, 8).toUpperCase()} has been confirmed and will be shipped soon. Here are the details:</p>
            <table class="order-details">
              <thead>
                <tr>
                  <th>Product</th>
                  <th>Quantity</th>
                  <th>Price</th>
                </tr>
              </thead>
              <tbody>
                ${itemsHtml}
              </tbody>
            </table>
            <div class="total">
              <p>Total: â‚¹${data.totalAmount.toFixed(2)}</p>
            </div>
            <p>We're so excited for you to receive your crystals and start your journey. Thank you for choosing Adhyatma.</p>
          </div>
          <div class="footer">
            <p>&copy; ${new Date().getFullYear()} Adhyatma. All rights reserved.</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }
}

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\services\orderService.ts -----

import { supabase } from '@/lib/supabaseClient';
import { Order, CreateOrderRequest } from '@/types/order';
import { EmailService } from './emailService';

interface OrderItem {
  id: string;
  product_id: string;
  quantity: number;
  price_at_purchase: number;
}

export class OrderService {
  private static pendingRequests = new Map<string, Promise<Order[]>>();

  /**
   * Create a new order
   */
  static async createOrder(orderData: CreateOrderRequest, userId: string): Promise<Order> {
    try {
      
      // Generate a unique order ID
      const orderId = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      
      const order: Order = {
        id: orderId,
        orderNumber: orderId, // Use the generated orderId as orderNumber for now
        userId,
        items: orderData.items,
        totalAmount: orderData.totalAmount,
        shippingAddress: orderData.shippingAddress,
        status: 'pending',
        paymentMethod: orderData.paymentMethod,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      // Create the order in the orders table
      const { data: dbOrderData, error: orderError } = await supabase
        .from('orders')
        .insert([{
          user_id: order.userId,
          total_amount: order.totalAmount,
          status: 'Processing',
          shipping_address: order.shippingAddress,
          payment_method: order.paymentMethod,
          created_at: order.createdAt
        }])
        .select()
        .single();

      if (orderError) {
        console.error('âŒ Failed to create order:', orderError);
        throw new Error(`Order creation failed: ${orderError.message}`);
      }

      // Create order items
      const orderItems = order.items.map(item => ({
        order_id: dbOrderData.id,
        product_id: item.id, // Assuming product_id matches item.id
        quantity: item.quantity,
        price_at_purchase: item.price
      }));

      const { data: itemsData, error: itemsError } = await supabase
        .from('order_items')
        .insert(orderItems)
        .select();

      if (itemsError) {
        console.error('âŒ Failed to create order items:', itemsError);
        // Don't throw here, order is already created
      }

      // Update the order object with the database ID
      order.id = dbOrderData.id;

      // Send confirmation email
      try {
        await this.sendOrderConfirmationEmail(dbOrderData.id, userId, order);
      } catch (emailError) {
        console.error('âš ï¸ Failed to send confirmation email:', emailError);
        // Don't throw here, order is still created successfully
      }
      
      return order;
    } catch (error) {
      console.error('âŒ Error creating order:', error);
      throw new Error('Failed to create order');
    }
  }

  /**
   * Get orders for a specific user
   */
  static async getUserOrders(userId: string): Promise<Order[]> {
    const requestKey = `getUserOrders-${userId}`;
    
    // Check if there's already a pending request for this user
    if (this.pendingRequests.has(requestKey)) {
      return this.pendingRequests.get(requestKey)!;
    }
    
    const requestPromise = this.fetchUserOrders(userId);
    this.pendingRequests.set(requestKey, requestPromise);
    
    try {
      const result = await requestPromise;
      return result;
    } finally {
      this.pendingRequests.delete(requestKey);
    }
  }
  
  private static async fetchUserOrders(userId: string): Promise<Order[]> {
    try {
      const { data: ordersData, error: ordersError } = await supabase
        .from('orders')
        .select(`
          *,
          order_number,
          order_items (
            id,
            product_id,
            quantity,
            price_at_purchase
          )
        `)
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (ordersError) {
        console.error('âŒ Failed to fetch orders:', ordersError);
        throw ordersError;
      }

      if (ordersData) {
        // Transform the data to match our Order interface
        const transformedOrders: Order[] = ordersData.map(order => ({
          id: order.id,
          orderNumber: order.order_number,
          userId: order.user_id,
          items: order.order_items.map((item: OrderItem) => ({
            id: item.product_id,
            name: `Product ${item.product_id}`, // You might want to join with products table
            price: item.price_at_purchase,
            quantity: item.quantity,
            image: '' // You might want to join with products table for image
          })),
          totalAmount: order.total_amount,
          shippingAddress: order.shipping_address,
          status: order.status.toLowerCase(),
          paymentMethod: order.payment_method || 'card', // Default to 'card' for backward compatibility
          createdAt: order.created_at,
          updatedAt: order.created_at
        }));

        return transformedOrders;
      }

      return []; // Return empty array if ordersData is null
    } catch (error) {
      console.error('âŒ Error fetching orders:', error);
      return [];
    }
  }

  /**
   * Get a specific order by ID
   */
  static async getOrderById(orderId: string): Promise<Order | null> {
    try {
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select(`
          *,
          order_number,
          order_items (
            id,
            product_id,
            quantity,
            price_at_purchase
          )
        `)
        .eq('id', orderId)
        .single();

      if (orderError) {
        console.error('âŒ Failed to fetch order:', orderError);
        throw orderError;
      }

      if (orderData) {
        // Transform the data to match our Order interface
        const transformedOrder: Order = {
          id: orderData.id,
          orderNumber: orderData.order_number,
          userId: orderData.user_id,
          items: orderData.order_items.map((item: OrderItem) => ({
            id: item.product_id,
            name: `Product ${item.product_id}`,
            price: item.price_at_purchase,
            quantity: item.quantity,
            image: ''
          })),
          totalAmount: orderData.total_amount,
          shippingAddress: orderData.shipping_address,
          status: orderData.status.toLowerCase(),
          paymentMethod: orderData.payment_method || 'card', // Default to 'card' for backward compatibility
          createdAt: orderData.created_at,
          updatedAt: orderData.created_at
        };

        return transformedOrder;
      }

      return null;
    } catch (error) {
      console.error('âŒ Error fetching order:', error);
      return null;
    }
  }

  /**
   * Update order status
   */
  static async updateOrderStatus(orderId: string, status: Order['status']): Promise<boolean> {
    try {
      const { error } = await supabase
        .from('orders')
        .update({ 
          status: status.charAt(0).toUpperCase() + status.slice(1), // Convert to proper case
          updated_at: new Date().toISOString()
        })
        .eq('id', orderId);

      if (error) {
        console.error('âŒ Failed to update order in Supabase:', error);
        throw error;
      }

      return true;
    } catch (error) {
      console.error('âŒ Error updating order status:', error);
      return false;
    }
  }

  /**
   * Send order confirmation email
   */
  private static async sendOrderConfirmationEmail(orderId: string, userId: string, order: Order): Promise<void> {
    try {
      // Get user profile for email
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('first_name, last_name, email')
        .eq('id', userId)
        .single();

      if (profileError || !profile) {
        console.error('âŒ Failed to fetch user profile for email:', profileError);
        return;
      }

      // Prepare email data
      const customerName = `${profile.first_name || ''} ${profile.last_name || ''}`.trim() || 'Valued Customer';
      
      const emailData = {
        orderId: order.id,
        customerName,
        customerEmail: profile.email,
        totalAmount: order.totalAmount,
        items: order.items.map(item => ({
          productId: item.id,
          quantity: item.quantity,
          price: item.price
        }))
      };

      // Send email using EmailService
      const emailSent = await EmailService.sendOrderConfirmation(emailData);
      
      if (emailSent) {
        // Email sent successfully
      } else {
        console.error('âŒ Failed to send order confirmation email');
      }
      
    } catch (error) {
      console.error('âŒ Error sending confirmation email:', error);
      throw error;
    }
  }

}

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\types\order.ts -----

export interface OrderItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image: string;
}

export interface Order {
  id: string;
  orderNumber: string;
  userId: string;
  items: OrderItem[];
  totalAmount: number;
  shippingAddress: {
    firstName: string;
    lastName: string;
    email: string;
    address: string;
    city: string;
    state: string;
    zipCode: string;
  };
  status: 'pending' | 'confirmed' | 'shipped' | 'delivered' | 'cancelled';
  paymentMethod: 'card' | 'cod';
  createdAt: string;
  updatedAt: string;
}

export interface CreateOrderRequest {
  items: OrderItem[];
  totalAmount: number;
  shippingAddress: {
    firstName: string;
    lastName: string;
    email: string;
    address: string;
    city: string;
    state: string;
    zipCode: string;
  };
  paymentMethod: 'card' | 'cod';
}

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\utils\admin.ts -----

import { useAuth } from '@/hooks/useAuth';

/**
 * Hook to check if the current user is an admin
 */
export const useIsAdmin = () => {
  const { isAdmin, isAuthenticated } = useAuth();
  return isAuthenticated && isAdmin;
};

/**
 * Utility function to check if a user profile has admin privileges
 */
export const isUserAdmin = (user: { is_admin?: boolean } | null): boolean => {
  return user?.is_admin === true;
};

/**
 * Admin email - the only admin user
 * You can change this to your admin email
 */
export const ADMIN_EMAIL = 'admin@adhyatmaessence.com';

/**
 * Check if an email is the admin email
 */
export const isAdminEmail = (email: string): boolean => {
  return email.toLowerCase() === ADMIN_EMAIL.toLowerCase();
};

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\utils\apiDebounce.ts -----

/**
 * Global API call debouncing utility
 * Prevents duplicate API calls across the application
 */

class ApiDebounceManager {
  private static pendingRequests = new Map<string, Promise<unknown>>();
  private static requestTimeouts = new Map<string, NodeJS.Timeout>();

  /**
   * Debounce an API call to prevent duplicates
   */
  static async debounce<T>(
    key: string,
    apiCall: () => Promise<T>,
    delay: number = 300
  ): Promise<T> {
    // Clear any existing timeout for this key
    if (this.requestTimeouts.has(key)) {
      clearTimeout(this.requestTimeouts.get(key)!);
      this.requestTimeouts.delete(key);
    }

    // If there's already a pending request, return it
    if (this.pendingRequests.has(key)) {
      return this.pendingRequests.get(key)! as Promise<T>;
    }

    // Create a new promise for this request
    const requestPromise = new Promise<T>((resolve, reject) => {
      const timeoutId = setTimeout(async () => {
        try {
          const result = await apiCall();
          resolve(result);
        } catch (error) {
          reject(error);
        } finally {
          // Clean up
          this.pendingRequests.delete(key);
          this.requestTimeouts.delete(key);
        }
      }, delay);

      this.requestTimeouts.set(key, timeoutId);
    });

    this.pendingRequests.set(key, requestPromise);
    return requestPromise;
  }

  /**
   * Cancel a pending request
   */
  static cancel(key: string): void {
    if (this.requestTimeouts.has(key)) {
      clearTimeout(this.requestTimeouts.get(key)!);
      this.requestTimeouts.delete(key);
    }
    this.pendingRequests.delete(key);
  }

  /**
   * Clear all pending requests
   */
  static clearAll(): void {
    this.requestTimeouts.forEach(timeout => clearTimeout(timeout));
    this.requestTimeouts.clear();
    this.pendingRequests.clear();
  }

  /**
   * Get the number of pending requests
   */
  static getPendingCount(): number {
    return this.pendingRequests.size;
  }
}

export default ApiDebounceManager;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\utils\validation.ts -----

 

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\App.tsx -----

// src/App.tsx

import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";

// Providers
import { CartProvider } from "./contexts/cart-context";
import AuthProvider from "./contexts/auth-context";
import WishlistProvider from "./contexts/wishlist-context";
import LenisProvider from "./components/LenisProvider";

// Components & Layout
import ErrorBoundary from "./components/ErrorBoundary";
import MainLayout from "./components/MainLayout"; // Correctly imported

// Pages
import Index from "./pages/Index";
import NotFound from "./pages/NotFound";
import Collections from "./pages/Collections";
import CollectionDetail from "./pages/CollectionDetail";
import OurStory from "./pages/OurStory";
import Shop from "./pages/Shop";
import SignIn from "./pages/SignIn";
import SignUp from "./pages/SignUp";
import Profile from "./pages/Profile";
import Wishlist from "./pages/Wishlist";
import ConfirmEmail from "./pages/ConfirmEmail";
import ForgotPassword from "./pages/ForgotPassword";
import ResetPassword from "./pages/ResetPassword";
import OrderConfirmation from "./pages/OrderConfirmation";
import CheckoutSimple from "./pages/CheckoutSimple";
import AdminDashboard from "./pages/AdminDashboard";

const queryClient = new QueryClient();

const App = () => (
  <ErrorBoundary>
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <AuthProvider>
          <WishlistProvider>
            <CartProvider>
              <LenisProvider>
                <BrowserRouter>
                  {/* Toaster is placed outside Routes so it is not affected by navigation */}
                  <Sonner />
                  
                  <Routes>
                    {/* Wrap all pages that need the Header and Footer in the MainLayout Route */}
                    <Route element={<MainLayout />}>
                      <Route path="/" element={<Index />} />
                      <Route path="/our-story" element={<OurStory />} />
                      <Route path="/shop" element={<Shop />} />
                      <Route path="/signin" element={<SignIn />} />
                      <Route path="/signup" element={<SignUp />} />
                      <Route path="/profile" element={<Profile />} />
                      <Route path="/wishlist" element={<Wishlist />} />
                      <Route path="/collections" element={<Collections />} />
                      <Route path="/collections/:id" element={<CollectionDetail />} />
                      <Route path="/checkout" element={<CheckoutSimple />} />
                      <Route path="/order-confirmation/:orderId" element={<OrderConfirmation />} />
                      <Route path="/confirm-email" element={<ConfirmEmail />} />
                      <Route path="/forgot-password" element={<ForgotPassword />} />
                      <Route path="/reset-password" element={<ResetPassword />} />
                      <Route path="/admin" element={<AdminDashboard />} />
                    </Route>

                    {/* This is the catch-all route for pages that don't exist */}
                    <Route path="*" element={<NotFound />} />
                  </Routes>
                </BrowserRouter>
              </LenisProvider>
            </CartProvider>
          </WishlistProvider>
        </AuthProvider>
      </TooltipProvider>
    </QueryClientProvider>
  </ErrorBoundary>
);

export default App;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\src\main.tsx -----

import { createRoot } from "react-dom/client";
import App from "./App.tsx";
import "./index.css";

createRoot(document.getElementById("root")!).render(<App />);

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\tailwind.config.ts -----

import type { Config } from "tailwindcss";
import tailwindcssAnimate from "tailwindcss-animate";

export default {
  darkMode: ["class"],
  content: ["./pages/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}", "./app/**/*.{ts,tsx}", "./src/**/*.{ts,tsx}"],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: {
        DEFAULT: "1rem",
        sm: "1.5rem",
        md: "2rem",
        lg: "2.5rem",
        xl: "3rem",
      },
      screens: {
        sm: "640px",
        md: "768px",
        lg: "1024px",
        xl: "1280px",
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
        mystic: {
          DEFAULT: "hsl(var(--mystic-purple))",
          light: "hsl(var(--mystic-light))",
          glow: "hsl(var(--mystic-glow))",
        },
        gold: {
          DEFAULT: "hsl(var(--gold-accent))",
          light: "hsl(var(--gold-light))",
        },
        peach: {
          DEFAULT: "hsl(var(--peach-soft))",
        },
        mint: {
          DEFAULT: "hsl(var(--mint-soft))",
        },
        rose: {
          DEFAULT: "hsl(var(--rose-soft))",
        },
        lilac: {
          DEFAULT: "hsl(var(--lilac-soft))",
        },
      },
      backgroundImage: {
        'gradient-mystic': 'var(--gradient-mystic)',
        'gradient-ethereal': 'var(--gradient-ethereal)',
        'gradient-glow': 'var(--gradient-glow)',
        'gradient-gold': 'var(--gradient-gold)',
        'gradient-soft': 'var(--gradient-soft)',
        'gradient-peach': 'var(--gradient-peach)',
        'gradient-mint': 'var(--gradient-mint)',
        'gradient-rose': 'var(--gradient-rose)',
        'gradient-lilac': 'var(--gradient-lilac)',
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
      },
      boxShadow: {
        'mystic': 'var(--shadow-mystic)',
        'glow': 'var(--shadow-glow)',
        'soft': 'var(--shadow-soft)',
        'gold': 'var(--shadow-gold)',
        'peach': 'var(--shadow-peach)',
        'mint': 'var(--shadow-mint)',
        'rose': 'var(--shadow-rose)',
        'lilac': 'var(--shadow-lilac)',
      },
      fontFamily: {
        'cormorant-light': ['Cormorant Garamond', 'serif'],
        'madefor-medium': ['Madefor Text', 'sans-serif'],
        'lato-light': ['Lato', 'sans-serif'],
        'arial': ['Arial', 'sans-serif'],
        'playfair': ['Playfair Display', 'serif'],
        'inter': ['Inter', 'sans-serif'],
        'lobster': ['Lobster', 'Brush Script MT', 'Lucida Handwriting', 'Comic Sans MS', 'cursive', 'sans-serif'],
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [tailwindcssAnimate],
} satisfies Config;

----- D:\01--PROJECTS--APPROTECH\adhyatma-essence-enhanced-main\vite.config.ts -----

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";

// https://vitejs.dev/config/
export default defineConfig({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  build: {
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          ui: ['@radix-ui/react-dialog', '@radix-ui/react-dropdown-menu'],
        },
      },
    },
  },
});
